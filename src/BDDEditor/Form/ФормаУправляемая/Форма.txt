#Область РаботаСФормами

&НаКлиенте
Процедура РазвернутьДерево(Команда)
	ЭтаФорма.Элементы.ОбъемПроекта.Развернуть(ЭтаФорма.Элементы.ОбъемПроекта.ТекущаяСтрока,Истина);
КонецПроцедуры

&НаКлиенте
Процедура СвернутьДерево(Команда)
	ЭтаФорма.Элементы.ОбъемПроекта.Свернуть(ЭтаФорма.Элементы.ОбъемПроекта.ТекущаяСтрока);
КонецПроцедуры

&НаКлиенте
Функция ПроверитьВозможностьПереноса(ПереносимыйЭлемент, Знач НовыйРодитель)

    Пока НЕ НовыйРодитель = Неопределено Цикл
        Если ПереносимыйЭлемент = НовыйРодитель Тогда
            Возврат Ложь;
        КонецЕсли;
        НовыйРодитель = НовыйРодитель.ПолучитьРодителя();
    КонецЦикла;

    Возврат Истина;

КонецФункции

&НаКлиенте
Процедура ОбъемПроектаПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	// Вставить содержимое обработчика.
	//СтандартнаяОбработка = Ложь;
	
	РеквизитДерево = ЭтаФорма.ОбъемПроекта;
	ИДНовыйРодитель = Строка;
	НовыйРодитель = ?(ИДНовыйРодитель = Неопределено, Неопределено, РеквизитДерево.НайтиПоИдентификатору(ИДНовыйРодитель)); 	
	МассивИДПереносимыхЭлементов = ПараметрыПеретаскивания.Значение;

	Для каждого ИДПереносимыйЭлемент из МассивИДПереносимыхЭлементов Цикл
		
		ПереносимыйЭлемент = РеквизитДерево.НайтиПоИдентификатору(ИДПереносимыйЭлемент);
		
		Если НЕ ПроверитьВозможностьПереноса(ПереносимыйЭлемент,НовыйРодитель) Тогда
			ПараметрыПеретаскивания.Действие=ДействиеПеретаскивания.Отмена;
			Прервать;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция СкопироватьСтрокуДерева(РеквизитДерево, Приемник, Источник)

    Перем НоваяСтрока, ОбратныйИндекс, КолПодчиненныхСтрок;
    Если Источник = Неопределено Тогда
        Возврат Неопределено;
    КонецЕсли;

    Если Приемник = Неопределено Тогда
        НоваяСтрока = РеквизитДерево.ПолучитьЭлементы().Добавить();
    Иначе
        НоваяСтрока = Приемник.ПолучитьЭлементы().Добавить();
    КонецЕсли;

    ЗаполнитьЗначенияСвойств(НоваяСтрока, Источник);
	НоваяСтрока.ПолныйПуть=Приемник.ПолныйПуть+Источник.Имя;

    КолПодчиненныхСтрок = Источник.ПолучитьЭлементы().Количество();
    Для ОбратныйИндекс = 1 По КолПодчиненныхСтрок Цикл
        ПодчиненнаяСтрока = Источник.ПолучитьЭлементы()[КолПодчиненныхСтрок - ОбратныйИндекс];
        СкопироватьСтрокуДерева(РеквизитДерево, НоваяСтрока, ПодчиненнаяСтрока);
	КонецЦикла;
	Если ЕстьПоддержкаАсинхронныхВызовов Тогда
		НачатьПеремещениеФайла(Новый ОписаниеОповещения("ПеремещениеФайлаЗавершение", ЭтаФорма, Новый Структура("Источник, НоваяСтрока, РеквизитДерево", Источник, НоваяСтрока, РеквизитДерево)), Источник.ПолныйПуть,Приемник.ПолныйПуть+"\"+Источник.Имя);
	Иначе	
		ПереместитьФайл(Источник.ПолныйПуть,Приемник.ПолныйПуть+"\"+Источник.Имя);
	КонецЕсли;	
    Если Источник.ПолучитьРодителя() = Неопределено Тогда
        РеквизитДерево.ПолучитьЭлементы().Удалить(Источник);
    Иначе
        Источник.ПолучитьРодителя().ПолучитьЭлементы().Удалить(Источник);
    КонецЕсли;

    Возврат НоваяСтрока;

КонецФункции

&НаКлиенте
Процедура ПеремещениеФайлаЗавершение(ПеремещенныйФайл, ДополнительныеПараметры) Экспорт
	Источник = ДополнительныеПараметры.Источник;
	НоваяСтрока = ДополнительныеПараметры.НоваяСтрока;
	РеквизитДерево = ДополнительныеПараметры.РеквизитДерево;
КонецПроцедуры	

&НаКлиенте
Процедура ОбъемПроектаПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	// Вставить содержимое обработчика.
	СтандартнаяОбработка=Ложь; 
	РеквизитДерево = ЭтаФорма.ОбъемПроекта; 
	
	ИДПриемник = Строка; 
	Приемник = ?(ИДПриемник = Неопределено, Неопределено,РеквизитДерево.НайтиПоИдентификатору(ИДПриемник)); 
	МассивИДИсточник = ПараметрыПеретаскивания.Значение; 
	Для Каждого ИДИсточник Из МассивИДИсточник Цикл 
		Источник = РеквизитДерево.НайтиПоИдентификатору(ИДИсточник); 
		Если НЕ Источник.Фича Тогда
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = "Перемещение каталогов запрещено!";
			Сообщение.УстановитьДанные(ЭтотОбъект);
			Сообщение.Сообщить();
			Прервать;
		КонецЕсли;	
		НоваяСтрока = СкопироватьСтрокуДерева(РеквизитДерево, Приемник, Источник); 
		Если Приемник = Неопределено и НоваяСтрока<>Неопределено Тогда 
			Элементы.ОбъемПроекта.Развернуть(НоваяСтрока.ПолучитьИдентификатор(),Истина); 
		КонецЕсли; 
	КонецЦикла; 
	Если НЕ Приемник = Неопределено Тогда 
		Элементы.ОбъемПроекта.Развернуть(ИДПриемник, Истина); 
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаОбщаяПриСменеСтраницы(Элемент, ТекущаяСтраница)
	// Вставить содержимое обработчика.
	Если ТекущаяСтраница.Имя="АудитТребований" Тогда
		ДоступностьМодулейVB();
	КонецЕсли;	
КонецПроцедуры

#КонецОбласти  

#Область РаботаСКаталогами

&НаКлиенте
Функция ПроверитьЗаполненностьКаталоговИПутей(ЧтоПроверяем)
	ПустойПуть=Ложь;
	Для КК = 0 По ЧтоПроверяем.Количество()-1 Цикл
		Стр = ЧтоПроверяем.Получить(КК);
		Если ЗначениеЗаполнено(Объект[Стр.Значение]) Тогда
			Продолжить;
		Иначе
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = "Не заполнен "+Стр.Представление + " на закладке Параметры";
			Сообщение.УстановитьДанные(ЭтотОбъект);
			Сообщение.Сообщить();	
			ПустойПуть=Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат НЕ ПустойПуть;
	
КонецФункции	

&НаКлиенте
Процедура ПутьКХранилищуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	//TODO 
	//Здесь будет выбор места хранения структуры
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборФайлаСтруктуры(ВыбранныеФайлы,ДополнительныеПараметры) Экспорт
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	Объект.СтруктураДляЗагрузки=ВыбранныеФайлы[0];
	Если ЗначениеЗаполнено(Объект.СтруктураДляЗагрузки) Тогда
		ЗаполнитьТЗСбораТребованийИзПапкиТемп(Истина,"ТЗСбораТребований",".\Drafts\");
		КаталогКомпоненты=Элементы.КаталогКомпоненты.СписокВыбора.НайтиПоЗначению(".\Drafts\").Значение;
		ЗаполнитьТЗСбораТребованийИзПапкиТемп(Истина,"ТЗОбработкаТребований",".\Drafts\");
		ПолучитьСтруктуруКаталогов("ОбъемПроекта");
		ПроверитьМестоХраненияТребований();
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура СтруктураДляЗагрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Режим = РежимДиалогаВыбораФайла.ВыборКаталога;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	Если ЕстьПоддержкаАсинхронныхВызовов Тогда
		ОписаниеОповещения = Вычислить("Новый ОписаниеОповещения(""ОбработатьВыборФайлаСтруктуры"", ЭтаФорма)");
		Выполнить("ДиалогОткрытияФайла.Показать(ОписаниеОповещения)");
	Иначе	
		Если ДиалогОткрытияФайла.Выбрать() Тогда
			Объект.СтруктураДляЗагрузки = ДиалогОткрытияФайла.Каталог;
			Если ЗначениеЗаполнено(Объект.СтруктураДляЗагрузки) Тогда
				ЗаполнитьТЗСбораТребованийИзПапкиТемп(Истина,"ТЗСбораТребований",".\Drafts\");
				Если Элементы.КаталогКомпоненты.СписокВыбора.НайтиПоЗначению(".\Drafts\")=Неопределено Тогда
					Элементы.КаталогКомпоненты.СписокВыбора.Добавить(".\Drafts\",".\Drafts\");
				КонецЕсли;
				КаталогКомпоненты=Элементы.КаталогКомпоненты.СписокВыбора.НайтиПоЗначению(".\Drafts\").Значение;
				ЗаполнитьТЗСбораТребованийИзПапкиТемп(Истина,"ТЗОбработкаТребований",".\Drafts\");
				//ПолучитьСтруктуруКаталогов("СписокКомпонент");
				ПолучитьСтруктуруКаталогов("ОбъемПроекта");
				ПроверитьМестоХраненияТребований();
			КонецЕсли;	
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПодключитьВнешнююОбработкуСервер(АдресХранилища)
	Возврат ВнешниеОбработки.Подключить(АдресХранилища,,Ложь); 
КонецФункции 

&НаКлиенте
Процедура ОбработкаПослеПомещенияФайла(Результат,АдресХранилища,ВыбранноеИмяФайла,ДополнительныеПараметры) Экспорт
	ИмяОбработки = ПодключитьВнешнююОбработкуСервер(АдресХранилища);
	ДополнительныеПараметры.Вставить("ИмяОбработки",ИмяОбработки);
КонецПроцедуры

&НаКлиенте
Функция ПодключитьВнешнююОбработкуКлиент(ИмяФайла) Экспорт
	ДополнительныеПараметры = Новый Структура;
	Если НЕ ЕстьПоддержкаНемодальныхФорм Тогда
		Оповещение = Вычислить("Новый ОписаниеОповещения(""ОбработкаПослеПомещенияФайла"", ЭтаФорма, ДополнительныеПараметры)");
		Выполнить("НачатьПомещениеФайла(Оповещение,, ИмяФайла, Ложь, УникальныйИдентификатор);");
		
		Возврат ДополнительныеПараметры.ИмяОбработки;
	Иначе
		АдресХранилища = "";
		ПоместитьФайл(АдресХранилища, ИмяФайла, , Ложь, УникальныйИдентификатор);
		//ПодключитьВнешнююОбработку(АдресХранилища);
		Результат = Неопределено;
		ИмяОбработки = ПодключитьВнешнююОбработкуСервер(АдресХранилища);
		Возврат ИмяОбработки;
		
		//ОбработкаПолученияФайлаОбработкиТеста(Результат,АдресХранилища,ИмяФайла,ДополнительныеПараметры);
	КонецЕсли;
КонецФункции 

&НаКлиенте
Процедура СкопироватьДеревоФич(ДеревоТестов)//ДеревоТестов
	//ПрочитатьЗначениеСтрокиДерева(Новый Структура("ДеревоТестов",ДеревоТестов));
	ПрочитатьДеревоФич(Новый Структура("ДеревоТестов",ДеревоТестов));
	
КонецПроцедуры	

&НаСервере
Функция ПрочитатьДеревоФич(СтруктураДерева)
	ДеревоСтруктуры=СтруктураДерева["ДеревоТестов"];
	ДеревоР = РеквизитФормыВЗначение("ДеревоРедактора");
	ДеревоР.Строки.Очистить();
	СтрокаДерева=ДеревоСтруктуры.ПолучитьЭлементы();
	
	ПрочитатьЗначениеСтрокиДерева(СтрокаДерева,ДеревоР.Строки);
	
	ЗначениеВРеквизитФормы(ДеревоР,"ДеревоРедактора");
КонецФункции

&НаСервере
Функция ПрочитатьЗначениеСтрокиДерева(СтрокаДерева,ДеревоР)
	Для Каждого Строка Из СтрокаДерева Цикл

		НовСтр = ДеревоР.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр,Строка);
		СтрокаДалее=Строка.ПолучитьЭлементы();	
		Если СтрокаДалее.Количество()>0 Тогда
			ПрочитатьЗначениеСтрокиДерева(СтрокаДалее,НовСтр.Строки);
		КонецЕсли;	
		
	КонецЦикла;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьДерево(Команда) Экспорт
	ПутиДляПроверки=Новый СписокЗначений;
	ПутиДляПроверки.Добавить("ПутьКVanessaBehavior","путь к vanessa behavior");
	ПутиДляПроверки.Добавить("КаталогИнструментов", "каталог инструментов");
	ПараметрыЗаполнены=ПроверитьЗаполненностьКаталоговИПутей(ПутиДляПроверки);
	Если НЕ ПараметрыЗаполнены Тогда
		Возврат;
	КонецЕсли;	
		
	ИмяОбработки = ПодключитьВнешнююОбработкуКлиент(Объект.ПутьКVanessaBehavior);
	ФормаОбработки = ПолучитьФорму("ВнешняяОбработка." + ИмяОбработки + ".Форма.УправляемаяФорма",,,Истина,);
	Если ЕстьПоддержкаАсинхронныхВызовов Тогда
		ПоказатьЗначение(Новый ОписаниеОповещения("ЗаполнитьДеревоЗавершение", ЭтаФорма, Новый Структура("ФормаОбработки", ФормаОбработки)), ФормаОбработки);		
		
	Иначе
		ФормаОбработки.Открыть();
		ФормаОбработки.Объект.КаталогИнструментов=Объект.КаталогИнструментов;
		ФормаОбработки.Объект.КаталогФич = Объект.СтруктураДляЗагрузки;
		ФормаОбработки.ЗагрузитьФичи();
		СкопироватьДеревоФич(ФормаОбработки.Объект.ДеревоТестов);
		ФормаОбработки.Закрыть();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДеревоЗавершение(ДополнительныеПараметры) Экспорт
	
	ФормаОбработки = ДополнительныеПараметры.ФормаОбработки;
	
	ФормаОбработки.Объект.КаталогИнструментов=Объект.КаталогИнструментов;
	ФормаОбработки.Объект.КаталогФич = Объект.СтруктураДляЗагрузки;
	
	ФормаОбработки.ЗагрузитьФичи();
	СкопироватьДеревоФич(ФормаОбработки.Объект.ДеревоТестов);
//	ФормаОбработки.Закрыть();

КонецПроцедуры

&НаСервереБезКонтекста
Функция РазложитьСтрокуВМассивПодстрок(Знач Строка, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено) Экспорт
	
	Результат = Новый Массив;
	
	// для обеспечения обратной совместимости
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Строка) Тогда 
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//
	
	Позиция = Найти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Результат.Добавить(Подстрока);
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		Позиция = Найти(Строка, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
		Результат.Добавить(Строка);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции 

&НаСервереБезКонтекста 
Функция ПолучитьРежимМодальностиКонфигурации()
	Возврат Метаданные.РежимИспользованияМодальности = Метаданные.СвойстваОбъектов.РежимИспользованияМодальности.Использовать;
КонецФункции

&НаКлиенте
Процедура ОбработатьВыборФайла(ВыбранныеФайлы,ДополнительныеПараметры) Экспорт
	ПутьСохранения=ДополнительныеПараметры.Путь;
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	Если ТипЗНЧ(ВыбранныеФайлы[0])=Тип("Файл") Тогда
		Объект[ПутьСохранения]=ВыбранныеФайлы[0].ПолноеИмя;
	Иначе	
		Объект[ПутьСохранения]=ВыбранныеФайлы[0];
	КонецЕсли;	
	Если ДополнительныеПараметры.Свойство("ДальнейшаяПроцедура") и ДополнительныеПараметры.Свойство("КаталогИнструментов") Тогда
		КонтекстПоискаФАйлов = Новый Структура;
		КонтекстПоискаФАйлов.Вставить("Индекс",-1);
		КонтекстПоискаФАйлов.Вставить("Список",ДополнительныеПараметры.КаталогИнструментов);
		ЦиклПоискаФалов(КонтекстПоискаФАйлов);
	ИначеЕсли ДополнительныеПараметры.Свойство("ДальнейшаяПроцедура")<>Ложь Тогда
		Выполнить(ДополнительныеПараметры.ДальнейшаяПроцедура);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ПутьКVanessaBehaviorНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	Режим = РежимДиалогаВыбораФайла.Открытие;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.Заголовок = "Выберите путь к обработке Vanessa Behavior ";
	ДиалогОткрытияФайла.Фильтр = "Файл (*.epf)|*.epf";
	Если ЕстьПоддержкаАсинхронныхВызовов Тогда
		ОписаниеОповещения = Вычислить("Новый ОписаниеОповещения(""ОбработатьВыборФайла"", ЭтаФорма,Новый Структура(""Путь"", ""ПутьКVanessaBehavior""))");
		Выполнить("ДиалогОткрытияФайла.Показать(ОписаниеОповещения)");
	Иначе	
		Если ДиалогОткрытияФайла.Выбрать() Тогда
			Объект.ПутьКVanessaBehavior = ДиалогОткрытияФайла.ПолноеИмяФайла;
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;  
КонецПроцедуры

&НаКлиенте
Процедура КаталогИнструментовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	Режим = РежимДиалогаВыбораФайла.ВыборКаталога;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.Заголовок = "Выберите путь к каталогу инструментов ";
	Если ЕстьПоддержкаАсинхронныхВызовов Тогда
		ОписаниеОповещения = Вычислить("Новый ОписаниеОповещения(""ОбработатьВыборФайла"", ЭтаФорма,Новый Структура(""Путь"", ""КаталогИнструментов""))");
		Выполнить("ДиалогОткрытияФайла.Показать(ОписаниеОповещения)");
	Иначе	
		Если ДиалогОткрытияФайла.Выбрать() Тогда
			Объект.КаталогИнструментов = ДиалогОткрытияФайла.Каталог;
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;  
КонецПроцедуры

&НаКлиенте
Процедура ПутьКCommonsНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	Режим = РежимДиалогаВыбораФайла.ВыборКаталога;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.Заголовок = "Выберите путь к каталогу инструментов ";
	Если ЕстьПоддержкаАсинхронныхВызовов Тогда
		ОписаниеОповещения = Вычислить("Новый ОписаниеОповещения(""ОбработатьВыборФайла"", ЭтаФорма,Новый Структура(""Путь"", ""ПутьКCommons""))");
		Выполнить("ДиалогОткрытияФайла.Показать(ОписаниеОповещения)");
	Иначе	
		Если ДиалогОткрытияФайла.Выбрать() Тогда
			Объект.ПутьКCommons = ДиалогОткрытияФайла.Каталог;
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;  
КонецПроцедуры

&НаКлиенте
//перед началом выбора
Процедура КаталогBDDEditorНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	Режим = РежимДиалогаВыбораФайла.ВыборКаталога;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.Заголовок = "Выберите путь к каталогу инструментов ";
	Если ЕстьПоддержкаАсинхронныхВызовов Тогда
		ОписаниеОповещения = Вычислить("Новый ОписаниеОповещения(""ОбработатьВыборФайла"", ЭтаФорма,Новый Структура(""Путь"", ""КаталогBDDEditor""))");
		Выполнить("ДиалогОткрытияФайла.Показать(ОписаниеОповещения)");
	Иначе	
		Если ДиалогОткрытияФайла.Выбрать() Тогда
			Объект.КаталогBDDEditor = ДиалогОткрытияФайла.Каталог;
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;  
КонецПроцедуры

&НаКлиенте
Процедура КаталогVanessaStackНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	КаталогиИнструментов=Новый СписокЗначений;
	КаталогиИнструментов.Добавить("vanessa-behavior.epf","ПутьКVanessaBehavior");
	КаталогиИнструментов.Добавить("vanessa-stack-commons","ПутьКCommons");
	КаталогиИнструментов.Добавить("vanessa-commons","ПутьКCommons");
	КаталогиИнструментов.Добавить("vanessa-behavior","КаталогИнструментов");
	КаталогиИнструментов.Добавить("vanessa-bdd-editor","КаталогBDDEditor");
	
	Режим = РежимДиалогаВыбораФайла.ВыборКаталога;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.Заголовок = "Выберите путь к каталогу инструментов ";
	Если ЕстьПоддержкаАсинхронныхВызовов Тогда
		ОписаниеОповещения = Вычислить("Новый ОписаниеОповещения(""ОбработатьВыборФайла"", ЭтаФорма,Новый Структура(""Путь,ДальнейшаяПроцедура,КаталогИнструментов"", ""КаталогVanessaStack"", ""ЗаполнитьКаталогиИнструментовАсинхронная()"",КаталогиИнструментов))");
//		ОписаниеОповещения = Вычислить("Новый ОписаниеОповещения(""ОбработатьВыборФайла"", ЭтаФорма,Новый Структура(""Путь,ДальнейшаяПроцедура"", ""КаталогVanessaStack"", ""ЗаполнитьКаталогиИнструментовАсинхронная()""))");
		Выполнить("ДиалогОткрытияФайла.Показать(ОписаниеОповещения)");
	Иначе	
		Если ДиалогОткрытияФайла.Выбрать() Тогда
			Объект.КаталогVanessaStack = ДиалогОткрытияФайла.Каталог;
			Для Каждого Стр из КаталогиИнструментов Цикл
				ЗаполнитьКаталогиИнструментовСинхронная(Стр);
			КонецЦикла;
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли; 
КонецПроцедуры	

&НаКлиенте 
Процедура ОбработкаФайловПослеЗавершения(НайденныеФайлы,ДополнительныеПараметры) экспорт
	Если НайденныеФайлы.Количество() <> 0 Тогда
		Если НЕ ЗначениеЗаполнено(Объект[ДополнительныеПараметры.Куда]) Тогда
			Объект[ДополнительныеПараметры.Куда]=НайденныеФайлы[0].ПолноеИмя;
		КонецЕсли;
	КонецЕсли;
	ЦиклПоискаФалов(ДополнительныеПараметры.Контекст);
КонецПроцедуры

&НаКлиенте
Процедура ЦиклПоискаФалов(Контекст) Экспорт
	Если Контекст.Индекс + 1 < Контекст.Список.Количество() Тогда
		Контекст.Индекс = Контекст.Индекс + 1;
		Струк = Новый Структура;
		Струк.Вставить("Контекст",Контекст);
		Струк.Вставить("Куда",Контекст.Список[Контекст.Индекс].Представление);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаФайловПослеЗавершения",ЭтотОбъект,Струк);
		НачатьПоискФайлов(ОписаниеОповещения,Объект.КаталогVanessaStack,Контекст.Список[Контекст.Индекс].Значение,истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКаталогиИнструментовСинхронная(Стр) Экспорт
	ИмяФайла=Стр.Значение;
	КудаФайл=Стр.Представление;
	НайденныеФайлы=НайтиФайлы(Объект.КаталогVanessaStack,ИмяФайла,Истина);
	Если НайденныеФайлы.Количество()>0 Тогда
		Если НЕ ЗначениеЗаполнено(Объект[КудаФайл]) Тогда
			Объект[КудаФайл]=НайденныеФайлы[0].ПолноеИмя;
		КонецЕсли;	
	КонецЕсли;
	ДоступностьМодулейVB();	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКаталогиИнструментовАСинхронная(КаталогиИнструментов) Экспорт
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКаталогиПоVanessaStack(ПутьКСтэку)
	КаталогиИнструментов=Новый СписокЗначений;
	КаталогиИнструментов.Добавить("vanessa-behavior.epf","ПутьКVanessaBehavior");
//	КаталогиИнструментов.Добавить("vanessa-stack-commons","ПутьКCommons");
	КаталогиИнструментов.Добавить("vanessa-commons","ПутьКCommons");
	КаталогиИнструментов.Добавить("vanessa-behavior","КаталогИнструментов");
	КаталогиИнструментов.Добавить("vanessa-bdd-editor","КаталогBDDEditor");
	
	Если ЕстьПоддержкаАсинхронныхВызовов Тогда
		ДополнительныеПараметры=Новый Структура("Путь,ДальнейшаяПроцедура,КаталогИнструментов", "КаталогVanessaStack", "ЗаполнитьКаталогиИнструментовАсинхронная()",КаталогиИнструментов);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьВыборФайла",ЭтотОбъект,ДополнительныеПараметры);
		НачатьПоискФайлов(ОписаниеОповещения,ПутьКСтэку,,истина);
		
	//	ОбработатьВыборФайла(ВыбранныеФайлы,ДополнительныеПараметры);		
	Иначе	
		Объект.КаталогVanessaStack = ПутьКСтэку;
		Для Каждого Стр из КаталогиИнструментов Цикл
			ЗаполнитьКаталогиИнструментовСинхронная(Стр);
		КонецЦикла;
	КонецЕсли; 
		
КонецПроцедуры	

&НаКлиенте
Процедура КаталогВбросовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Режим = РежимДиалогаВыбораФайла.ВыборКаталога;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.Заголовок = "Выберите путь к каталогу инструментов ";
	Если ЕстьПоддержкаАсинхронныхВызовов Тогда
		ОписаниеОповещения = Вычислить("Новый ОписаниеОповещения(""ОбработатьВыборФайла"", ЭтаФорма,Новый Структура(""Путь"", ""КаталогВбросов""))");
		Выполнить("ДиалогОткрытияФайла.Показать(ОписаниеОповещения)");
	Иначе	
		Если ДиалогОткрытияФайла.Выбрать() Тогда
			Объект.КаталогВбросов = ДиалогОткрытияФайла.Каталог;
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;  
КонецПроцедуры


#КонецОбласти

#Область Служебные

&НаСервере
Функция ПутьКТекущейОбработкеНаСервере()
	ПутьКТекущейОбработке=РеквизитФормыВЗначение("Объект").ИспользуемоеИмяФайла;
	Возврат ПутьКТекущейОбработке;
КонецФункции

&НаКлиенте
Процедура ПервыйЗапускBDDEditorВStack()
	ПутьКТекущейОбработке=ПутьКТекущейОбработкеНаСервере(); 
	
	Если НЕ ЗначениеЗаполнено(Объект.КаталогBDDEditor) Тогда
		Объект.КаталогBDDEditor=СтрЗаменить(ПутьКТекущейОбработке,"BDDEditor.epf","");
	КонецЕсли;
	
	//Если ЗначениеЗаполнено(Объект.КаталогVanessaStack) Тогда
	//	Возврат;
	//КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ПутьКVanessaBehavior) и ЗначениеЗаполнено(Объект.ПутьКCommons) и ЗначениеЗаполнено(Объект.КаталогИнструментов) и ЗначениеЗаполнено(Объект.КаталогBDDEditor) Тогда
		Возврат;
	КонецЕсли;
	
	НашлиСтэк=СтрНайти(ПутьКТекущейОбработке,"vanessa-stack\stack");
	Если НашлиСтэк>0 Тогда
		ПутьКСтэку=Сред(ПутьКТекущейОбработке,0,НашлиСтэк+СтрДлина("vanessa-stack\stack\")-1);
		ЗаполнитьКаталогиПоVanessaStack(ПутьКСтэку);
	КонецЕсли;	
		
КонецПроцедуры	

&НаСервереБезКонтекста
Функция УзнатьЕстьПоддержкаНемодальныхФорм()
	СистемнаяИнформация = Новый СистемнаяИнформация;
	Массив1 = РазложитьСтрокуВМассивПодстрок(СистемнаяИнформация.ВерсияПриложения,".");
	Массив2 = РазложитьСтрокуВМассивПодстрок("8.3.3.641",".");
	
	Версия1БольшеИлиРавно = Истина;
	Для Ккк = 0 По Массив1.Количество()-1 Цикл
		Элем1 = Массив1.Получить(Ккк);
		Элем2 = Массив2.Получить(Ккк);
		
		Если Число(Элем2) > Число(Элем1) Тогда
			Версия1БольшеИлиРавно = Ложь;
		КонецЕсли;	 
	КонецЦикла;
	
	Рез = Версия1БольшеИлиРавно И Вычислить("Метаданные.РежимИспользованияМодальности <> Метаданные.СвойстваОбъектов.РежимИспользованияМодальности.НеИспользовать");
	
	Возврат Рез;
КонецФункции

&НаСервереБезКонтекста
Функция УзнатьЕстьПоддержкаАсинхронныхВызовов()
	СистемнаяИнформация = Новый СистемнаяИнформация;
	Массив1 = РазложитьСтрокуВМассивПодстрок(СистемнаяИнформация.ВерсияПриложения,".");
	Массив2 = РазложитьСтрокуВМассивПодстрок("8.3.5.1383",".");
	
	Версия1БольшеИлиРавно = Истина;
	Для Ккк = 0 По Массив1.Количество()-1 Цикл
		Элем1 = Массив1.Получить(Ккк);
		Элем2 = Массив2.Получить(Ккк);
		
		Если Число(Элем2) > Число(Элем1) Тогда
			Версия1БольшеИлиРавно = Ложь;
		КонецЕсли;	 
	КонецЦикла;
	
	
	Рез = Версия1БольшеИлиРавно И Вычислить("Метаданные.РежимИспользованияСинхронныхВызововРасширенийИВнешнихКомпонент <> Метаданные.СвойстваОбъектов.РежимИспользованияСинхронныхВызововРасширенийИВнешнихКомпонент.Использовать");
	
	Возврат Рез;
КонецФункции

&НаКлиенте
Функция УзнатьЕстьПоддержкаНемодальныхФормКлиент() Экспорт
	Возврат УзнатьЕстьПоддержкаНемодальныхФорм();
КонецФункции

&НаСервере
Процедура УсловноеОформление()
КонецПроцедуры	
	
&НаКлиенте
Процедура ПоказыватьТехДанныеПриИзменении(Элемент)
	
	Элементы.ГруппаАдминистративныхНастроек.Видимость = Объект.ПоказыватьТехДанные;
	Элементы.ТабличныеДанныеГИТПолныйХеш.Видимость = Объект.ПоказыватьТехДанные;
	Элементы.ТабличныеДанныеГИТХеш.Видимость = Объект.ПоказыватьТехДанные;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	//Вставить содержимое обработчика
	ЕстьПоддержкаНемодальныхФорм    = УзнатьЕстьПоддержкаНемодальныхФорм();
	ЕстьПоддержкаАсинхронныхВызовов = УзнатьЕстьПоддержкаАсинхронныхВызовов();
	ПоказыватьРасшифровку=Истина;
	УсловноеОформление();
//	ИмяОбработки = РеквизитФормыВЗначение("Объект").Метаданные().ПолноеИмя();
КонецПроцедуры

&НаСервере
Процедура ВосстановитьНастройки() Экспорт
	Если Объект.РежимСамотестирования Тогда
		Возврат;
	КонецЕсли;          
	
	Настройки = ХранилищеОбщихНастроек.Загрузить("VanessaBDDEditor"+СтрЗаменить(ПутьКТекущейОбработкеНаСервере()," ",""));
	Если ТипЗнч(Настройки) = Тип("Структура") Тогда
		
		Настройки.Свойство("КаталогVanessaStack", Объект.КаталогVanessaStack);
		Настройки.Свойство("ПутьКVanessaBehavior", Объект.ПутьКVanessaBehavior);
		Настройки.Свойство("ПутьКCommons",Объект.ПутьКCommons);
		Настройки.Свойство("КаталогИнструментов", Объект.КаталогИнструментов);
//		Настройки.Свойство("КаталогBDDEditor", Объект.КаталогBDDEditor);
		Настройки.Свойство("КаталогВбросов", Объект.КаталогВбросов);
		
		Настройки.Свойство("СтруктураДляЗагрузки", Объект.СтруктураДляЗагрузки);
		ТекущаяСтраница="";
		Если Настройки.Свойство("ТекущаяСтраница",ТекущаяСтраница) Тогда
			ЭтаФорма.Элементы.ГруппаОбщая.ТекущаяСтраница=ЭтаФорма.Элементы[ТекущаяСтраница];
		КонецЕсли;	
		
		Объект.ПоказыватьРасшифровку=Истина;
		
		Настройки.Свойство("ТэгиФичи",ТэгиФичи);
	
	КонецЕсли;
	
	Настройки = ХранилищеОбщихНастроек.Загрузить("VanessaEpics");
	Если ТипЗнч(Настройки) = Тип("Структура") Тогда
		Настройки.Свойство("gitrepos", Объект.Репозиторий);
		АктивироватьСтраницыРаботыСРепозиторием();
	Иначе	
		АктивироватьСтраницыНастройки();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройки() Экспорт
	Если Объект.РежимСамотестирования Тогда
		Возврат;
	КонецЕсли;  
	                           
	Настройки = Новый Структура;
	Настройки.Вставить("КаталогVanessaStack", Объект.КаталогVanessaStack);
	Настройки.Вставить("ПутьКVanessaBehavior", Объект.ПутьКVanessaBehavior);
	Настройки.Вставить("ПутьКCommons",Объект.ПутьКCommons);
	Настройки.Вставить("КаталогИнструментов", Объект.КаталогИнструментов);
//	Настройки.Вставить("КаталогBDDEditor", Объект.КаталогBDDEditor);
	Настройки.Вставить("КаталогВбросов", Объект.КаталогВбросов);

	Настройки.Вставить("СтруктураДляЗагрузки", Объект.СтруктураДляЗагрузки);
	Настройки.Вставить("ТекущаяСтраница",ЭтаФорма.Элементы.ГруппаОбщая.ТекущаяСтраница.Имя);
	
	Настройки.Вставить("ТэгиФичи",ТэгиФичи);
	
	ХранилищеОбщихНастроек.Сохранить("VanessaBDDEditor"+СтрЗаменить(ПутьКТекущейОбработкеНаСервере()," ",""),, Настройки);
КонецПроцедуры

&НаКлиенте 
Процедура ДоступностьМодулейVB() 
	Если ЗначениеЗаполнено(Объект.ПутьКVanessaBehavior)	и ЗначениеЗаполнено(Объект.КаталогИнструментов) Тогда	
		ЭтаФорма.Элементы.СтруктураТребований.Доступность=Истина;
		ЭтаФорма.Элементы.ОбъемПроектаОткрытьФичуВВБ.Доступность=Истина;
	Иначе
		ЭтаФорма.Элементы.СтруктураТребований.Доступность=Ложь;
		ЭтаФорма.Элементы.ОбъемПроектаОткрытьФичуВВБ.Доступность=Ложь;
	КонецЕсли;	
КонецПроцедуры	

&НаКлиенте
Процедура НастроитьВидимостьИДоступность()
	ЭтаФорма.Элементы.ТЗСбораТребованийРасшифровка.Видимость=Объект.ПоказыватьРасшифровку;
	ИзменитьДоступГруппыОбработкиФичи(Ложь);
	ЭтаФорма.Элементы.КаталогКомпоненты.СписокВыбора.Добавить(".\Drafts\",".\Drafts\");
	КаталогКомпоненты=Элементы.КаталогКомпоненты.СписокВыбора.НайтиПоЗначению(".\Drafts\").Значение;
	СписокСценариев.ТипЗначения = Новый ОписаниеТипов("Строка");
	ТэгиФичи.ТипЗначения = Новый ОписаниеТипов("Строка");
//	ИсточникВбросов="0";

	ИсточникСтруктураКаталогов("");	

	ДоступностьМодулейVB();
	ПроверитьМестоХраненияТребований();
	ПоказыватьТехДанныеПриИзменении("");	
КонецПроцедуры	

&НаКлиенте
Процедура УстановитьНастройкиСамотестирования() Экспорт
	ВременныйКаталог=КаталогВременныхФайлов()+"Temp";
	Темп=Новый Файл(ВременныйКаталог);
	Если НЕ Темп.Существует() Тогда
		СоздатьКаталог(ВременныйКаталог);
	КонецЕсли;	
    Объект.СтруктураДляЗагрузки=ВременныйКаталог;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	//Вставить содержимое обработчика
	ЭтаФорма.КлючУникальности=ПутьКТекущейОбработкеНаСервере();
	Если Объект.РежимСамотестирования Тогда
		УстановитьНастройкиСамотестирования();
	КонецЕсли;	
		
	ВосстановитьНастройки();
	
	ПервыйЗапускBDDEditorВStack();
	
	НастроитьВидимостьИДоступность();
	Если ЗначениеЗаполнено(Объект.СтруктураДляЗагрузки) И (СтрНайти(Объект.СтруктураДляЗагрузки,"Feature")>0 или СтрНайти(Объект.СтруктураДляЗагрузки,"feature")>0) Тогда
		//ПолучитьСтруктуруКаталогов("СписокКомпонент");
		ПолучитьСтруктуруКаталогов("ОбъемПроекта");
		ЗаполнитьТЗСбораТребованийИзПапкиТемп(Ложь,"ТЗСбораТребований",".\Drafts\");	
		ЗаполнитьТЗСбораТребованийИзПапкиТемп(Ложь,"ТЗОбработкаТребований",КаталогКомпоненты);	
	КонецЕсли;	
	ЗаполнитьКонтекстноеМеню();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	//Вставить содержимое обработчика
	СохранитьНастройки();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЗначениеКонстанты(ИмяКонстанты) Экспорт
	ЗначениеКонстанты = Константы[ИмяКонстанты].Получить();
	Возврат ЗначениеКонстанты;
КонецФункции

#КонецОбласти

#Область КонтекстноеМеню

&НаСервере 
Процедура ЗаполнитьКонтекстноеМеню()
	ПунктРД1=Элементы.Добавить("ДеревоРедактораКонтекстноеМенюПунктВыполнитьСценарий", Тип("КнопкаФормы"), Элементы.ДеревоРедактора.КонтекстноеМеню);
	ПунктРД1.Заголовок="Открыть в редакторе BDD-Editor";
	ПунктРД1.ИмяКоманды="ОткрытьФичаФайлВРедакторе";
	
	ПунктРД2=Элементы.Добавить("ДеревоРедактораКонтекстноеМенюПунктОткрытьФичаФайл", Тип("КнопкаФормы"), Элементы.ДеревоРедактора.КонтекстноеМеню);
	ПунктРД2.Заголовок="Открыть во внешнем редакторе";
	ПунктРД2.ИмяКоманды="ОткрытьФичаФайлВNotepad";
	
	ПунктОП1=Элементы.Добавить("ОбъемПроектаКонтекстноеМенюПунктВыполнитьСценарий", Тип("КнопкаФормы"), Элементы.ОбъемПроекта.КонтекстноеМеню);
	ПунктОП1.Заголовок="Открыть в редакторе BDD-Editor";
	ПунктОП1.ИмяКоманды="ОткрытьФичаФайлВРедакторе";
	
	ПунктОП2=Элементы.Добавить("ОбъемПроектаКонтекстноеМенюПунктОткрытьФичаФайл", Тип("КнопкаФормы"), Элементы.ОбъемПроекта.КонтекстноеМеню);
	ПунктОП2.Заголовок="Открыть во внешнем редакторе";
	ПунктОП2.ИмяКоманды="ОткрытьФичаФайлВNotepad";
	
	ПунктОТ1=Элементы.Добавить("ТЗОбработкаТребованийКонтекстноеМенюПунктВыполнитьСценарий", Тип("КнопкаФормы"), Элементы.ТЗОбработкаТребований.КонтекстноеМеню);
	ПунктОТ1.Заголовок="Открыть в редакторе BDD-Editor";
	ПунктОТ1.ИмяКоманды="ОткрытьФичаФайлВРедакторе";
	
	ПунктОТ2=Элементы.Добавить("ТЗОбработкаТребованийКонтекстноеМенюПунктОткрытьФичаФайл", Тип("КнопкаФормы"), Элементы.ТЗОбработкаТребований.КонтекстноеМеню);
	ПунктОТ2.Заголовок="Открыть во внешнем редакторе";
	ПунктОТ2.ИмяКоманды="ОткрытьФичаФайлВNotepad";
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьЗапускПриложения(КодВозврата,ДополнительныеПараметры) Экспорт
КонецПроцедуры

&НаКлиенте
Функция НайтиСтрокуФичиЧерезРодителя(Стр)
	СтрокаДерева = Стр;
	Пока Истина Цикл
		СтрокаДерева = СтрокаДерева.ПолучитьРодителя();
		Если СтрокаДерева = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;	 
		
		Если СтрокаДерева.Фича = Истина Тогда
			Возврат СтрокаДерева;
		КонецЕсли;	 
	КонецЦикла;
КонецФункции	

&НаКлиенте
Процедура ОткрытьФичаФайлВРедакторе(Команда)
	СтрокаФичи = Элементы[этаформа.ТекущийЭлемент.Имя].ТекущиеДанные;
	Если СтрокаФичи.Фича <> Истина Тогда
		СтрокаФичи = НайтиСтрокуФичиЧерезРодителя(СтрокаФичи);
		Если СтрокаФичи = Неопределено Тогда
			Сообщить("Строка с фича-файлом не найдена!");
			Возврат;
		КонецЕсли;	 
	КонецЕсли;	 
	
	ФормаОбработки = ПолучитьФорму("ВнешняяОбработка.BDDEditor.Форма.ФормаРедактора",,ЭтаФорма);
	СписокОткрытыхОкон=ПолучитьОкна();
	//Для Каждого Окно из СписокОткрытыхОкон Цикл
	//	
	//КонецЦикла;
	Если ФормаОбработки.Открыта() Тогда
		Если ФормаОбработки.ПутьКФиче<>СтрокаФичи.ПолныйПуть Тогда// И ФормаОбработки.БылиИзменения Тогда
			ФормаОбработки.ЗаписатьИзмененияВФиче();
			ФормаОбработки.ПутьКФиче=СтрокаФичи.ПолныйПуть;
			ФормаОбработки.ЕстьПоддержкаАсинхронныхВызовов=ЭтаФорма.ЕстьПоддержкаАсинхронныхВызовов;
			ФормаОбработки.ЕстьПоддержкаНемодальныхФорм=ЭтаФорма.ЕстьПоддержкаНемодальныхФорм;
			ФормаОбработки.КаталогBDDEditor=Объект.КаталогBDDEditor;
			ФормаОбработки.ПолучитьТекстФичи();
			ФормаОбработки.Активизировать();
			ФормаОбработки.Открыть();
		Иначе	
			ФормаОбработки.ПутьКФиче=СтрокаФичи.ПолныйПуть;
			ФормаОбработки.ЕстьПоддержкаАсинхронныхВызовов=ЭтаФорма.ЕстьПоддержкаАсинхронныхВызовов;
			ФормаОбработки.ЕстьПоддержкаНемодальныхФорм=ЭтаФорма.ЕстьПоддержкаНемодальныхФорм;
			ФормаОбработки.КаталогBDDEditor=Объект.КаталогBDDEditor;
			ФормаОбработки.ПолучитьТекстФичи();
			ФормаОбработки.Открыть();
		КонецЕсли;	
	Иначе	
		ФормаОбработки.ПутьКФиче=СтрокаФичи.ПолныйПуть;
		ФормаОбработки.ЕстьПоддержкаАсинхронныхВызовов=ЭтаФорма.ЕстьПоддержкаАсинхронныхВызовов;
		ФормаОбработки.ЕстьПоддержкаНемодальныхФорм=ЭтаФорма.ЕстьПоддержкаНемодальныхФорм;
		ФормаОбработки.КаталогBDDEditor=Объект.КаталогBDDEditor;
		ФормаОбработки.Открыть();
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФичаФайлВNotepad(Команда)
	СтрокаФичи = Элементы[этаформа.ТекущийЭлемент.Имя].ТекущиеДанные;
	Если СтрокаФичи.Фича <> Истина Тогда
		СтрокаФичи = НайтиСтрокуФичиЧерезРодителя(СтрокаФичи);
		Если СтрокаФичи = Неопределено Тогда
			Сообщить("Строка с фича-файлом не найдена!");
			Возврат;
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если ЕстьПоддержкаАсинхронныхВызовов Тогда
		ОписаниеОповещения = Вычислить("Новый ОписаниеОповещения(""ОбработатьЗапускПриложения"", ЭтаФорма)");
		Выполнить("НачатьЗапускПриложения(ОписаниеОповещения,СтрокаФичи.ПолныйПуть)");
	Иначе	
		ЗапуститьПриложение(СтрокаФичи.ПолныйПуть);
	КонецЕсли;  
	
КонецПроцедуры

#КонецОбласти

#Область Фичи

&НаКлиенте
Процедура СоздатьФичаФайлыНаСервере()
	// Вставить содержимое обработчика.
	
	
КонецПроцедуры

&НаКлиенте
Функция ПоискФайлаПоИмени(ИмяФайла,ТекСтрока,ПараметрыПутей) Экспорт
	Вернуть=Новый Массив;
	НайденныеФайлы = Неопределено;
	
	Если ЕстьПоддержкаАсинхронныхВызовов Тогда
		НачатьПоискФайлов(Новый ОписаниеОповещения("ПоискФайлаПоИмениЗавершение", ЭтаФорма, Новый Структура("Вернуть,ТекСтрока,ПараметрыПутей", Вернуть,ТекСтрока,ПараметрыПутей)), Объект.СтруктураДляЗагрузки,ИмяФайла,Истина);
		
	Иначе
		
		НайденныеФайлы=НайтиФайлы(Объект.СтруктураДляЗагрузки,ИмяФайла,Истина);
		Для Каждого Файлик из НайденныеФайлы Цикл
			Если Файлик.ПолноеИмя<>Неопределено Тогда
				Вернуть.Добавить(Файлик.ПолноеИмя);
			КонецЕсли;
		КонецЦикла;	
		ОбработатьНайденныеФичи(Вернуть,ТекСтрока,ПараметрыПутей);
	КонецЕсли;
КонецФункции	

&НаКлиенте
Процедура ПоискФайлаПоИмениЗавершение(НайденныеФайлы1, ДополнительныеПараметры) Экспорт
	
	Вернуть = ДополнительныеПараметры.Вернуть;
	ТекСтрока = ДополнительныеПараметры.ТекСтрока;
	ПараметрыПутей = ДополнительныеПараметры.ПараметрыПутей;
	НайденныеФайлы=НайденныеФайлы1;
	Для Каждого Файлик из НайденныеФайлы Цикл
		Если Файлик.ПолноеИмя<>Неопределено Тогда
			Вернуть.Добавить(Файлик.ПолноеИмя);
		КонецЕсли;
	КонецЦикла;	
	ОбработатьНайденныеФичи(Вернуть,ТекСтрока,ПараметрыПутей);
	//Возврат Вернуть;

КонецПроцедуры	

&НаКлиенте
Процедура ОбработатьНайденныеФичи(НайденныеФайлы,ТекСтрока,ПараметрыПутей)
	ПутьКФайлу=ПараметрыПутей.ПутьКФайлу;
	ПутьКФайлуСТемп=ПараметрыПутей.ПутьКФайлуСТемп;
	НовоеИмяФайла=ПараметрыПутей.НовоеИмяФайла;
	Стр=ПараметрыПутей.Стр;
	Если НайденныеФайлы.Количество()=0 Тогда
		Если ЗначениеЗаполнено(ТекСтрока.Компонент) Тогда
			//ПолныйПуть=""+ПутьКФайлу+"\"+СокрЛП(ТекСтрока.Компонент)+"\"+СокрЛП(НовоеИмяФайла);
			ПолныйПуть=""+ПутьКФайлу+"\"+СокрЛП(ТекСтрока.Компонент)+СокрЛП(НовоеИмяФайла);
		Иначе
			ПолныйПуть=""+СокрЛП(ПутьКФайлуСТемп)+СокрЛП(НовоеИмяФайла);
		КонецЕсли;	
		
		АдресФайлаВоВременномХранилище = "";
		
		Шаблон=ПолучитьШаблонФичаФайла("ШаблонФичи",Стр, АдресФайлаВоВременномХранилище);
		
		Если Не ПустаяСтрока(АдресФайлаВоВременномХранилище) Тогда
			ПолучитьФайл(АдресФайлаВоВременномХранилище, ПолныйПуть,Ложь);
		КонецЕсли;
		ТекСтрока.ПолныйПуть=ПолныйПуть;
	ИначеЕсли НайденныеФайлы.Количество()=1 Тогда
		ПолныйПуть=НайденныеФайлы[0];
		ТекСтрока.ПолныйПуть=ПолныйПуть;
	Иначе 
		//Элементы.ТЗСбораТребованийЕстьФичи.Видимость=Истина;
		ТекСтрока.ЕстьФичи="Существует несколько feature-файлов с таким именем";
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКаталогТемп(Существует, ДополнительныеПараметры) Экспорт
	
	ПутьКФайлу = ДополнительныеПараметры.ПутьКФайлу;
	ПутьКФайлуСТемп = ДополнительныеПараметры.ПутьКФайлуСТемп;
	
	
	Если НЕ Существует Тогда
		НачатьСозданиеКаталога(Новый ОписаниеОповещения("СоздатьФичаФайлыЗавершение", ЭтаФорма, Новый Структура("ПутьКФайлу, ПутьКФайлуСТемп", ПутьКФайлу, ПутьКФайлуСТемп)), ПутьКФайлуСТемп);
		Возврат;
	КонецЕсли;	
	СоздатьФичаФайлыФрагмент(ПутьКФайлу, ПутьКФайлуСТемп);

КонецПроцедуры

&НаКлиенте
Процедура СоздатьФичаФайлыЗавершение(ПутьКФайлуСТемп, ДополнительныеПараметры) Экспорт
	
	ПутьКФайлу = ДополнительныеПараметры.ПутьКФайлу;
	ПутьКФайлуСТемп = ДополнительныеПараметры.ПутьКФайлуСТемп;
	
	СоздатьФичаФайлыФрагмент(ПутьКФайлу, ПутьКФайлуСТемп);

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНаличиеПапкиТемп(Файл, ДополнительныеПараметры) Экспорт
	
	ПутьКФайлу = ДополнительныеПараметры.ПутьКФайлу;
	ПутьКФайлуСТемп = ДополнительныеПараметры.ПутьКФайлуСТемп;
	ДальнейшаяПроцедура = ДополнительныеПараметры.ДальнейшаяПроцедура;
	
	Темп=Файл;
	Темп.НачатьПроверкуСуществования(Новый ОписаниеОповещения(ДальнейшаяПроцедура, ЭтаФорма, ДополнительныеПараметры));

КонецПроцедуры

&НаКлиенте
Процедура СоздатьФичаФайлы(Команда)
	Если НЕ ЗначениеЗаполнено(ЭтаФорма.Объект.СтруктураДляЗагрузки) Тогда
		Сообщить("Не заполнен путь к структуре!");
		Возврат;
	КонецЕсли;	
	ПутьКФайлу = Объект.СтруктураДляЗагрузки;
	ПутьКФайлуСТемп=Объект.СтруктураДляЗагрузки+"\Drafts";
	Если ЕстьПоддержкаАсинхронныхВызовов Тогда
		Темп = Новый Файл();
		Темп.НачатьИнициализацию(Новый ОписаниеОповещения("ПроверитьНаличиеПапкиТемп", ЭтаФорма, Новый Структура("ПутьКФайлу, ПутьКФайлуСТемп, ДальнейшаяПроцедура", ПутьКФайлу, ПутьКФайлуСТемп,"СоздатьКаталогТемп")), ПутьКФайлуСТемп);
	Иначе
		Темп=Новый Файл(ПутьКФайлуСТемп);
		Если НЕ Темп.Существует() Тогда
			СоздатьКаталог(ПутьКФайлуСТемп);
		КонецЕсли;	
		ПутьКФайлуСТемп=ПутьКФайлуСТемп;//+"\";
		СоздатьФичаФайлыФрагмент(ПутьКФайлу, ПутьКФайлуСТемп);
		
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура СоздатьФичаФайлыФрагмент(Знач ПутьКФайлу, ПутьКФайлуСТемп) Экспорт
	
	Перем АдресФайлаВоВременномХранилище, ИмяФайла, НайденныеФайлы, НовоеИмяФайла, ПолныйПуть, Стр, ТекСтрока, Шаблон;
	
	ПутьКФайлуСТемп=ПутьКФайлуСТемп+"\";
	
	Для Стр=0 По ТЗСбораТребований.Количество()-1 Цикл
		ТекСтрока=ТЗСбораТребований.Получить(Стр);
		Если ЗначениеЗаполнено(ТекСтрока.ПолныйПуть) Тогда
			Продолжить;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ТекСтрока.Функционал) Тогда
			Продолжить;
		КонецЕсли;	
		ИмяФайла = СокрЛП(ТекСтрока.Функционал);
		НовоеИмяФайла="";
		НовоеИмяФайла = СформироватьИмяФайла(ИмяФайла);
		НовоеИмяФайла=НовоеИмяФайла+".feature";
		НайденныеФайлы=Новый Структура;
		ПараметрыПутей=Новый Структура;
		ПараметрыПутей.Вставить("ПутьКФайлу",ПутьКФайлу);
		ПараметрыПутей.Вставить("ПутьКФайлуСТемп",ПутьКФайлуСТемп);
		ПараметрыПутей.Вставить("НовоеИмяФайла",НовоеИмяФайла);
		ПараметрыПутей.Вставить("Стр",Стр);
		НайденныеФайлы=ПоискФайлаПоИмени(НовоеИмяФайла,ТекСтрока,ПараметрыПутей);
		
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИзТемпа(Команда) Экспорт
	// Вставить содержимое обработчика.
	Если НЕ ЗначениеЗаполнено(ЭтаФорма.Объект.СтруктураДляЗагрузки) Тогда
		Сообщить("Не заполнен путь к структуре!");
		Возврат;
	КонецЕсли;	
	ЗаполнитьТЗСбораТребованийИзПапкиТемп(Истина,"ТЗСбораТребований",".\Drafts\");
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТЗСбораТребованийИзПапкиТемп(Обновлять=Ложь,ТаблицаЗаполнения,Каталог) Экспорт
	ПутьКФайлу = Объект.СтруктураДляЗагрузки;
	Если Прав(СокрЛП(ПутьКФайлу),1)<>"\" Тогда
		ПутьКФайлу=СокрЛП(ПутьКФайлу)+"\";
	КонецЕсли;	
	ПутьКФайлуСТемп=ПутьКФайлу+Каталог;
	ЭтотОбъект[ТаблицаЗаполнения].Очистить();
	//ТЗСбораТребований.Очистить();
	//Элементы.ТЗСбораТребованийЕстьФичи.Видимость=Ложь;
	Элементы.Функционал.ЦветФона=Новый Цвет(255,255,255);
	
	Если ЕстьПоддержкаАсинхронныхВызовов Тогда
		Темп = Новый Файл();
		Темп.НачатьИнициализацию(Новый ОписаниеОповещения("ПроверитьНаличиеПапкиТемп", ЭтаФорма, Новый Структура("ПутьКФайлу, ПутьКФайлуСТемп, ДальнейшаяПроцедура,Обновлять,ТаблицаЗаполнения", ПутьКФайлу, ПутьКФайлуСТемп,"ЗаполнитьФичамиИзКаталога",Обновлять,ТаблицаЗаполнения)), ПутьКФайлуСТемп);
	Иначе
		Темп=Новый Файл(ПутьКФайлуСТемп);
		Если НЕ Темп.Существует() Тогда
			СоздатьКаталог(ПутьКФайлуСТемп);
			Возврат;
		КонецЕсли;	
		ПутьКФайлуСТемп=ПутьКФайлуСТемп;//+"\";
		НайденныеФайлы=НайтиФайлы(ПутьКФайлуСТемп,"*.feature",Ложь);
		ДополнительныеПараметры=Новый Структура("Обновлять,ТаблицаЗаполнения",Обновлять,ТаблицаЗаполнения);
		ЗаполнитьФичаФайламиИзВременногоКаталога(НайденныеФайлы, ДополнительныеПараметры);
	КонецЕсли;	
	
КонецПроцедуры	

&НаКлиенте
Процедура ЗаполнитьФичамиИзКаталога(Существует, ДополнительныеПараметры) Экспорт
	
	ПутьКФайлуСТемп = ДополнительныеПараметры.ПутьКФайлуСТемп;
	
	Если Существует Тогда 
		НачатьПоискФайлов(Новый ОписаниеОповещения("ЗаполнитьФичаФайламиИзВременногоКаталога",ЭтаФорма,ДополнительныеПараметры),ПутьКФайлуСТемп,"*.feature",Ложь);
		Возврат;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьФичаФайламиИзВременногоКаталога(НайденныеФайлы, ДополнительныеПараметры) Экспорт
	Обновлять=ДополнительныеПараметры.Обновлять;
	ТаблицаЗаполнения=ДополнительныеПараметры.ТаблицаЗаполнения;
	Для Каждого Файл из НайденныеФайлы Цикл
		НашлиСТроки=ЭтотОбъект[ТаблицаЗаполнения].НайтиСтроки(Новый Структура("ПолныйПуть",Файл.ПолноеИмя));
		Если НашлиСтроки.Количество()<>0 и НЕ Обновлять Тогда
			Продолжить;
		ИначеЕсли НашлиСтроки.Количество()<>0 и Обновлять Тогда
			Строка= НашлиСтроки[0];
		Иначе
			Строка=ЭтотОбъект[ТаблицаЗаполнения].Добавить();
		КонецЕсли;
		Строка.Фича=Истина;
		Строка.ПолныйПуть=Файл.ПолноеИмя;
		Строка.Функционал=Файл.ИмяБезРасширения;
		СтруктураФичи=РаспарситьФункционалОднойФичиПострочно(Файл.ПолноеИмя);
		Строка.Функционал=СтруктураФичи["Функционал"];
		Строка.Роль=СтруктураФичи["Роль"];
		Строка.Описание=СтруктураФичи["Описание"];
		Строка.Цель=СтруктураФичи["Цель"];
		Строка.КоличествоСценариев=СтруктураФичи["КоличествоСценариев"];
	КонецЦикла;	
КонецПроцедуры	

&НаСервере
Функция ПолучитьШаблонФичаФайла(ИмяМакета,ИндСтроки,АдресФайлаВоВременномХранилище)
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла(".feature");
	ОбъектОбработки = РеквизитФормыВЗначение("Объект");
	ТЗСбора = РеквизитФормыВЗначение("ТЗСбораТребований");
	Строка=ТЗСбора.Получить(ИндСтроки);
	ТД = Новый ТекстовыйДокумент;
	Шаблон=ОбъектОбработки.ПолучитьМакет(ИмяМакета);
	ОбластьШапка=Шаблон.ПолучитьОбласть("Шапка");
	ОбластьПостоянная=Шаблон.ПолучитьОбласть("Постоянная");
	ОбластьПеременная=Шаблон.ПолучитьОбласть("Переменная");
	ОбластьПостоянная.Параметры.Функционал = СокрЛП(Строка.Функционал);
	ОбластьПостоянная.Параметры.Роль = СокрЛП(Строка.Роль);
	ОбластьПостоянная.Параметры.Описание = СокрЛП(Строка.Описание);
	ОбластьПостоянная.Параметры.Цель = СокрЛП(Строка.Цель);
	ТД.Вывести(ОбластьШапка);
	ТД.Вывести(ОбластьПостоянная);
	КоличествоСценариев=?(Строка.КоличествоСценариев=0,1,Строка.КоличествоСценариев);
	Для кк=1 по КоличествоСценариев Цикл
		ТД.Вывести(ОбластьПеременная);
	КонецЦикла;
	ТД.Записать(ИмяВременногоФайла);
	
	Файл = Новый Файл(ИмяВременногоФайла);
	Если Файл.Существует() Тогда
		ДвоичныеДанные = Новый ДвоичныеДанные(ИмяВременногоФайла);
		АдресФайлаВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
		УдалитьФайлы(ИмяВременногоФайла);
	КонецЕсли;

КонецФункции	

&НаСервере
Процедура ОбходДереваРекурсивно(Дерево,СписокДляВыбора)
	Для Каждого Строка Из Дерево.Строки Цикл
		Если Строка.Компонента<>"step_definitions" и НЕ Строка.Фича Тогда
			ПутьККомпоненте=СтрЗаменить(Строка.ПолныйПуть,Объект.СтруктураДляЗагрузки,"");
			Если Лев(ПутьККомпоненте,1)="\" Тогда
				ПутьККомпоненте="."+ПутьККомпоненте;
			Иначе
				ПутьККомпоненте=".\"+ПутьККомпоненте
			КонецЕсли;	
			//СписокДляВыбора.Добавить(ПутьККомпоненте,Строка.Компонента);
			СписокДляВыбора.Добавить(ПутьККомпоненте,ПутьККомпоненте);
		КонецЕсли;
		Если Строка.Строки.Количество()>0 Тогда
			ОбходДереваРекурсивно(Строка,СписокДляВыбора);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры	

&НаСервере 
Функция ПолучитьСписокДляВыбораИзДерева()
	СписокДляВыбора=Новый СписокЗначений;
	//СписокКомп = РеквизитФормыВЗначение("СписокКомпонент");
	СписокКомп = РеквизитФормыВЗначение("ОбъемПроекта");
	ОбходДереваРекурсивно(СписокКомп,СписокДляВыбора);
	
	Возврат Новый Структура("СписокДляВыбора",СписокДляВыбора);
КонецФункции	

&НаКлиенте
Процедура ПослеВыбораИзМеню(ВыбранныйЭлемент, Параметры) Экспорт
    // Обработка выбранного элемента
	Если ВыбранныйЭлемент<>Неопределено Тогда
		ЭтаФорма.ТекущийЭлемент.ТекущиеДанные.Компонент=ВыбранныйЭлемент.Представление;
		ЭтаФорма.ТекущийЭлемент.ТекущиеДанные.ПутьККомпоненте=ВыбранныйЭлемент.Значение;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ТЗСбораТребованийПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	// Вставить содержимое обработчика.
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.ПолныйПуть="";
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытиеФичаФайлаИзТЗСбораТребований(ПутьКФиче) Экспорт
	Если СокрЛП(ПутьКФиче)<>"" Тогда
		ФормаОбработки = ПолучитьФорму("ВнешняяОбработка.BDDEditor.Форма.ФормаРедактора",,ЭтаФорма);
		СписокОткрытыхОкон=ПолучитьОкна();
		Если ФормаОбработки.Открыта() Тогда
			Если ФормаОбработки.ПутьКФиче<>ПутьКФиче Тогда// И ФормаОбработки.БылиИзменения Тогда
				ФормаОбработки.ЗаписатьИзмененияВФиче();
				ФормаОбработки.ПутьКФиче=ПутьКФиче;
				ФормаОбработки.ЕстьПоддержкаАсинхронныхВызовов=ЭтаФорма.ЕстьПоддержкаАсинхронныхВызовов;
				ФормаОбработки.ЕстьПоддержкаНемодальныхФорм=ЭтаФорма.ЕстьПоддержкаНемодальныхФорм;
				ФормаОбработки.КаталогBDDEditor=Объект.КаталогBDDEditor;
				ФормаОбработки.ПолучитьТекстФичи();
				ФормаОбработки.Активизировать();
				ФормаОбработки.Открыть();
			Иначе	
				ФормаОбработки.ПутьКФиче=ПутьКФиче;
				ФормаОбработки.ЕстьПоддержкаАсинхронныхВызовов=ЭтаФорма.ЕстьПоддержкаАсинхронныхВызовов;
				ФормаОбработки.ЕстьПоддержкаНемодальныхФорм=ЭтаФорма.ЕстьПоддержкаНемодальныхФорм;
				ФормаОбработки.КаталогBDDEditor=Объект.КаталогBDDEditor;
				ФормаОбработки.ПолучитьТекстФичи();
				ФормаОбработки.Открыть();
			КонецЕсли;	
		Иначе	
			ФормаОбработки.ПутьКФиче=ПутьКФиче;
			ФормаОбработки.ЕстьПоддержкаАсинхронныхВызовов=ЭтаФорма.ЕстьПоддержкаАсинхронныхВызовов;
			ФормаОбработки.ЕстьПоддержкаНемодальныхФорм=ЭтаФорма.ЕстьПоддержкаНемодальныхФорм;
			ФормаОбработки.КаталогBDDEditor=Объект.КаталогBDDEditor;
			ФормаОбработки.Открыть();
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТЗСбораТребованийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	Если Поле.Имя="ПолныйПуть" Тогда
		СтандартнаяОбработка=Ложь;
		Если ЗначениеЗаполнено(Элемент.ТекущиеДанные.ПолныйПуть) Тогда
			ОткрытиеФичаФайлаИзТЗСбораТребований(Элемент.ТекущиеДанные.ПолныйПуть);
		КонецЕсли;
	ИначеЕсли Поле.Имя = "Компонент" Тогда
		СтандартнаяОбработка=Ложь;
		СписокВыбораКомпонент=Новый СписокЗначений;
		СписокВыбораКомпонент=ПолучитьСписокДляВыбораИзДерева()["СписокДляВыбора"];
		Если СписокВыбораКомпонент.Количество()>0 Тогда
			РежимМодальности=ПолучитьРежимМодальностиКонфигурации();
			Если НЕ РежимМодальности Тогда		
				Оповещение = Новый ОписаниеОповещения("ПослеВыбораИзМеню",ЭтотОбъект, );
				ПоказатьВыборИзМеню(Оповещение, СписокВыбораКомпонент,);
			Иначе
				ВыборКомпоненты=ВыбратьИзМеню(СписокВыбораКомпонент);
				Если ВыборКомпоненты<>Неопределено Тогда
					Элемент.ТекущиеДанные.Компонент=ВыборКомпоненты.Представление;
					Элемент.ТекущиеДанные.ПутьККомпоненте=ВыборКомпоненты.Значение;
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Функция ЗаполнитьДеревоКомпонент(ПутьКаталога,МассивСпискаКомпонент,Уровень)
	Если ЕстьПоддержкаАсинхронныхВызовов Тогда
		НайденныеФайлы=Новый Структура;
		//Дописать	
	Иначе
    	НайденныеФайлы = НайтиФайлы(ПутьКаталога,"*.*",Истина);
	КонецЕсли;
	Для каждого Файл из НайденныеФайлы цикл
		Если Файл.ЭтоКаталог() И НЕ Файл.ПолучитьНевидимость() тогда
			СтруткураФайла = Новый Структура;
			СтруткураФайла.Вставить("Уровень",Уровень);
			СтруткураФайла.Вставить("Каталог",Истина);
			СтруткураФайла.Вставить("Имя",Файл.Имя);
			СтруткураФайла.Вставить("ПолныйПуть",Файл.ПолноеИмя);
			МассивСпискаКомпонент.Добавить(СтруткураФайла);
			Уровень=Уровень+1;
            ЗаполнитьДеревоКомпонент(ПутьКаталога+"\"+Файл.Имя,МассивСпискаКомпонент,Уровень);
			Уровень=Уровень-1;
        КонецЕсли;
    КонецЦикла;
КонецФункции

&НаКлиенте
Процедура ПолучитьСтруктуруКаталогов(ДеревоЗаполнения,КаталогЗаполнения="",РасширениеПоиска="")
	Если КаталогЗаполнения="" Тогда
		ПутьККаталогам=Объект.СтруктураДляЗагрузки;
	Иначе
		ПутьККаталогам=КаталогЗаполнения;
	КонецЕсли;	
	Если РасширениеПоиска="" Тогда
		РасширениеПоиска="*.feature";
	КонецЕсли;	
	ЭтаФорма[ДеревоЗаполнения].ПолучитьЭлементы().Очистить();
	МассивСпискаКомпонент=Новый Массив;
	
	Если ЕстьПоддержкаАсинхронныхВызовов Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПолучитьСтруктуруКаталоговЗавершение",ЭтотОбъект,Новый Структура("МассивСпискаКомпонент, ПутьККаталогам, ДеревоЗаполнения,РасширениеПоиска", МассивСпискаКомпонент, ПутьККаталогам, ДеревоЗаполнения,РасширениеПоиска));//,"ОбработкаФайловОшибка",ЭтотОбъект);
		НачатьПоискФайлов(ОписаниеОповещения,ПутьККаталогам,"*.*",истина);
	Иначе	
		
		Путь = Новый Файл(ПутьККаталогам);
    	НайденныеФайлы = НайтиФайлы(ПутьККаталогам,"*.*",Истина);
		ДополнительныеПараметры=Новый Структура("МассивСпискаКомпонент, ПутьККаталогам, ДеревоЗаполнения,РасширениеПоиска", МассивСпискаКомпонент, ПутьККаталогам, ДеревоЗаполнения,РасширениеПоиска);
		ПолучитьСтруктуруКаталоговЗавершение(НайденныеФайлы, ДополнительныеПараметры)
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьСтруктуруКаталоговЗавершение(НайденныеФайлы, ДополнительныеПараметры) Экспорт
	
	МассивСпискаКомпонент = ДополнительныеПараметры.МассивСпискаКомпонент;
	ПутьККаталогам = ДополнительныеПараметры.ПутьККаталогам;
	ДеревоЗаполнения = ДополнительныеПараметры.ДеревоЗаполнения;
	РасширениеПоиска = ДополнительныеПараметры.РасширениеПоиска;
	Контекст = Новый Структура;
	Контекст.Вставить("Индекс",-1);
	Контекст.Вставить("Файлы",НайденныеФайлы);
	Контекст.Вставить("ДеревоЗаполнения",ДеревоЗаполнения);
	Контекст.Вставить("РасширениеПоиска",РасширениеПоиска);
	ЦиклОбработкиФайлов(Контекст);

КонецПроцедуры

&НаКлиенте
Процедура ЦиклОбработкиФайлов(Контекст) Экспорт
	Если Контекст.Индекс + 1 >= Контекст.Файлы.Количество() Тогда
//		ВыполнитьОбработкуОповещения(Контекст.оповещение,Истина);
		Возврат;
	КонецЕсли;
	
	Контекст.Индекс = Контекст.Индекс + 1;
	ОповещениеПроверки = Новый ОписаниеОповещения("ПослеПроверкиЭтоКаталог",ЭтотОбъект,Контекст);
	Контекст.Файлы[Контекст.Индекс].НачатьПроверкуЭтоКаталог(ОповещениеПроверки);
	
		
КонецПроцедуры

&НаКлиенте
Процедура ПослеПроверкиЭтоКаталог(ЭтоКаталог,Контекст) экспорт
	
	
	Если ЕстьПоддержкаАсинхронныхВызовов Тогда
		ОповещениеПроверки = Новый ОписаниеОповещения("ПослеПолученияВремениИзменения",ЭтотОбъект,Новый Структура("Контекст,ЭтоКаталог",Контекст,ЭтоКаталог));
		Контекст.Файлы[Контекст.Индекс].НачатьПолучениеВремениИзменения(ОповещениеПроверки);
	Иначе
		ВремяИзменения=Контекст.файлы[Контекст.Индекс].ПолучитьВремяИзменения();
		СтруктураДанных=Новый Структура("Путь,Имя,ПолноеИмя,Расширение",Контекст.файлы[Контекст.Индекс].Путь,Контекст.файлы[Контекст.Индекс].Имя,Контекст.файлы[Контекст.Индекс].ПолноеИмя,Контекст.Файлы[Контекст.Индекс].Расширение);
		ДобавитьВДерево(СтруктураДанных,ЭтоКаталог,Контекст.ДеревоЗаполнения,ВремяИзменения,Контекст.РасширениеПоиска);
		ЦиклОбработкиФайлов(Контекст);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПолученияВремениИзменения(ВремяИзменения,ДополнительныеПараметры) Экспорт
	Контекст=ДополнительныеПараметры.Контекст;
	ЭтоКаталог=ДополнительныеПараметры.ЭтоКаталог;
	СтруктураДанных=Новый Структура("Путь,Имя,ПолноеИмя,Расширение",Контекст.файлы[Контекст.Индекс].Путь,Контекст.файлы[Контекст.Индекс].Имя,Контекст.файлы[Контекст.Индекс].ПолноеИмя,Контекст.Файлы[Контекст.Индекс].Расширение);
	ДобавитьВДерево(СтруктураДанных,ЭтоКаталог,Контекст.ДеревоЗаполнения,ВремяИзменения,Контекст.РасширениеПоиска);
	ЦиклОбработкиФайлов(Контекст);
	
КонецПроцедуры	

&НаСервере
Функция ПолучитьНижнийКаталог(Путь)
	Путь1=?(Прав(Путь,1)="\",Сред(Путь,0,СтрДлина(Путь)-1),Путь);
	РазложенныйПуть=СтрЗаменить(Путь1, "\", Символы.ПС);
	НижнийКаталог=СтрПолучитьСтроку(РазложенныйПуть,СтрЧислоСтрок(РазложенныйПуть));	
	Возврат НижнийКаталог;
КонецФункции	

&НаСервере
Процедура ДобавитьВДерево(СтруктураДанных,ЭтоКаталог,ДеревоЗаполнения,ВремяИзменения,РасширениеПоиска=".feature")
	Путь=СтруктураДанных.Путь;
	Имя=СтруктураДанных.Имя;
	ПолноеИмя=СтруктураДанных.ПолноеИмя;
	Расширение=СтруктураДанных.Расширение;
	РасширениеПоиска=?(РасширениеПоиска="*.*",РасширениеПоиска,СтрЗаменить(РасширениеПоиска,"*",""));
	СписокКомпонент1 = РеквизитФормыВЗначение(СокрЛП(ДеревоЗаполнения));
	Стр = СписокКомпонент1.Строки.Найти(Путь,"ПолныйПуть",истина);
	Если Стр = Неопределено Тогда
		Ветка = СписокКомпонент1.Строки.Добавить();
		НижнийКаталог=ПолучитьНижнийКаталог(Путь);
		Ветка.Компонента = НижнийКаталог;//"features";
		Ветка.ПолныйПуть = Путь;
		Ветка.Имя = НижнийКаталог;//"features";
		Ветка.ТипКартинки=0;
		Если СписокКомпонент1.Колонки.Найти("КоличествоФичаФайлов")<>Неопределено Тогда
			МассивКоличество=НайтиФайлы(Ветка.ПолныйПуть,"*.feature",Истина);
			Ветка.КоличествоФичаФайлов=МассивКоличество.Количество();
		КонецЕсли;
		Если СписокКомпонент1.Колонки.Найти("ПоследнееОбновление")<>Неопределено Тогда
			Ветка.ПоследнееОбновление=ВремяИзменения;
		КонецЕсли;
	Иначе
		Ветка = Стр;
	КонецЕсли;
	Стр = Ветка.строки.Найти(Имя,"Компонента",Истина);
	Если Стр = Неопределено Тогда
		Если ЭтоКаталог или РасширениеПоиска="*.*" или Расширение=РасширениеПоиска Тогда   // или Расширение=".feature"
		
			Ветка1 = ветка.Строки.Добавить();
			Ветка1.Компонента = Имя;
			Ветка1.ПолныйПуть = ПолноеИмя + ?(ЭтоКаталог,"\","");
			Ветка1.Имя = Имя;
			Если ЭтоКаталог Тогда
				Ветка1.ТипКартинки=0;
			Иначе
				Ветка1.Фича=Истина;
				Ветка1.ТипКартинки=1;
			КонецЕсли;
			Если СписокКомпонент1.Колонки.Найти("КоличествоФичаФайлов")<>Неопределено Тогда
				Если ЭтоКаталог Тогда
					МассивКоличество=НайтиФайлы(Ветка1.ПолныйПуть,"*.feature",Истина);
					Ветка1.КоличествоФичаФайлов=МассивКоличество.Количество();
				Иначе
					Ветка1.КоличествоФичаФайлов=1;
				КонецЕсли;
			КонецЕсли;
			Если СписокКомпонент1.Колонки.Найти("ПоследнееОбновление")<>Неопределено Тогда
				Ветка1.ПоследнееОбновление=ВремяИзменения;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	ЗначениеВРеквизитФормы(СписокКомпонент1,СокрЛП(ДеревоЗаполнения));
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоЗначенийПоМассивуСервер(МассивСпискаКомпонент,СтруктураПараметров)
	СписокКомп = РеквизитФормыВЗначение("СписокКомпонент");
	
	СписокКомп.Строки.Очистить();
	ТекУровень = 0;
	ТекДерево = СписокКомп;
	
	Для каждого Элем Из МассивСпискаКомпонент Цикл
		Если Элем.Имя="step_definitions" Тогда
			Продолжить;
		КонецЕсли;	
		Если Элем.Уровень > ТекУровень Тогда
			ТекУровень = Элем.Уровень;
			НовСтр     = ТекДерево.Строки.Добавить();
			ТекДерево = НовСтр;
		ИначеЕсли Элем.Уровень < ТекУровень Тогда
			Разн = ТекУровень - Элем.Уровень;
			Для Ккк = 1 По Разн Цикл
				НовСтр = НовСтр.Родитель;
			КонецЦикла;
			НовСтр     = НовСтр.Родитель.Строки.Добавить();
			ТекУровень = Элем.Уровень;
			ТекДерево = НовСтр;
		Иначе	
			НовСтр     = ТекДерево.Родитель.Строки.Добавить();
		КонецЕсли;  
		
		НовСтр.Компонента = Элем.Имя;
		НовСтр.ПолныйПуть = Элем.ПолныйПуть;
		НовСтр.Имя        = Элем.Имя;
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(СписокКомп,"СписокКомпонент");
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписок(Команда)
	 // Вставить содержимое обработчика.
	//ПолучитьСтруктуруКаталогов("СписокКомпонент");
	ПолучитьСтруктуруКаталогов("ОбъемПроекта");
КонецПроцедуры

#КонецОбласти

#Область Парсинг

&НаКлиенте
Функция СоздатьСтруктуруФичаФайла()
	СтруктураФичи=Новый Структура;
	СтруктураФичи.Вставить("Функционал");
	СтруктураФичи.Вставить("Роль");
	СтруктураФичи.Вставить("Описание");
	СтруктураФичи.Вставить("Цель");
	СтруктураФичи.Вставить("КоличествоСценариев");
	СтруктураФичи.Вставить("Контекст");
	СтруктураФичи.Вставить("Сценарии");
	Возврат СтруктураФичи;
КонецФункции	

&НаКлиенте
Функция РаспарситьФункционалОднойФичиПострочно(ПутьКФиче,СКлючевыми=Ложь,НужныСценарии=Ложь) Экспорт
	
	СтруктураФичи=СоздатьСтруктуруФичаФайла();
	Если НужныСценарии Тогда
		МассивСценариев=Новый Массив;
	КонецЕсли;	
	ИмяФайлаФичи = ПутьКФиче;
	ТекстФичи="";
	Текст = Новый ЧтениеТекста;
	
	Текст.Открыть(ИмяФайлаФичи,"UTF-8");
	Стр=Текст.Прочитать();
	КоличествоСценариев=СтрЧислоВхождений(Стр,"Сценарий:");
	СтруктураФичи.Вставить("КоличествоСценариев",КоличествоСценариев);
	Текст.Закрыть();
	
	
	Текст.Открыть(ИмяФайлаФичи,"UTF-8");
	
	Стр = Текст.ПрочитатьСтроку();
	Пока Стр <> Неопределено Цикл // строки читаются до символа перевода строки
		Стр=СокрЛП(Стр);
		Если СтрНачинаетсяС(Стр,"Контекст") Тогда
			Если СКлючевыми Тогда
				Контекст=СокрЛП(Стр);
			Иначе	
				Контекст=СокрЛП(Сред(Стр,СтрДлина("Контекст:")+1));
			КонецЕсли;	
			СтруктураФичи.Вставить("Контекст",Контекст);
			//Прервать;
		ИначеЕсли СтрНачинаетсяС(Стр,"Функционал") Тогда
			Если СКлючевыми Тогда
				Функционал=СокрЛП(Стр);
			Иначе	
				Функционал=СокрЛП(Сред(Стр,СтрДлина("Функционал:")+1));
			КонецЕсли;	
			СтруктураФичи.Вставить("Функционал",Функционал);
		ИначеЕсли СтрНачинаетсяС(Стр,"Как") Тогда
			Если СКлючевыми Тогда
				Роль=СокрЛП(Стр);
			Иначе	
				Роль=СокрЛП(Сред(Стр,СтрДлина("Как")+1));
			КонецЕсли;
			СтруктураФичи.Вставить("Роль",Роль);
		ИначеЕсли СтрНачинаетсяС(Стр,"Я хочу") Тогда
			Если СКлючевыми Тогда
				Описание=СокрЛП(Стр);
			Иначе	
				Описание=СокрЛП(Сред(Стр,СтрДлина("Я хочу")+1));
			КонецЕсли;			
			//Описание=СокрЛП(Стр);
			СтруктураФичи.Вставить("Описание",Описание);
		ИначеЕсли СтрНачинаетсяС(Стр,"Чтобы") Тогда
			Если СКлючевыми Тогда
				Цель=СокрЛП(Стр);
			Иначе	
				Цель=СокрЛП(Сред(Стр,СтрДлина("Чтобы")+1));
			КонецЕсли;
			//Цель=СокрЛП(Стр);
			СтруктураФичи.Вставить("Цель",Цель);
		ИначеЕсли СтрНачинаетсяС(Стр,"Сценарий") и НужныСценарии Тогда
			НаименованиеСценария=СокрЛП(Сред(Стр,СтрДлина("Сценарий:")+1)); 
			Если НаименованиеСценария<>"" Тогда
				Если СКлючевыми Тогда
					МассивСценариев.Добавить(СокрЛП(Стр));
				Иначе	
					МассивСценариев.Добавить(НаименованиеСценария);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;	
		Стр = Текст.ПрочитатьСтроку();
	КонецЦикла;	
	Текст.Закрыть();
	СтруктураФичи.Вставить("Сценарии",МассивСценариев);
	Возврат СтруктураФичи;
		
	
КонецФункции

&НаКлиенте
Функция УбратьЗапрещенныеСимволы(ИмяФайла) Экспорт
	ИмяФайла = СтрЗаменить(ИмяФайла,".","");
	ИмяФайла = СтрЗаменить(ИмяФайла,",","");
	ИмяФайла = СтрЗаменить(ИмяФайла,":","");
	ИмяФайла = СтрЗаменить(ИмяФайла,";","");
	ИмяФайла = СтрЗаменить(ИмяФайла,"-","_");
	ИмяФайла = СтрЗаменить(ИмяФайла,"+","");
	ИмяФайла = СтрЗаменить(ИмяФайла,"/","");
	ИмяФайла = СтрЗаменить(ИмяФайла,"\","");
	ИмяФайла = СтрЗаменить(ИмяФайла,"=","");
	ИмяФайла = СтрЗаменить(ИмяФайла,"!","");
	ИмяФайла = СтрЗаменить(ИмяФайла,"@","");
	ИмяФайла = СтрЗаменить(ИмяФайла,"#","");
	ИмяФайла = СтрЗаменить(ИмяФайла,"$","");
	ИмяФайла = СтрЗаменить(ИмяФайла,"%","");
	ИмяФайла = СтрЗаменить(ИмяФайла,"^","");
	ИмяФайла = СтрЗаменить(ИмяФайла,"&","");
	ИмяФайла = СтрЗаменить(ИмяФайла,"*","");
	ИмяФайла = СтрЗаменить(ИмяФайла,"(","");
	ИмяФайла = СтрЗаменить(ИмяФайла,")","");
	ИмяФайла = СтрЗаменить(ИмяФайла,"№","");
	ИмяФайла = СтрЗаменить(ИмяФайла,"?","");
	ИмяФайла = СтрЗаменить(ИмяФайла,"`","");
	ИмяФайла = СтрЗаменить(ИмяФайла,"'","");
	ИмяФайла = СтрЗаменить(ИмяФайла,"~","");
	ИмяФайла = СтрЗаменить(ИмяФайла,"<","");
	ИмяФайла = СтрЗаменить(ИмяФайла,">","");
	Возврат ИмяФайла;
КонецФункции

&НаКлиенте
Функция СделатьПервуюБуквуЗаглавной(Стр) Экспорт
	Если СтрДлина(Стр) = 0 Тогда
		Возврат Стр;
	КонецЕсли;
	
	ПерваяБуква = ВРег(Лев(Стр,1));
	
	Возврат ПерваяБуква + Сред(Стр,2);
КонецФункции

&НаКлиенте
Функция СформироватьИмяФайла(ИмяФайла) Экспорт
	ИмяФайла=УбратьЗапрещенныеСимволы(ИмяФайла);
	МассивПодстрок = РазложитьСтрокуВМассивПодстрок(ИмяФайла," ",Истина);
	НовоеИмяФайла="";
	Для Каждого Элем Из МассивПодстрок Цикл
		НовоеИмяФайла = НовоеИмяФайла + СделатьПервуюБуквуЗаглавной(Элем);
	КонецЦикла;
	Возврат НовоеИмяФайла;
КонецФункции	

&НаКлиенте
Функция РаспарситьФункционалОднойФичиПолнотекстовый(НужныСценарии=Ложь) Экспорт
	СтруктураФичи=СоздатьСтруктуруФичаФайла();
	Если НужныСценарии Тогда
		МассивСценариев=Новый Массив;
	КонецЕсли;	
		
КонецФункции

#КонецОбласти

#Область Эпик

&НаСервере
Процедура СохранитьНастройкиВХранилище()
	Если Объект.РежимСамотестирования Тогда
		Возврат;
	КонецЕсли;  
	
	Настройки = Новый Структура;
	Настройки.Вставить("gitrepos", Объект.Репозиторий);
	
	ХранилищеОбщихНастроек.Сохранить("VanessaEpics",, Настройки);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройкиРепозитория(Команда)
	// Вставить содержимое обработчика.
	СохранитьНастройкиВХранилище();

КонецПроцедуры

&НаКлиенте
Процедура CохранитьЦелиИРоли(Команда)
	// Вставить содержимое обработчика.
	
КонецПроцедуры

&НаСервере
Процедура АктивироватьСтраницыНастройки()
	
	Элементы.НастройкиРепозитория.Видимость = Истина;
	Элементы.РаботаСЦелямиИКомпонентами.Видимость = Ложь;
	
КонецПроцедуры

Процедура АктивироватьСтраницыРаботыСРепозиторием()
	
	Элементы.НастройкиРепозитория.Видимость = Ложь;
	Элементы.РаботаСЦелямиИКомпонентами.Видимость = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьРасшифровкуПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	ЭтаФорма.Элементы.ТЗСбораТребованийРасшифровка.Видимость=Объект.ПоказыватьРасшифровку;
КонецПроцедуры

#КонецОбласти

#Область Статистика

&НаКлиенте
Процедура СобратьСтатистикуПоБизнесКомпонентам(Команда)
	// Вставить содержимое обработчика.
	ПутиДляПроверки=Новый СписокЗначений;
	ПутиДляПроверки.Добавить("СтруктураДляЗагрузки","Структура хранения требований");
	ПараметрыЗаполнены=ПроверитьЗаполненностьКаталоговИПутей(ПутиДляПроверки);
	Если НЕ ПараметрыЗаполнены Тогда
		Возврат;
	КонецЕсли;	
	
	ПолучитьСтруктуруКаталогов("ОбъемПроекта");
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСтруктуруРодителейФичи(Стр)
	СтрокаДерева = Стр;
	СтруктураРодителей="";
	Пока Истина Цикл
		СтруктураРодителей=СтрокаДерева.Компонента+"\"+СтруктураРодителей;
		СтрокаДерева = СтрокаДерева.ПолучитьРодителя();
		Если СтрокаДерева = Неопределено или СтрокаДерева.Компонента = "features" Тогда
			Возврат СтруктураРодителей;
		КонецЕсли;	 
	КонецЦикла;
КонецФункции	

&НаКлиенте
Функция ПолучитьТекущуюФичуДляПередачиВVB()
	СтрокаФичи = Элементы[ЭтаФорма.ТекущийЭлемент.Имя].ТекущиеДанные;
	Если СтрокаФичи.Фича <> Истина Тогда
		//СтрокаФичи = НайтиСтрокуФичиЧерезРодителя(СтрокаФичи);
		Если СтрокаФичи.Компонента <> "features" Тогда
			СтруктураРодителей=ПолучитьСтруктуруРодителейФичи(СтрокаФичи);
		Иначе
			СтруктураРодителей="";
		КонецЕсли;
		СтруктураРодителей=?(Прав(СокрЛП(Объект.СтруктураДляЗагрузки),1)="\",Объект.СтруктураДляЗагрузки,Объект.СтруктураДляЗагрузки+"\")+""+СтруктураРодителей;
		Возврат СтруктураРодителей;
	Иначе
		Возврат СтрокаФичи.ПолныйПуть;
	КонецЕсли;	 
КонецФункции	

&НаКлиенте
Процедура ОткрытьФичуВВБ(Команда)      
		
	ФичаДляVB=ПолучитьТекущуюФичуДляПередачиВVB();
	
	СписокПараметров=Новый СписокЗначений;
	СписокПараметров.Добавить("КаталогИнструментов",Объект.КаталогИнструментов);
	СписокПараметров.Добавить("КаталогФич",ФичаДляVB);
	
	
	ПодключитьVB(СписокПараметров);	
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьVB(Команда) Экспорт
	
	СписокПараметров=Новый СписокЗначений;
	
	ПодключитьVB(СписокПараметров);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьVB(СписокПараметров) Экспорт
	
	ИмяОбработки = ПодключитьВнешнююОбработкуКлиент(Объект.ПутьКVanessaBehavior);
	ФормаОбработки = ПолучитьФорму("ВнешняяОбработка." + ИмяОбработки + ".Форма",,,Истина);
	
	Если ЕстьПоддержкаАсинхронныхВызовов Тогда
		ПоказатьЗначение(Новый ОписаниеОповещения("ОткрытьПолученнуюФорму", ЭтотОбъект, Новый Структура("ФормаОбработки,СписокПараметров", ФормаОбработки,СписокПараметров)), ФормаОбработки);		
	Иначе
		ОткрытьПолученнуюФорму(Новый Структура("ФормаОбработки,СписокПараметров", ФормаОбработки,СписокПараметров))
		//ФормаОбработки.ЗагрузитьФичи();
		//ФормаОбработки.Открыть();
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура ОткрытьПолученнуюФорму(ДополнительныеПараметры) Экспорт
	
	ФормаОбработки = ДополнительныеПараметры.ФормаОбработки;
	СписокПараметров=ДополнительныеПараметры.СписокПараметров;
	
	ФормаОбработки.Открыть();
	
	Если СписокПараметров.Количество()>0 Тогда
		Для Каждого Параметр из СписокПараметров Цикл
			ФормаОбработки.Объект[Параметр.Значение]=Параметр.Представление;
		КонецЦикла;
	КонецЕсли;	
	//ФормаОБработки.Объект.ЗапускИзКоманднойСтроки=Истина;
	
	ФормаОбработки.ЗагрузитьФичи();

КонецПроцедуры

#КонецОбласти

#Область СтруктураКомпонент

&НаКлиенте
Процедура ШаблонФункциональныхТребованийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	Режим = РежимДиалогаВыбораФайла.Открытие;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.Заголовок = "Выберите путь к обработке Vanessa Behavior ";
	ДиалогОткрытияФайла.Фильтр = "Файл (*.yml)|*.yml";
	Если ЕстьПоддержкаАсинхронныхВызовов Тогда
		ОписаниеОповещения = Вычислить("Новый ОписаниеОповещения(""ОбработатьВыборФайла"", ЭтаФорма,Новый Структура(""Путь"", ""ШаблонФункциональныхТребований""))");
		Выполнить("ДиалогОткрытияФайла.Показать(ОписаниеОповещения)");
	Иначе	
		Если ДиалогОткрытияФайла.Выбрать() Тогда
			Объект.ШаблонФункциональныхТребований = ДиалогОткрытияФайла.ПолноеИмяФайла;
		КонецЕсли;
	КонецЕсли;  
	
КонецПроцедуры

&НаКлиенте
Функция НайтиФайлИНИБК() Экспорт
	
КонецФункции	

&НаКлиенте
Процедура ЗагрузитьШаблонБК(Команда) Экспорт
	// Вставить содержимое обработчика.
	Если ЕстьПоддержкаАсинхронныхВызовов Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьНаличиеФайлаИНИ",ЭтаФорма,Новый Структура());//,"ОбработкаФайловОшибка",ЭтотОбъект);
		НачатьПоискФайлов(ОписаниеОповещения, Объект.СтруктураДляЗагрузки,"components.ini",Ложь);
	Иначе
		
		НайденныеФайлы = НайтиФайлы(Объект.СтруктураДляЗагрузки,"components.ini",Ложь);
		ПроверитьНаличиеФайлаИНИ(НайденныеФайлы,Новый Структура());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНаличиеФайлаИНИ(НайденныеФайлы,ДополнительныеПараметры) Экспорт
	
	Если НайденныеФайлы.Количество()>0 Тогда
		ФайлКомпоненты=НайденныеФайлы[0];
		ФайлКомпонентИНИСуществует(ФайлКомпоненты);
	Иначе
		ФайлКомпонентИНИНеСуществует();
	КонецЕсли;	
	
КонецПроцедуры 

&НаКлиенте
Процедура ФайлКомпонентИНИСуществует(ФайлКомпоненты) Экспорт
	
	
КонецПроцедуры	

&НаКлиенте
Процедура ФайлКомпонентИНИНеСуществует() Экспорт
	
	ИмяФайла = СтрРазделить(Объект.ШаблонФункциональныхТребований,"\",Символы.ПС);
	ИмяФайла = ИмяФайла[ИмяФайла.Количество()-1]; 
	ИмяКомпоненты=Новый ТекстовыйДокумент;
	ИмяКомпоненты.ДобавитьСтроку("components:"+ИмяФайла);
	
	ФайлСтруктуры=Новый ЧтениеJSON;
	ФайлСтруктуры.ОткрытьФайл(Объект.ШаблонФункциональныхТребований);
	СтруктураJSON=ПрочитатьJSON(ФайлСтруктуры);
	ФайлСтруктуры.Закрыть();
	
	ПутьСоздания=Объект.СтруктураДляЗагрузки;
	ПрочитатьСтруктуруJSON(СтруктураJSON,ПутьСоздания);
	
	ИмяКомпоненты.ДобавитьСтроку("версия"+":"+СтруктураJSON["версия"]);
	ИмяКомпоненты.ДобавитьСтроку("описание"+":"+СтруктураJSON["описание"]);
	
	ПутьКФайлу = Объект.СтруктураДляЗагрузки+"\components.ini";
	ИмяКомпоненты.Записать(ПутьКФайлу);
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьСтруктуруJSON(СтруктураJSON,ПутьСоздания) Экспорт
	Для каждого Стр из СтруктураJSON Цикл
		Если ТипЗнч(Стр.Значение)=Тип("Массив") Тогда
			Если Стр.Ключ<>"features" Тогда
				ПутьСозданияПодКаталога=Объект.СтруктураДляЗагрузки+"\"+Стр.Ключ;
			Иначе
				ПутьСозданияПодКаталога=Объект.СтруктураДляЗагрузки;
			КонецЕсли;
			Если Стр.Ключ<>"features" Тогда
				СоздатьКаталоги(Стр.Ключ,ПутьСоздания);
			КонецЕсли;	
			ПрочитатьМассивJSON(Стр.Ключ,Стр.Значение,ПутьСоздания);
		ИначеЕсли ТипЗнч(Стр.Значение)=Тип("Структура") Тогда
			Если Стр.Ключ="features" или Стр.Ключ="Каталоги" Тогда
				ПутьСоздания1=Объект.СтруктураДляЗагрузки;
			Иначе
				ПутьСоздания1=ПутьСоздания+"\"+Стр.Ключ;
			КонецЕсли;	
			ПрочитатьСтруктуруJSON(Стр.Значение,ПутьСоздания1);
		КонецЕсли;
	КонецЦикла	
	
КонецПроцедуры	

&НаКлиенте
Процедура ПрочитатьМассивJSON(Имя,МассивJSON,ПутьСозданияПодКаталога) Экспорт
	Для кк=0 по МассивJSON.Количество()-1 Цикл
		Стр=МассивJSON.Получить(кк);
		Если ТипЗнч(Стр)=Тип("Структура") Тогда
			Если Имя="features" Тогда ИмяКаталога="" Иначе ИмяКаталога=Имя КонецЕсли;
			ПрочитатьСтруктуруJSON(Стр,ПутьСозданияПодКаталога+"\"+ИмяКаталога);
		КонецЕсли;	
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКаталоги(НаименованиеКаталога,ПутьСозданияКаталога) Экспорт
	НовыйКаталог=Новый Файл(ПутьСозданияКаталога+"\"+НаименованиеКаталога);
	Если НЕ НовыйКаталог.Существует() Тогда
		СоздатьКаталог(НовыйКаталог.ПолноеИмя);
	КонецЕсли;	
	
КонецПроцедуры	

&НаКлиенте
Процедура СтруктураДляЗагрузкиОчистка(Элемент, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	ЭтаФорма.ТЗСбораТребований.Очистить();
	GITStatus=Ложь;

КонецПроцедуры

#КонецОбласти

#Область ОбработкаТребований

&НаКлиенте
Процедура ИзменитьДоступГруппыОбработкиФичи(Доступна=Ложь,ВнешнийВброс=Ложь)
	Если НЕ Доступна Тогда
		ВводИмяФичи="";
		ВводФункционал="";
		ВводРоль="";
		ВводЦель="";
		ВводОписание="";
		ВводКонтекст="";
		ПутьДоВнешнегоФайлаВброса="";
		СписокСценариев.Очистить();
	КонецЕсли;
	ЭтаФорма.Элементы.КаталогКомпоненты.ТолькоПросмотр=Доступна;
	ЭтаФорма.Элементы.ИсточникВбросов.ТолькоПросмотр=?(ВнешнийВброс,Ложь,Доступна);
	ЭтаФорма.Элементы.ОбновитьСписокФичей.Доступность=НЕ Доступна;
	ЭтаФорма.Элементы.ГруппаВводаТребований.ТолькоПросмотр=НЕ Доступна;
	ЭтаФорма.Элементы.ГруппаСпискаИсходныхВбросов.Доступность= НЕ Доступна;
	ЭтаФорма.Элементы.ЗавершитьОбработкуФичи.Доступность=Доступна;
	ЭтаФорма.Элементы.СформироватьИмяФичи.Доступность=Доступна;
	
	ЭтаФорма.Элементы.СоздатьФичуДляОбработки.Доступность=НЕ Доступна;
	ЭтаФорма.Элементы.ТЗОбработкаТребованийОткрытьФичуДляОбработки.Доступность=НЕ Доступна;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеПоискаФайлов(НайденныеФайлы,ДополнительныеПараметры) Экспорт
	
	Если НайденныеФайлы.Количество()>0 Тогда
		ИзменитьДоступГруппыОбработкиФичи(Истина);
		ЭтаФорма.Элементы.ВводИмяФичи.ТолькоПросмотр=Истина;
		Фича=НайденныеФайлы[0];
		ВводИмяФичи=Фича.ИмяБезРасширения;
		СтруктураФичи=РаспарситьФункционалОднойФичиПострочно(Фича.ПолноеИмя,Ложь,Истина);
		ВводФункционал=СтруктураФичи["Функционал"];//СокрЛП(Сред(СтруктураФичи["Функционал"],СтрДлина("Функционал:")+1));
		ВводРоль=СтруктураФичи["Роль"];
		ВводЦель=СтруктураФичи["Цель"];
		ВводОписание=СтруктураФичи["Описание"];
		Если СтруктураФичи["Сценарии"].Количество()>0 Тогда
			СписокСценариев.ЗагрузитьЗначения(СтруктураФичи["Сценарии"]);
		КонецЕсли;	
	Иначе
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = "Файл был удалён или перемещён!
		|Обновлён список feature-файлов.";
		Сообщение.УстановитьДанные(ЭтотОбъект);
		Сообщение.Сообщить();	
		ЗаполнитьТЗСбораТребованийИзПапкиТемп(Ложь,"ТЗОбработкаТребований",КаталогКомпоненты);
//		ИзменитьДоступГруппыОбработкиФичи(Ложь);
	КонецЕсли;			
	
КонецПроцедуры 

&НаКлиенте
Процедура ОткрытьФичуДляОбработки(Команда)
	// Вставить содержимое обработчика.
	
	ЭтаФорма.элементы.ГруппаКнопокВвода.ПодчиненныеЭлементы.ЗавершитьОбработкуФичи.Заголовок="Сохранить изменения";
	ЭтаФорма.элементы.ГруппаКнопокВвода.ПодчиненныеЭлементы.ЗавершитьОбработкуФичи.Картинка=БиблиотекаКартинок.СохранитьФайл;
	ЭтаФорма.Элементы.СоздатьФичуДляОбработки.Доступность=Ложь;
	ЭтаФорма.Элементы.ТЗОбработкаТребованийОткрытьФичуДляОбработки.Доступность=Ложь;
	
	ИндексСтроки=ЭтаФорма.Элементы.ТЗОбработкаТребований.ТекущаяСтрока;
	ТекущаяСтрока=Элементы.ТЗОбработкаТребований.ДанныеСтроки(ИндексСтроки);
	ПутьКФайлу=ТекущаяСтрока.ПолныйПуть;
	ВводНовый=Ложь;
	Если ЕстьПоддержкаАсинхронныхВызовов Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеПоискаФайлов",ЭтаФорма,Новый Структура());//,"ОбработкаФайловОшибка",ЭтотОбъект);
		НачатьПоискФайлов(ОписаниеОповещения,ПутьКФайлу,,Ложь);
	Иначе
		
		НайденныеФайлы = НайтиФайлы(ПутьКФайлу,,Ложь);
		ЗавершениеПоискаФайлов(НайденныеФайлы,Новый Структура());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВводИмяФичиОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ВводИмяФичи = СформироватьИмяФайла(Текст);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьИмяФичи(Команда)
	
	ТекстДляФормированияИмени=ВводФункционал;
	ТекстДляФормированияИмени=СтрЗаменить(ТекстДляФормированияИмени,"""","");
	ВводИмяФичи = СформироватьИмяФайла(ТекстДляФормированияИмени);
	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокВыбора(ЭлементФормы)
	
	СписокВыбора=Новый СписокЗначений;
	СписокВыбора=ПолучитьСписокДляВыбораИзДерева()["СписокДляВыбора"];
	
	Элементы[ЭлементФормы].СписокВыбора.ЗагрузитьЗначения(СписокВыбора.ВыгрузитьЗначения());
	
	
КонецПроцедуры
	
&НаКлиенте
Процедура КаталогКомпонентыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЗаполнитьСписокВыбора("КаталогКомпоненты");
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогКомпонентыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	КаталогКомпоненты=ВыбранноеЗначение;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидимостьГруппыСпискаТребований(ГруппаВидимости)
	
	ЭтаФорма.Элементы.ГруппаСпискаДрафтов.Видимость=ГруппаВидимости=1;
	ЭтаФорма.Элементы.ГруппаВнешнегоВброса.Видимость=ГруппаВидимости=2;		
	ЭтаФорма.Элементы.ГруппаСпискаИсходныхВбросов.Видимость=ГруппаВидимости=3;
	
КонецПроцедуры	

&НаКлиенте
Процедура ЗакрытьОбработкуФичи(Команда)
	
	ИзменитьДоступГруппыОбработкиФичи(Ложь);
	ВидимостьГруппыСпискаТребований(?(Элементы.ГруппаИсточникиВбросов.Заголовок="Внешние источники",3,1));
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокФичей(Команда)
	ЗаполнитьТЗСбораТребованийИзПапкиТемп(Ложь,"ТЗОбработкаТребований",КаталогКомпоненты);	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьФичуДляОбработки(Команда)
	ЭтаФорма.элементы.ГруппаКнопокВвода.ПодчиненныеЭлементы.ЗавершитьОбработкуФичи.Заголовок="Обработать вброс";
	ЭтаФорма.элементы.ГруппаКнопокВвода.ПодчиненныеЭлементы.ЗавершитьОбработкуФичи.Картинка=БиблиотекаКартинок.ЗаписатьИЗакрыть;
	ЭтаФорма.Элементы.ВводИмяФичи.ТолькоПросмотр=Ложь;
	ЭтаФорма.Элементы.СоздатьФичуДляОбработки.Доступность=Ложь;
	ЭтаФорма.Элементы.ТЗОбработкаТребованийОткрытьФичуДляОбработки.Доступность=Ложь;
	
	ИзменитьДоступГруппыОбработкиФичи(Истина);
	ВводНовый=Истина;
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьОбработкуФичи(Команда)
	ПутиДляПроверки=Новый СписокЗначений;
	ПутиДляПроверки.Добавить("СтруктураДляЗагрузки","Структура хранения требований");
	ПараметрыЗаполнены=ПроверитьЗаполненностьКаталоговИПутей(ПутиДляПроверки);
	Если НЕ ПараметрыЗаполнены Тогда
		Возврат;
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(ВводИмяФичи) Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = "Не указано имя feature-файла";
		Сообщение.УстановитьДанные(ЭтотОбъект);
		Сообщение.Сообщить();	
		Возврат;
	Иначе
		НовоеИмяФайла="";
		НовоеИмяФайла = СформироватьИмяФайла(ВводИмяФичи);
		ВводИмяФичи=НовоеИмяФайла;
	КонецЕсли;	
	ЭтаФорма.Элементы.СоздатьФичуДляОбработки.Доступность=Истина;
	ЭтаФорма.Элементы.ТЗОбработкаТребованийОткрытьФичуДляОбработки.Доступность=Истина;
	
	Если ИсточникВбросов="5" Тогда
		КаталогКомпоненты=".\Drafts\";//Элементы.КаталогКомпоненты.СписокВыбора.НайтиПоЗначению(".\Drafts\").Значение
	КонецЕсли;	
	Если Прав(СокрЛП(Объект.СтруктураДляЗагрузки),1)<>"\" Тогда
		ПолныйПуть=""+Объект.СтруктураДляЗагрузки+"\"+КаталогКомпоненты+СокрЛП(ВводИмяФичи)+".feature";
	Иначе
		ПолныйПуть=""+Объект.СтруктураДляЗагрузки+""+КаталогКомпоненты+СокрЛП(ВводИмяФичи)+".feature";
	КонецЕсли;	
	
	
	Если ВводНовый Тогда
		СоздатьИСохранитьФичаФайл(ПолныйПуть);
	Иначе
		СохранитьИзмененияВФичаФайле(ПолныйПуть);
	КонецЕсли;	
	ВводНовый=Ложь;
КонецПроцедуры

&НаКлиенте
Процедура СоздатьИСохранитьФичаФайл(ПолныйПуть)
	
	АдресФайлаВоВременномХранилище = "";
	
	Шаблон=ЗаполнитьФичаФайлПоШаблону("ШаблонФичи",АдресФайлаВоВременномХранилище);
	
	Если Не ПустаяСтрока(АдресФайлаВоВременномХранилище) Тогда
		ПолучитьФайл(АдресФайлаВоВременномХранилище, ПолныйПуть,Ложь);
	КонецЕсли;
	ЗаполнитьТЗСбораТребованийИзПапкиТемп(Ложь,"ТЗОбработкаТребований",КаталогКомпоненты);
	ИзменитьДоступГруппыОбработкиФичи(Ложь);
	ВидимостьГруппыСпискаТребований(?(ИсточникВбросов="5",3,1));
	
КонецПроцедуры
	
&НаКлиенте
Процедура СохранитьИзмененияВФичаФайле(ПолныйПуть)
	
		
	
			
КонецПроцедуры

&НаСервере
Функция УбратьЛишниеПробелыВТекстовомДокументе(ТД) Экспорт
	ТДНовый=Новый ТекстовыйДокумент;  
	Для КК=1 ПО ТД.КоличествоСтрок()Цикл
		Если Лев(ТД.ПолучитьСтроку(КК),1)=Символы.Таб Тогда
			ДобавитьТаб=Символы.Таб;
		Иначе
			ДобавитьТаб="";
		КонецЕсли;	
		ТДНовый.ДобавитьСтроку(""+ДобавитьТаб+""+СокрЛП(ТД.ПолучитьСтроку(КК)));
	КонецЦикла;	
	Возврат ТДНовый;
КонецФункции

&НаСервере
Функция ЗаполнитьФичаФайлПоШаблону(ИмяМакета,АдресФайлаВоВременномХранилище)
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла(".feature");
	ОбъектОбработки = РеквизитФормыВЗначение("Объект");
	ТД = Новый ТекстовыйДокумент;
	
	Шаблон=ОбъектОбработки.ПолучитьМакет(ИмяМакета);
	ОбластьШапка=Шаблон.ПолучитьОбласть("Шапка");
	ОбластьТэгов=Шаблон.ПолучитьОбласть("Тэги");
	ОбластьПостоянная=Шаблон.ПолучитьОбласть("Постоянная");
	ОбластьПеременная=Шаблон.ПолучитьОбласть("Переменная");
	ОбластьПостоянная.Параметры.Функционал = СокрЛП(ЭтаФорма.ВводФункционал);
	ОбластьПостоянная.Параметры.Роль = СокрЛП(ЭтаФорма.ВводРоль);
	ОбластьПостоянная.Параметры.Описание = СокрЛП(ЭтаФорма.ВводОписание);
	ОбластьПостоянная.Параметры.Цель = СокрЛП(ЭтаФорма.ВводЦель);
	
	ОбластьПостоянная.Параметры.Контекст = СокрЛП(ЭтаФорма.ВводКонтекст);
	ТД.Вывести(ОбластьШапка);
	
	Тэги="";
	Если ЭтаФорма.ТэгиФичи.Количество()>0 Тогда
		Для Каждого Тэг из ЭтаФорма.ТэгиФичи Цикл
			Если Тэг.Пометка Тогда
				Тэги=Тэги+?(Тэги="","",Символы.ПС)+?(Лев(Тэг.Значение,1)="@",Тэг.Значение,"@"+Тэг.Значение);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Если СокрЛП(ЭтаФорма.ПутьДоВнешнегоФайлаВброса)<>"" Тогда
		Тэги=Тэги+?(Тэги="","",Символы.ПС)+"#CustomerDraft `"+СокрЛП(ЭтаФорма.ПутьДоВнешнегоФайлаВброса)+"`";
		ЭтаФорма.ПутьДоВнешнегоФайлаВброса="";
	КонецЕсли;	
	Если Тэги<>"" Тогда
		ОбластьТэгов.Параметры.Тэг = Тэги;
		ТД.Вывести(ОбластьТэгов);
	КонецЕсли;	
	
	
	ТД.Вывести(ОбластьПостоянная);
	КоличествоСценариев=ЭтаФорма.СписокСценариев.Количество();
	Если КоличествоСценариев=0 Тогда
		ТД.Вывести(ОбластьПеременная);
	Иначе
		Для Каждого Строка из ЭтаФорма.СписокСценариев Цикл
			ОбластьПеременная.Параметры.Сценарий = СокрЛП(Строка.Значение);
			ТД.Вывести(ОбластьПеременная);
		КонецЦикла;
	КонецЕсли;
	ТД=УбратьЛишниеПробелыВТекстовомДокументе(ТД);
	
	ТД.Записать(ИмяВременногоФайла);
	
	Файл = Новый Файл(ИмяВременногоФайла);
	Если Файл.Существует() Тогда
		ДвоичныеДанные = Новый ДвоичныеДанные(ИмяВременногоФайла);
		АдресФайлаВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
		УдалитьФайлы(ИмяВременногоФайла);
	КонецЕсли;

КонецФункции	

#КонецОбласти


#Область ОбработкаВбросов

&НаКлиенте
Процедура ЗаполнитьСписокИсходныхВбросов()
	ПутиДляПроверки=Новый СписокЗначений;
	ПутиДляПроверки.Добавить("КаталогВбросов","Каталог вбросов");
	ПараметрыЗаполнены=ПроверитьЗаполненностьКаталоговИПутей(ПутиДляПроверки);
	Если НЕ ПараметрыЗаполнены Тогда
		Возврат;
	КонецЕсли;	
	ПолучитьСтруктуруКаталогов("ИсходныеВбросы",Объект.КаталогВбросов,"*.*");
		
КонецПроцедуры

&НаКлиенте
Процедура ИсточникВбросовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ЭтаФорма.Элементы.ГруппаВыбораКаталогаФичей.Видимость=ВыбранноеЗначение="0";
	
	Если ВыбранноеЗначение<>"0" и ВыбранноеЗначение<>"5" Тогда
		ВидимостьГруппыСпискаТребований(2);
	ИначеЕсли ВыбранноеЗначение="5" Тогда
		ИсходныеВбросы.ПолучитьЭлементы().Очистить();
		ВидимостьГруппыСпискаТребований(3);
		ЗаполнитьСписокИсходныхВбросов();
		//ОткрытьВыборФайлаВброса();	
	Иначе
		ЗаполнитьТЗСбораТребованийИзПапкиТемп(Ложь,"ТЗОбработкаТребований",КаталогКомпоненты);
		ВидимостьГруппыСпискаТребований(1);
	КонецЕсли;	
	
	//Если ВыбранноеЗначение="1" Тогда
	//	Элементы.СтраницаWeb.Документ.url = "http://google.ru";
	//КонецЕсли;	
	
КонецПроцедуры   

&НаКлиенте
Процедура СкопироватьФайлВКаталог(РеквизитДерево, Приемник, Источник) Экспорт
	Если ТипЗнч(Приемник)=Тип("Строка") или Приемник.ПолныйПуть="" Тогда
		ПутьСоздания=Объект.КаталогВбросов;
	Иначе
		ПутьСоздания=Приемник.ПолныйПуть;
	КонецЕсли;
	
	КаталогНовогоФайла=?(Прав(СокрЛП(ПутьСоздания),1)="\",ПутьСоздания,ПутьСоздания+"\");
	ПутьСоздания=""+КаталогНовогоФайла+""+ПолучитьНижнийКаталог(Источник);
	
	Если ЕстьПоддержкаАсинхронныхВызовов Тогда
		НачатьКопированиеФайла(Новый ОписаниеОповещения("КопированиеФайлаЗавершение", ЭтаФорма, Новый Структура("Источник, НоваяСтрока, РеквизитДерево,ДальнейшаяПроцедура", Источник, Приемник, РеквизитДерево,"ЗаполнитьСписокИсходныхВбросов()")), Источник,ПутьСоздания);
	Иначе	
		КопироватьФайл(Источник,ПутьСоздания);
		ЗаполнитьСписокИсходныхВбросов();
	КонецЕсли;	
	
КонецПроцедуры	

&НаКлиенте
Процедура КопированиеФайлаЗавершение(ПеремещенныйФайл, ДополнительныеПараметры) Экспорт
	Если ДополнительныеПараметры.Свойство("ДальнейшаяПроцедура")<>Ложь Тогда
		Выполнить(ДополнительныеПараметры.ДальнейшаяПроцедура);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиФайлВбросаВКаталогВбросов(Приемник,Источник)
	
	РеквизитДерево = ЭтаФорма.ИсходныеВбросы; 
	Если СокрЛП(Приемник.ПолныйПуть)="" или Приемник.Фича Тогда
		Фича=Истина;
		Приемник1=Приемник;
		Пока Фича Цикл
			Если Приемник1.ПолучитьРодителя()=Неопределено Тогда
				Прервать;
			КонецЕслИ;	
			Приемник1=Приемник1.ПолучитьРодителя();
			Фича=Приемник1.Фича;
		КонецЦикла;	
	Иначе
		Приемник1=Приемник;
	КонецЕсли;	
	СкопироватьФайлВКаталог(РеквизитДерево, Приемник1, Источник); 
	
КонецПроцедуры	

&НаКлиенте
Процедура ОткрытьВыборФайлаВброса(НоваяСтрока=Неопределено) Экспорт
	
	Режим = РежимДиалогаВыбораФайла.Открытие;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.Заголовок = "Выберите файл вброса";
	Если ЕстьПоддержкаАсинхронныхВызовов Тогда
		ОписаниеОповещения = Вычислить("Новый ОписаниеОповещения(""ОбработатьВыборФайлаВброса"", ЭтаФорма,Новый Структура(""Путь,Строка"", ""ПутьДоВнешнегоФайлаВброса"",НоваяСтрока))");
		Выполнить("ДиалогОткрытияФайла.Показать(ОписаниеОповещения)");
	Иначе	
		Если ДиалогОткрытияФайла.Выбрать() Тогда
			ВыбранныеФайлы=Новый Массив();
			ВыбранныеФайлы.Добавить(ДиалогОткрытияФайла.ПолноеИмяФайла);
			Если НоваяСтрока<>Неопределено Тогда
				//ПеренестиФайлВбросаВКаталогВбросов(НоваяСтрока,ДиалогОткрытияФайла.ПолноеИмяФайла);
				ОбработатьВыборФайлаВброса(ВыбранныеФайлы,Новый Структура("Путь,Строка","ПутьДоВнешнегоФайлаВброса",НоваяСтрока));
				ЭтотОбъект.ПутьДоВнешнегоФайлаВброса = ДиалогОткрытияФайла.ПолноеИмяФайла;
			КонецЕсли;	
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;  

КонецПроцедуры	

&НаКлиенте
Процедура ОбработатьВыборФайлаВброса(ВыбранныеФайлы,ДополнительныеПараметры) Экспорт
	ПутьСохранения=ДополнительныеПараметры.Путь;
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	ЭтотОбъект[ПутьСохранения]=ВыбранныеФайлы[0];
	Если ДополнительныеПараметры.Свойство("Строка") Тогда
		НоваяСтрока=ДополнительныеПараметры.Строка;
		ПеренестиФайлВбросаВКаталогВбросов(НоваяСтрока,ВыбранныеФайлы[0]);
	КонецЕсли;
	
	Если ЕстьПоддержкаАсинхронныхВызовов Тогда
		ОписаниеОповещения = Вычислить("Новый ОписаниеОповещения(""ОбработатьЗапускПриложения"", ЭтаФорма)");
		Выполнить("НачатьЗапускПриложения(ОписаниеОповещения,ЭтотОбъект[ПутьСохранения])");
	Иначе	
		ЗапуститьПриложение(ЭтотОбъект[ПутьСохранения]);
	КонецЕсли;  
	
	ЭтаФорма.элементы.ГруппаКнопокВвода.ПодчиненныеЭлементы.ЗавершитьОбработкуФичи.Заголовок="Обработать вброс";
	ЭтаФорма.элементы.ГруппаКнопокВвода.ПодчиненныеЭлементы.ЗавершитьОбработкуФичи.Картинка=БиблиотекаКартинок.ЗаписатьИЗакрыть;
	
	ИзменитьДоступГруппыОбработкиФичи(Истина,Истина);
	ВводНовый=Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВнешнийФайлВброса(Путь)
	
	ВыбранныеФайлы=Новый Массив();
	ВыбранныеФайлы.Добавить(Путь);
	ОбработатьВыборФайлаВброса(ВыбранныеФайлы,Новый Структура("Путь","ПутьДоВнешнегоФайлаВброса"))
	
КонецПроцедуры	

&НаКлиенте
Процедура ИсходныеВбросыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	ИзменитьДоступГруппыОбработкиФичи(Истина);
	Если ЗначениеЗаполнено(Элемент.ТекущиеДанные.ПолныйПуть) Тогда
		ОткрытьВнешнийФайлВброса(Элемент.ТекущиеДанные.ПолныйПуть);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИсходныеВбросыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ОткрытьВыборФайлаВброса(Элемент.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоложитьВнешнийФайлВКаталог(Файл,Дерево)
	
КонецПроцедуры	

&НаКлиенте
Процедура ИсходныеВбросыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка=Ложь;
	РеквизитДерево = ЭтаФорма.ИсходныеВбросы;
	Если ТипЗнч(ПараметрыПеретаскивания.Значение)=Тип("Файл") Тогда
	Иначе	
		
		ИДНовыйРодитель = Строка;
		НовыйРодитель = ?(ИДНовыйРодитель = Неопределено, Неопределено, РеквизитДерево.НайтиПоИдентификатору(ИДНовыйРодитель)); 	
		МассивИДПереносимыхЭлементов = ПараметрыПеретаскивания.Значение;
		
		Для каждого ИДПереносимыйЭлемент из МассивИДПереносимыхЭлементов Цикл
			
			ПереносимыйЭлемент = РеквизитДерево.НайтиПоИдентификатору(ИДПереносимыйЭлемент);
			
			Если НЕ ПроверитьВозможностьПереноса(ПереносимыйЭлемент,НовыйРодитель) Тогда
				ПараметрыПеретаскивания.Действие=ДействиеПеретаскивания.Отмена;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИсходныеВбросыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка=Ложь; 
	РеквизитДерево = ЭтаФорма.ИсходныеВбросы; 
	Если ТипЗнч(ПараметрыПеретаскивания.Значение)=Тип("Файл") Тогда
		Если Элемент.ТекущиеДанные=Неопределено Тогда
			ТекКаталог = ЭтаФорма.ИсходныеВбросы.ПолучитьЭлементы().Добавить();
			//ТекКаталог=Объект.КаталогВбросов;
		ИначеЕсли Элемент.ТекущиеДанные.Фича Тогда
			ТекКаталог=Элемент.ТекущиеДанные.ПолучитьРодителя();
		Иначе
			ТекКаталог=Элемент.ТекущиеДанные;
		КонецЕсли;	
		ПеренестиФайлВбросаВКаталогВбросов(ТекКаталог,ПараметрыПеретаскивания.Значение.ПолноеИмя);
	Иначе	
		
		ИДПриемник = Строка; 
		Приемник = ?(ИДПриемник = Неопределено, Неопределено,РеквизитДерево.НайтиПоИдентификатору(ИДПриемник)); 
		МассивИДИсточник = ПараметрыПеретаскивания.Значение; 
		Для Каждого ИДИсточник Из МассивИДИсточник Цикл 
			Источник = РеквизитДерево.НайтиПоИдентификатору(ИДИсточник); 
			Если НЕ Источник.Фича Тогда
				Сообщение = Новый СообщениеПользователю();
				Сообщение.Текст = "Перемещение каталогов запрещено!";
				Сообщение.УстановитьДанные(ЭтотОбъект);
				Сообщение.Сообщить();
				Прервать;
			КонецЕсли;	
			НоваяСтрока = СкопироватьСтрокуДерева(РеквизитДерево, Приемник, Источник); 
			Если Приемник = Неопределено и НоваяСтрока<>Неопределено Тогда 
				Элементы.ИсходныеВбросы.Развернуть(НоваяСтрока.ПолучитьИдентификатор(),Истина); 
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли;
	Если НЕ Приемник = Неопределено Тогда 
		Элементы.ИсходныеВбросы.Развернуть(ИДПриемник, Истина); 
	КонецЕсли; 
	
КонецПроцедуры


&НаКлиенте
Процедура ОбновитьИсходныеВбросы(Команда)
	ЗаполнитьСписокИсходныхВбросов();
КонецПроцедуры

&НаКлиенте
Процедура ИсточникСтруктураКаталогов(Команда)
	
	ЭтаФорма.Элементы.ГруппаВыбораКаталогаФичей.Видимость=Истина;
	ЗаполнитьТЗСбораТребованийИзПапкиТемп(Ложь,"ТЗОбработкаТребований",КаталогКомпоненты);
	ВидимостьГруппыСпискаТребований(1);
	Элементы.ГруппаИсточникиВбросов.Заголовок="Структура каталогов";
	Элементы.ГруппаИсточникиВбросов.Картинка=Элементы.ИсточникСтруктураКаталогов.Картинка;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсточникВнешниеИсточники(Команда)
	
	ЭтаФорма.Элементы.ГруппаВыбораКаталогаФичей.Видимость=Ложь;
	ИсходныеВбросы.ПолучитьЭлементы().Очистить();
	ВидимостьГруппыСпискаТребований(3);
	ЗаполнитьСписокИсходныхВбросов();
	Элементы.ГруппаИсточникиВбросов.Заголовок="Внешние источники";
	Элементы.ГруппаИсточникиВбросов.Картинка=Элементы.ИсточникВнешниеИсточники.Картинка;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсточникGitHub(Команда)
	
	ЭтаФорма.Элементы.ГруппаВыбораКаталогаФичей.Видимость=Ложь;
	ВидимостьГруппыСпискаТребований(2);
	Элементы.ГруппаИсточникиВбросов.Заголовок="GitHub";
	Элементы.ГруппаИсточникиВбросов.Картинка=Элементы.ИсточникGitHub.Картинка;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсточникRedMine(Команда)
	
	ЭтаФорма.Элементы.ГруппаВыбораКаталогаФичей.Видимость=Ложь;
	ВидимостьГруппыСпискаТребований(2);
	Элементы.ГруппаИсточникиВбросов.Заголовок="RedMine";
	Элементы.ГруппаИсточникиВбросов.Картинка=Элементы.ИсточникRedMine.Картинка;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсточникJIRA(Команда)
	
	ЭтаФорма.Элементы.ГруппаВыбораКаталогаФичей.Видимость=Ложь;
	ВидимостьГруппыСпискаТребований(2);
	Элементы.ГруппаИсточникиВбросов.Заголовок="JIRA";
	Элементы.ГруппаИсточникиВбросов.Картинка=Элементы.ИсточникJIRA.Картинка;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсточникVanessaCloudGogs(Команда)
	
	ЭтаФорма.Элементы.ГруппаВыбораКаталогаФичей.Видимость=Ложь;
	ВидимостьГруппыСпискаТребований(2);
	Элементы.ГруппаИсточникиВбросов.Заголовок="Vanessa Cloud Gogs";
	Элементы.ГруппаИсточникиВбросов.Картинка=Элементы.ИсточникVanessaCloudGogs.Картинка;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсходныеВбросыПередУдалением(Элемент, Отказ)
	
	Отказ=Истина;
	
КонецПроцедуры

#КонецОбласти

#Область HistoryGIT

&НаКлиенте
Процедура ЗагрузитьИсториюGIT(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура СоздатьВременныйКаталогGIT(Существует, ДополнительныеПараметры) Экспорт
	
	ПутьКФайлу = ДополнительныеПараметры.ПутьКФайлу;
	ПутьКФайлуСТемп = ДополнительныеПараметры.ПутьКФайлуСТемп;
	КомандаGIT = ДополнительныеПараметры.КомандаGIT;

	Если НЕ Существует Тогда
		НачатьСозданиеКаталога(Новый ОписаниеОповещения("ВыполнитьКомандуGIT", ЭтаФорма, ДополнительныеПараметры), ПутьКФайлуСТемп);
		Возврат;
	Иначе		
		ВыполнитьКомандуGIT(КомандаGIT,ДополнительныеПараметры);		
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура СуществуетКаталогFeatures_not_in_gitСозданныйВоВременнойПапке(КомандаGIT,ИмяКоманды) Экспорт
	
	Если ЕстьПоддержкаАсинхронныхВызовов Тогда
		ИмяФайла = Неопределено;
		НачатьПолучениеКаталогаВременныхФайлов(Новый ОписаниеОповещения("ЗавершениеПолучениеКаталогаВременныхФайлов", ЭтаФорма,Новый Структура("ИмяКоманды,КомандаGIT",ИмяКоманды,КомандаGIT)));
	Иначе
		ИмяФайла = КаталогВременныхФайлов();
		ЗавершениеПолучениеКаталогаВременныхФайлов(ИмяФайла, Новый Структура("ИмяКоманды,КомандаGIT",ИмяКоманды,КомандаGIT));
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеПолучениеКаталогаВременныхФайлов(ИмяКаталогаВременныхФайлов, ДополнительныеПараметры) Экспорт
	
	ПутьККаталогу=ИмяКаталогаВременныхФайлов+"features-not-in-git";
	КомандаGIT=ДополнительныеПараметры.КомандаGIT;
	КомандаGIT=СтрЗаменить(КомандаGIT,"ВременныйКаталог",""""+ПутьККаталогу+"\History.txt"+"""");
	ИмяКоманды=ДополнительныеПараметры.ИмяКоманды;
	ДополнительныеПараметры.Вставить("КомандаGIT",КомандаGIT);
	ДополнительныеПараметры.Вставить("ПутьККаталогу",ПутьККаталогу);
	Если ЕстьПоддержкаАсинхронныхВызовов Тогда
		Темп = Новый Файл();
		Темп.НачатьИнициализацию(Новый ОписаниеОповещения("ПроверитьНаличиеПапкиТемп", ЭтаФорма, Новый Структура("ПутьКФайлу, ПутьКФайлуСТемп, ДальнейшаяПроцедура,КомандаGIT,ДопПараметры", ПутьККаталогу, ПутьККаталогу,"СоздатьВременныйКаталогGIT",КомандаGIT,ДополнительныеПараметры)), ПутьККаталогу);
	Иначе
		Темп=Новый Файл(ПутьККаталогу);
		Если НЕ Темп.Существует() Тогда
			СоздатьКаталог(ПутьККаталогу);
		КонецЕсли;
		//ДопПараметры=Новый Структура;
		//ДопПараметры.Вставить("ДопПараметры",ДополнительныеПараметры);
		ВыполнитьКомандуGIT(КомандаGIT,Новый Структура("ДопПараметры",ДополнительныеПараметры));
	КонецЕсли;	
	
КонецПроцедуры	


&НаКлиенте
Процедура ЯВызываюКоманду(КомандаGIT,ИмяКоманды) Экспорт
	Если ИмяКоманды<>"GITAnnotate" Тогда
		ТабличныеДанныеГИТ.Очистить();	
	КонецЕсли;
	ТекстовыеДанныеГИТ="";
	ИсторияГИТПоФиче="";
	
	ТекущаяСтрока=ЭтаФорма.Элементы.ОбъемПроекта.ТекущиеДанные;
	Если НЕ ТекущаяСтрока.Фича Тогда
		Возврат;
	КонецЕсли;	
	ПутьКФиче=ТекущаяСтрока.ПолныйПуть;
	ИсторияГИТПоФиче=ПутьКФиче;
	
	КомандаGIT=СтрЗаменить(КомандаGIT,"ПутьКФиче",""""+ПутьКФиче+"""");
	СуществуетКаталогFeatures_not_in_gitСозданныйВоВременнойПапке(КомандаGIT,ИмяКоманды);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьКомандуGIT(КомандаGIT,ДополнительныеПараметры) Экспорт
	ДопПараметры=ДополнительныеПараметры.ДопПараметры;
	ВременныйКаталог=ДопПараметры.ПутьККаталогу;
	ИмяКоманды=ДопПараметры.ИмяКоманды;
	
	КомандаСистемы(ДопПараметры.КомандаGIT,Объект.СтруктураДляЗагрузки);
	
	ПутьКФайлу=ВременныйКаталог+"\History.txt";
	ТекстФайла = Новый ЧтениеТекста(ПутьКФайлу,КодировкаТекста.UTF8);
	Текст=ТекстФайла.Прочитать();
	ТекстовыеДанныеГИТ = Текст;
 	ТекстФайла.Закрыть();
	РаспарситьТекстGITВТаблицу(ИмяКоманды);
	
	Если ЕстьПоддержкаАсинхронныхВызовов Тогда
		НачатьУдалениеФайлов(Новый ОписаниеОповещения("УдалениеФайловЗавершение", ЭтаФорма), ВременныйКаталог);
	Иначе
		УдалитьФайлы(ВременныйКаталог);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура УдалениеФайловЗавершение(ДополнительныеПараметры1) Экспорт

КонецПроцедуры	
	
&НаКлиенте
Процедура GITBlame(Команда)
	ПутиДляПроверки=Новый СписокЗначений;
	ПутиДляПроверки.Добавить("СтруктураДляЗагрузки", "Структура хранения требований");
	ПараметрыЗаполнены=ПроверитьЗаполненностьКаталоговИПутей(ПутиДляПроверки);
	Если НЕ ПараметрыЗаполнены Тогда
		Возврат;
	КонецЕсли;	
	
	КомандаGIT="git blame ПутьКФиче > ВременныйКаталог";
	ЯВызываюКоманду(КомандаGIT,"GITBlame");
	
КонецПроцедуры

&НаКлиенте
Процедура GITLog(Команда)
	ПутиДляПроверки=Новый СписокЗначений;
	ПутиДляПроверки.Добавить("СтруктураДляЗагрузки", "Структура хранения требований");
	ПараметрыЗаполнены=ПроверитьЗаполненностьКаталоговИПутей(ПутиДляПроверки);
	Если НЕ ПараметрыЗаполнены Тогда
		Возврат;
	КонецЕсли;	
	
	КомандаGIT="git log --pretty=format:""|%H|%h|%an|%ad|%s"" ПутьКФиче > ВременныйКаталог";
	ЯВызываюКоманду(КомандаGIT,"GITLog");
	
КонецПроцедуры

&НаКлиенте
Процедура GITLogStat(Команда)
	ПутиДляПроверки=Новый СписокЗначений;
	ПутиДляПроверки.Добавить("СтруктураДляЗагрузки","Структура хранения требований");
	ПараметрыЗаполнены=ПроверитьЗаполненностьКаталоговИПутей(ПутиДляПроверки);
	Если НЕ ПараметрыЗаполнены Тогда
		Возврат;
	КонецЕсли;	
	
	КомандаGIT="git log --shortstat --pretty=format:""|%H|%h|%an|%ad|%s"" ПутьКФиче > ВременныйКаталог";
	ЯВызываюКоманду(КомандаGIT,"GITLogStat");
	
КонецПроцедуры

&НаКлиенте
Процедура GITCheckout(Команда)
	ПутиДляПроверки=Новый СписокЗначений;
	ПутиДляПроверки.Добавить("СтруктураДляЗагрузки", "Структура хранения требований");
	ПараметрыЗаполнены=ПроверитьЗаполненностьКаталоговИПутей(ПутиДляПроверки);
	Если НЕ ПараметрыЗаполнены Тогда
		Возврат;
	КонецЕсли;	
	
	
КонецПроцедуры

&НаКлиенте
Процедура GITAnnotate(Команда)
	ТекущаяСтрока=ЭтаФорма.Элементы.ТабличныеДанныеГИТ.ТекущиеДанные;
	Если ТекущаяСтрока=Неопределено Тогда
		Возврат;
	КонецЕсли;	

	ПутиДляПроверки=Новый СписокЗначений;
	ПутиДляПроверки.Добавить("СтруктураДляЗагрузки", "Структура хранения требований");
	ПараметрыЗаполнены=ПроверитьЗаполненностьКаталоговИПутей(ПутиДляПроверки);
	Если НЕ ПараметрыЗаполнены Тогда
		Возврат;
	КонецЕсли;	
	
	КомандаGIT="git annotate ПутьКФиче > ВременныйКаталог "+ТекущаяСтрока.ПолныйХеш;
	
	ЯВызываюКоманду(КомандаGIT,"GITAnnotate");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеЗапускаПриложения(КодВозврата, ДополнительныеПараметры) Экспорт
	Если КодВозврата>0 Тогда
		ЭтаФорма.Элементы.ГруппаВызововКомандГИТ.ТолькоПросмотр=Истина;
		ЭтаФорма.Элементы.GITBlame.Доступность=Ложь;
		ЭтаФорма.Элементы.GITCheckout.Доступность=Ложь;
		ЭтаФорма.Элементы.GITLog.Доступность=Ложь;
		ЭтаФорма.Элементы.GITLogStat.Доступность=Ложь;
		ЭтаФорма.Элементы.GITAnnotate.Доступность=Ложь;
		GITStatus=Ложь;
	Иначе
		ЭтаФорма.Элементы.ГруппаВызововКомандГИТ.ТолькоПросмотр=Ложь;
		ЭтаФорма.Элементы.GITBlame.Доступность=Истина;
		ЭтаФорма.Элементы.GITCheckout.Доступность=Истина;
		ЭтаФорма.Элементы.GITLog.Доступность=Истина;
		ЭтаФорма.Элементы.GITLogStat.Доступность=Истина;
		ЭтаФорма.Элементы.GITAnnotate.Доступность=Истина;
		GITStatus=Истина;
	КонецЕсли;	

КонецПроцедуры	

&НаКлиенте
Процедура ПроверитьМестоХраненияТребований()
	ТекущаяСтрока=ЭтаФорма.Элементы.ОбъемПроекта.ТекущиеДанные;
	КомандаGIT="git branch";
	
	Если ЕстьПоддержкаАсинхронныхВызовов Тогда
		Оповещение = Новый ОписаниеОповещения("ЗавершениеЗапускаПриложения", ЭтотОбъект);
		НачатьЗапускПриложения(Оповещение,"cmd /A /C "+КомандаGIT,Объект.СтруктураДляЗагрузки,Истина)
	Иначе	
		КодВозврата=0;
		ЗапуститьПриложение("cmd /A /C "+КомандаGIT,Объект.СтруктураДляЗагрузки,Истина,КодВозврата);
		ЗавершениеЗапускаПриложения(КодВозврата, Новый Структура());
	КонецЕсли;                                                    
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКнопокGIT(Доступ)
	ЭтаФорма.Элементы.ГруппаВызововКомандГИТ.ТолькоПросмотр=НЕ Доступ;
	ЭтаФорма.Элементы.GITBlame.Доступность=Доступ;
	ЭтаФорма.Элементы.GITCheckout.Доступность=Доступ;
	ЭтаФорма.Элементы.GITLog.Доступность=Доступ;
	ЭтаФорма.Элементы.GITLogStat.Доступность=Доступ;
	ЭтаФорма.Элементы.GITAnnotate.Доступность=Доступ;
КонецПроцедуры	

&НаКлиенте 	
Процедура ДоступностьИсторииGIT()
	Если НЕ GITStatus Тогда
		Возврат;
	КонецЕсли;	
	ТекущаяСтрока=ЭтаФорма.Элементы.ОбъемПроекта.ТекущиеДанные;
	Если ТекущаяСтрока=Неопределено Тогда
 		УстановитьДоступностьКнопокGIT(Ложь);
 		ТабличныеДанныеГИТ.Очистить();	
		ТекстовыеДанныеГИТ="";
		ИсторияГИТПоФиче="";
		Возврат;
	КонецЕсли;	
	
	Если НЕ ТекущаяСтрока.Фича Тогда
 		УстановитьДоступностьКнопокGIT(Ложь);
	Иначе
 		УстановитьДоступностьКнопокGIT(Истина);
	КонецЕсли;	
	Если ТекущаяСтрока.ПолныйПуть<>ИсторияГИТПоФиче Тогда
		ТабличныеДанныеГИТ.Очистить();	
		ТекстовыеДанныеГИТ="";
		ИсторияГИТПоФиче="";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъемПроектаПриАктивизацииСтроки(Элемент)
	ДоступностьИсторииGIT();
	//ПроверитьМестоХраненияТребований();
КонецПроцедуры

&НаКлиенте
Функция РазложитьСтрокуНаКолонки(Строка)
	Стр=СтрЗаменить(Прав(Строка,СтрДлина(Строка)-1),"|",Символы.ПС);
	СтрокаТЧ=ТабличныеДанныеГИТ.Добавить();
	Для КК = 1 По СтрЧислоСтрок(Стр) Цикл
		Стр1=СтрПолучитьСтроку(Стр,КК);		
		Если КК=1 Тогда
			СтрокаТЧ.ПолныйХеш=СокрЛП(Стр1);
		ИначеЕсли КК=2 Тогда
			СтрокаТЧ.Хеш=СокрЛП(Стр1);
		ИначеЕсли КК=3 Тогда
			СтрокаТЧ.Автор=СокрЛП(Стр1);
		ИначеЕсли КК=4 Тогда
			СтрокаТЧ.ДатаАвтора=СокрЛП(Стр1);
		ИначеЕсли КК=5 Тогда
			СтрокаТЧ.Содержание=СокрЛП(Стр1);
		КонецЕсли;	
	КонецЦикла;	
	Возврат СтрокаТЧ;
КонецФункции	

&НаКлиенте
Процедура РазложитьСтрокуСтатистикиНаКолонки(Строка,СтрокаТЧ)
	Стр=СтрЗаменить(Строка,",",Символы.ПС);
	Для КК = 1 По СтрЧислоСтрок(Стр) Цикл
		Стр1=СтрПолучитьСтроку(Стр,КК);	
		Если СтрНайти(Стр1,"file changed")>0 Тогда
			Количество=Лев(Стр1,СтрНайти(Стр1,"file changed")-1);
			СтрокаТЧ.ДобавленоФайлов=СокрЛП(Количество);
		ИначеЕсли СтрНайти(Стр1,"insertions")>0 Тогда
			Количество=Лев(Стр1,СтрНайти(Стр1,"insertions")-1);
			СтрокаТЧ.ДобавленоСтрок=СокрЛП(Количество);
		ИначеЕсли СтрНайти(Стр1,"deletions")>0 Тогда
			Количество=Лев(Стр1,СтрНайти(Стр1,"deletions")-1);
			СтрокаТЧ.УдаленоСтрок=СокрЛП(Количество);
		КонецЕсли;
	КонецЦикла;	
		
КонецПроцедуры	

&НаКлиенте
Процедура РазложитьСтрокуBlame(Строка)
	ПервыйПробел=СтрНайти(Строка," ");
	ОткрывающаяСкобка=СтрНайти(Строка,"(");
	ЗакрывающаяСкобка=СтрНайти(Строка,")");
	АвторДата=Сред(Строка,ОткрывающаяСкобка+1,ЗакрывающаяСкобка-ОткрывающаяСкобка-1);
	НачалоДаты=СтрНайти(АвторДата,"20");
	
	СтрокаТЧ=ТабличныеДанныеГИТ.Добавить();
	СтрокаТЧ.Хеш=СокрЛП(Лев(Строка,ПервыйПробел-1));
	СтрокаТЧ.Каталог=СокрЛП(Сред(Строка,ПервыйПробел,ОткрывающаяСкобка-ПервыйПробел-1));
	СтрокаТЧ.Содержание=СокрЛП(Сред(Строка,ЗакрывающаяСкобка+1,СтрДлина(Строка)-ЗакрывающаяСкобка));
	СтрокаТЧ.Автор=СокрЛП(Сред(АвторДата,1,НачалоДаты-1));
	СтрокаТЧ.ДатаАвтора=СокрЛП(Сред(АвторДата,НачалоДаты,СтрДлина(АвторДата)));
	
КонецПроцедуры	

&НаКлиенте
Процедура УстановитьВидимостьКолонокGIT(Видимость)
	
	ЭтаФорма.Элементы.ТабличныеДанныеГИТДобавленоСтрок.Видимость=Видимость="Stat";
	ЭтаФорма.Элементы.ТабличныеДанныеГИТДобавленоФайлов.Видимость=Видимость="Stat";
	ЭтаФорма.Элементы.ТабличныеДанныеГИТУдаленоСтрок.Видимость=Видимость="Stat";
	ЭтаФорма.Элементы.ТабличныеДанныеГИТКаталог.Видимость=Видимость="Blame";
	
КонецПроцедуры

&НаКлиенте
Процедура РаспарситьТекстGITВТаблицу(ЧтоПарсим)
	
	Если ЧтоПарсим<>"GITAnnotate" Тогда
		ТабличныеДанныеГИТ.Очистить();
	КонецЕсли;
	Если ЧтоПарсим="GITLog" Тогда
		УстановитьВидимостьКолонокGIT("");
		Для КК = 1 По СтрЧислоСтрок(ТекстовыеДанныеГИТ) Цикл
			Строка = СтрПолучитьСтроку(ТекстовыеДанныеГИТ,КК);		
			СтрокаТЧ = РазложитьСтрокуНаКолонки(Строка);
		КонецЦикла;	
	ИначеЕсли ЧтоПарсим="GITLogStat" Тогда
		УстановитьВидимостьКолонокGIT("Stat");
		Для КК = 1 По СтрЧислоСтрок(ТекстовыеДанныеГИТ) Цикл
			Строка = СтрПолучитьСтроку(ТекстовыеДанныеГИТ,КК);
			Если Лев(Строка,1)="|" Тогда
				СтрокаТЧ = РазложитьСтрокуНаКолонки(Строка);
			Иначе
				РазложитьСтрокуСтатистикиНаКолонки(Строка,СтрокаТЧ);
			КонецЕсли;	
		КонецЦикла;	
		Элементы.ТабличныеДанныеГИТДобавленоФайлов.ТекстПодвала=ТабличныеДанныеГИТ.Итог("ДобавленоФайлов");	
		Элементы.ТабличныеДанныеГИТДобавленоСтрок.ТекстПодвала=ТабличныеДанныеГИТ.Итог("ДобавленоСтрок");	
		Элементы.ТабличныеДанныеГИТУдаленоСтрок.ТекстПодвала=ТабличныеДанныеГИТ.Итог("УдаленоСтрок");	
	ИначеЕсли ЧтоПарсим="GITBlame" Тогда
		УстановитьВидимостьКолонокGIT("Blame");
		Для КК = 1 По СтрЧислоСтрок(ТекстовыеДанныеГИТ) Цикл
			Строка = СтрПолучитьСтроку(ТекстовыеДанныеГИТ,КК);
			РазложитьСтрокуBlame(Строка);
		КонецЦикла;	
	ИначеЕсли ЧтоПарсим="GITAnnotate" Тогда
	КонецЕсли;

КонецПроцедуры

#КонецОбласти
 
