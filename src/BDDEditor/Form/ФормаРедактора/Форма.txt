&НаКлиенте
Перем КомпонентаKeyBoardHook;

#Область РедактированиеТекста

&НаКлиенте
Процедура ТекстФичиАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	//TODO
	//Здесь будет прописан автоподбор структуры метаданных 
	//Автоподбор операторов
КонецПроцедуры

&НаКлиенте 
Процедура ПолучитьТекстФичи() Экспорт
	ИмяФайлаФичи = ПутьКФиче;
	ТекстФичи.Очистить();
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ИмяФайлаФичи,"UTF-8");
	Стр = Текст.ПрочитатьСтроку();
	Пока Стр <> Неопределено Цикл // строки читаются до символа перевода строки
		ТекстФичи.ДобавитьСтроку(Стр);
		Стр = Текст.ПрочитатьСтроку();
	КонецЦикла;	
	Текст.Закрыть();
	ТекстХТМЛ.Добавить(ТекстФичи.ПолучитьТекст()); 
	
	МассивТекста=Новый Массив;
	МассивТекста.Добавить("УстановитьТекстХТМЛ()");
	МассивТекста.Добавить("УстановитьТекстДерево()");
	ВыполнитьПроцедуры(МассивТекста);
	
КонецПроцедуры	

&НаСервере
Процедура УстановитьТекстНаСервере(Текст)
	ТекстФичи.УстановитьТекст(Текст);
КонецПроцедуры	

&НаКлиенте
Процедура УстановитьТекст();
	УстановитьТекстНаСервере(ТекстХТМЛ.ПолучитьТекст());
	ТекстФичи.УстановитьТекст(ТекстХТМЛ.ПолучитьТекст());
КонецПроцедуры

&НаКлиенте
Процедура ТекстФичиПриИзменении(Элемент)
	Если НЕ БылиИзменения Тогда
		БылиИзменения=Истина;
	КонецЕсли;	
	ТекстХТМЛ.Удалить();
	//ТекстХТМЛ.Добавить(ТекстФичи.ПолучитьТекст());
	УстановитьТекстХТМЛ();
	УстановитьТекстДерево();
КонецПроцедуры

#Область ТекстХТМЛ

&НаСервере
Процедура УстановитьТекстХТМЛНаСервере(Текст11)
	ТекстХТМЛ.Добавить(Текст11);
	ТекстХТМЛ.УстановитьHTML(Текст11,Новый Структура);
КонецПроцедуры	

&НаКлиенте
Процедура УстановитьТекстХТМЛ()
	
	Текст11=ТекстФичи.ПолучитьТекст();
	ТекстХТМЛ.Добавить(ТекстФичи.ПолучитьТекст());
	Текст11 = СтрЗаменить(Текст11,Символы.ПС,"<br>");
	Текст11 = СтрЗаменить(Текст11,Символы.Таб,"&nbsp;&nbsp;&nbsp;&nbsp;");//Символ(9)
	УстановитьТекстХТМЛНаСервере(Текст11)
КонецПроцедуры

&НаКлиенте
Процедура ТекстХТМЛПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	Если НЕ БылиИзменения Тогда
		БылиИзменения=Истина;
	КонецЕсли;
	МассивТекста=Новый Массив;
	МассивТекста.Добавить("УстановитьТекст()");
	МассивТекста.Добавить("УстановитьТекстДерево()");
	ВыполнитьПроцедуры(МассивТекста);
КонецПроцедуры

#КонецОбласти //ТекстХТМЛ

#Область ТекстДерево

&НаКлиенте
Процедура УстановитьТекстДерево()
	ЗаполнитьТекстДеревоНаСервере(ТекстФичи.ПолучитьТекст());			
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТекстДеревоНаСервере(ТекстДляЗаполнения)
	ДеревоТабл = РеквизитФормыВЗначение("ТекстДерево");
	ДеревоТабл.Строки.Очистить();
	Служебные = ДеревоТабл.Строки.Добавить();
	Служебные.ПараметрФичи = "#Комментарий";
	ИскатьПо="";
	ВеткаФ="";ВеткаК="";
	Для к = 1 по СтрЧислоСтрок(ТекстДляЗаполнения) Цикл
		Стр = СокрЛП(СтрПолучитьСтроку(ТекстДляЗаполнения,к));
		Слова = СтрЗаменить(Стр," ",Символы.ПС);
		Стр1 = "";
		ЧтоТоНашли = Ложь;
		НашлиФункцию=Неопределено;
		НашлиКлюч=Неопределено;
		НашлиЕщеКлюч=Неопределено;
		Для л = 1 по СтрЧислоСтрок(Слова) Цикл
			Слово = СокрЛП(СтрПолучитьСтроку(Слова,л));
			ИскатьПо=Слово;
			Если СокрЛП(Слово) = "" Тогда 
				Продолжить; 
			КонецЕсли;
			Если НашлиФункцию<>Неопределено или НашлиКлюч<>Неопределено Тогда
				Если НашлиКлюч<>Неопределено Тогда
					НашлиЕщеКлюч = МассивКлючевыхСлов.НайтиПоЗначению(НРег(ИскатьПо));
					Если НашлиЕщеКлюч<>Неопределено Тогда
						ЧтоТоНашли = Истина;
						ВеткаК.ТекстПараметраФичи = СокрЛП(Стр1);
						ВеткаК = ВеткаФ.Строки.Добавить();
						ВеткаК.ОператорФичи = ИскатьПо;
						Стр1="";
						НашлиКлюч=НашлиЕщеКлюч;
					КонецЕсли;
				КонецЕсли;	
				Стр1 = Стр1 + " " + Слово;
				Продолжить;	
			КонецЕсли;	
			НашлиФункцию = МассивФункциональныхСлов.НайтиПоЗначению(НРег(ИскатьПо));
			НашлиКлюч = МассивКлючевыхСлов.НайтиПоЗначению(НРег(ИскатьПо));
			Если НашлиКлюч = Неопределено и л<4 и НашлиФункцию=Неопределено Тогда
				ИскатьПо = СокрЛП(Стр1+" "+Слово);
				НашлиКлюч = МассивКлючевыхСлов.НайтиПоЗначению(НРег(ИскатьПо));
			КонецЕсли;	
				
			Если НашлиФункцию <> Неопределено Тогда
				ЧтоТоНашли = Истина;
				ВеткаФ = ДеревоТабл.Строки.Добавить();
				ВеткаФ.ПараметрФичи = ИскатьПо;
			ИначеЕсли НашлиКлюч<>Неопределено и л<4 Тогда	
				ЧтоТоНашли = Истина;
				ВеткаК = ВеткаФ.Строки.Добавить();
				ВеткаК.ОператорФичи = ИскатьПо;
				Стр1="";
			Иначе
				Стр1 = Стр1 + " " + Слово;
			КонецЕсли;
		КонецЦикла;
		Стр1=СокрЛП(Стр1);
		Если Стр1 <> "" Тогда
			Если Лев(Стр1,1)="#" Тогда
				ВеткаФ = Служебные.Строки.Добавить();
				ВеткаФ.ОператорФичи = Стр1;
			ИначеЕсли НашлиФункцию<>Неопределено Тогда
				ВеткаФ.ТекстПараметраФичи = СокрЛП(Стр1);
			ИначеЕсли НЕ ЧтоТоНашли и ВеткаФ<>"" Тогда
				ВеткаК = ВеткаФ.Строки.Добавить();
				ВеткаК.ТекстПараметраФичи = СокрЛП(Стр1);
			ИначеЕсли ВеткаК<>"" Тогда
				ВеткаК.ТекстПараметраФичи = СокрЛП(Стр1);
			КонецЕсли;
			Стр1 = "";
		КонецЕсли;
	КонецЦикла;
	ЗначениеВРеквизитФормы(ДеревоТабл,"ТекстДерево");
КонецПроцедуры

&НаКлиенте
Процедура ТекстДеревоПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	Если НЕ БылиИзменения Тогда
		БылиИзменения=Истина;
	КонецЕсли;	
	РазобратьДеревоВТекст();
	ТекстХТМЛ.Удалить();
	УстановитьТекстХТМЛ();
КонецПроцедуры

&НаСервере
Функция РазобратьДеревоВТекстНаСервере()
	Дерево = РеквизитФормыВЗначение("ТекстДерево");
	ТекстИзДерева = "";
	ПолучитьТекстИзДерева(Дерево,0,ТекстИзДерева);
	Возврат ТекстИзДерева;
КонецФункции	

&НаКлиенте
Процедура РазобратьДеревоВТекст()
	ТекстИзДерева=РазобратьДеревоВТекстНаСервере();
	ТекстФичи.УстановитьТекст(ТекстИзДерева);
КонецПроцедуры

&НаСервере
Процедура ПолучитьТекстИзДерева(Дерево,Ур,Текст)
	Для каждого ветка из дерево.Строки Цикл
		Если ур = 0 Тогда
			Если СокрЛП(Ветка.ПараметрФичи)="#Комментарий" Тогда
				ПолучитьТекстИзДерева(Ветка,ветка.Уровень()+1,Текст);     
				Продолжить;
			КонецЕсли;	
			Текст = Текст + Символы.ПС;
			Текст = Текст + ?(СокрЛП(Текст) = "","",Символы.ПС) + Ветка.ПараметрФичи + " " + Ветка.ТекстПараметраФичи;  
			//			Текст = Текст+ Символы.ПС;
		Иначе
			Если Лев(Ветка.ОператорФичи,1)="#" Тогда
				Текст = Текст + Символы.ПС+ Ветка.ОператорФичи + " " + Ветка.ТекстПараметраФичи;
			Иначе
				Текст = Текст + Символы.ПС + Символы.Таб + Ветка.ОператорФичи + " " + Ветка.ТекстПараметраФичи;
			КонецЕсли;
		КонецЕсли;
		Если Ветка.Строки.Количество() <> 0 Тогда
			ПолучитьТекстИзДерева(Ветка,ветка.Уровень()+1,Текст);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

	
	#КонецОбласти //ТекстДерево
	
#КонецОбласти //РедактированиеТекста

#Область ОбработкаФормы

&НаКлиенте
Процедура ДобавитьКлючевоеСловоВТаблицу(Тзн,Слово,Тип)
	СтруктураКлючевогоСлова = Новый Структура;
	СтруктураКлючевогоСлова.Вставить("Слово",Слово);
	СтруктураКлючевогоСлова.Вставить("Тип",Тип);
	
	Тзн.Добавить(СтруктураКлючевогоСлова);
	
КонецПроцедуры

&НаКлиенте
Функция СоздатьСтруктуруФункциональныхСлов()
	Тзн = Новый Массив;
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Функция","feature");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Свойство","feature");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Функционал","feature");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Предыстория","background");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Контекст","background");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Сценарий","scenario");
	
	Возврат Тзн;
КонецФункции

&НаКлиенте
Функция СоздатьСтруктуруКлючевыхСлов()
	Тзн = Новый Массив;
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"структура сценария","scenario_outline");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"примеры","examples");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"допустим","given");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"дано","given");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"пусть","given");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"если","when");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"когда","when");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"тогда","then");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"то","then");

	ДобавитьКлючевоеСловоВТаблицу(Тзн,"к тому же","and");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"также","and");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"и","and");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"но","but");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"а","but");
	
	Возврат Тзн;
КонецФункции

&НаКлиенте
Функция СоздатьМассивФункциональныхСлов()
	Тзн = Новый Массив;
	Тзн.Добавить("функция:");
	Тзн.Добавить("свойство:");
	Тзн.Добавить("функционал:");
	
	Тзн.Добавить("предыстория:");
	Тзн.Добавить("контекст:");
	
	Тзн.Добавить("сценарий:");
	
	Возврат Тзн;
КонецФункции

&НаКлиенте
Функция СоздатьМассивКлючевыхСлов()
	Тзн = Новый Массив;
	
	Тзн.Добавить("структура сценария");
	
	Тзн.Добавить("как");
	Тзн.Добавить("я хочу");
	Тзн.Добавить("чтобы");
	
	Тзн.Добавить("примеры");
	
	Тзн.Добавить("допустим");
	Тзн.Добавить("дано");
	Тзн.Добавить("пусть");
	
	Тзн.Добавить("если");
	Тзн.Добавить("когда");
	
	Тзн.Добавить("тогда");
	Тзн.Добавить("то");

	Тзн.Добавить("к тому же");
	Тзн.Добавить("также");
	Тзн.Добавить("и");
	
	Тзн.Добавить("но");
	Тзн.Добавить("а");
	
	Возврат Тзн;
КонецФункции

&НаКлиенте
Процедура ЗаполнитьСпискиСлов()
	
	МассивКлючевыхСлов.ЗагрузитьЗначения(СоздатьМассивКлючевыхСлов());
	МассивФункциональныхСлов.ЗагрузитьЗначения(СоздатьМассивФункциональныхСлов());
	
КонецПроцедуры	

&НаСервере
Функция ПолучитьМакетНаСервере(Имя)
	Возврат РеквизитФормыВЗначение("Объект").ПолучитьМакет(Имя);
КонецФункции

&НаКлиенте
Процедура Подключить()
	
	Если ЕстьПоддержкаАсинхронныхВызовов Тогда
		ИмяФайла = Неопределено;
		НачатьПолучениеКаталогаВременныхФайлов(Новый ОписаниеОповещения("ПодключитьЗавершение", ЭтаФорма));
	Иначе
		ИмяФайла = КаталогВременныхФайлов();
		ПодключитьЗавершение(ИмяФайла, Новый Структура());
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьЗавершение(ИмяКаталогаВременныхФайлов, ДополнительныеПараметры) Экспорт
	ИмяФайладлл=ИмяКаталогаВременныхФайлов+"Hook.dll";
	Макет2	= ПолучитьМакетНаСервере("ПерехватКлавиатуры");
	Попытка
		Макет2.Записать(ИмяФайладлл);
	Исключение
	КонецПопытки;
	
	Если ЕстьПоддержкаАсинхронныхВызовов Тогда
		//НачатьУстановкуВнешнейКомпоненты(Новый ОписаниеОповещения("УстановкаВнешнейКомпонентыЗавершение1", ЭтаФорма,Новый Структура("ИмяФайла",ИмяФайладлл)),ИмяФайладлл);
		НачатьПодключениеВнешнейКомпоненты(Новый ОписаниеОповещения("ПодключениеВнешнейКомпонентыЗавершение", ЭтаФорма),ИмяФайладлл,"Hook",ТипВнешнейКомпоненты.Native);
	Иначе
		Попытка 
			рез = ПодключитьВнешнююКомпоненту(ИмяФайладлл, "Hook",ТипВнешнейКомпоненты.Native);
			ПодключениеВнешнейКомпонентыЗавершение(рез, Новый Структура());
//			УстановитьВнешнююКомпоненту(ИмяФайладлл);
		Исключение
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = "Перехват клавиатуры не подключен!";
			Сообщение.УстановитьДанные(ЭтотОбъект);
			Сообщение.Сообщить();			
		КонецПопытки;
	КонецЕсли;	
КонецПроцедуры	

&НаКлиенте
Процедура ПодключениеВнешнейКомпонентыЗавершение(Подключено,ДополнительныеПараметры) Экспорт
	Если Подключено Тогда
		Если ЕстьПоддержкаАсинхронныхВызовов ТОгда
			КомпонентаKeyBoardHook = Новый("AddIn.Hook.KeyboardHook");
			КомпонентаKeyBoardHook.НачатьУстановкуЗахватРазрешен(,Истина);
			КомпонентаKeyBoardHook.НачатьУстановкуСобытиеПриНажатии(,Истина);
			КомпонентаKeyBoardHook.НачатьУстановкуЗахватПервым(,Истина);
		Иначе
			КомпонентаKeyBoardHook = Новый("AddIn.Hook.KeyboardHook");
			КомпонентаKeyBoardHook.ЗахватРазрешен = Истина;
			КомпонентаKeyBoardHook.СобытиеПриНажатии = Истина;
			КомпонентаKeyBoardHook.ЗахватПервым = Истина;
		КонецЕсли;
	Иначе		
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = "Перехват клавиатуры не подключен!";
		Сообщение.УстановитьДанные(ЭтотОбъект);
		Сообщение.Сообщить();
		
	КонецЕсли;
КонецПроцедуры	           

&НаСервереБезКонтекста 
Функция ПолучитьРежимМодальностиКонфигурации()
	Возврат Метаданные.РежимИспользованияМодальности = Метаданные.СвойстваОбъектов.РежимИспользованияМодальности.Использовать;
КонецФункции

&НаКлиенте
Процедура ЗадатьВопросСохранения(ПроцедураПослеСохранения="") Экспорт
	Если БылиИзменения Тогда
		РежимМодальности=ПолучитьРежимМодальностиКонфигурации();
		Если РежимМодальности Тогда
			Ответ=Вопрос("Были внесены изменения. Сохранить изменения в фиче?",РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да);
			Если Ответ=КодВозвратаДиалога.Да Тогда
				ЗаписатьИзмененияВФиче();
			КонецЕсли;
			Если ПроцедураПослеСохранения<>"" Тогда
				Выполнить(ПроцедураПослеСохранения);	
			КонецЕсли;	
		Иначе
			Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопроса",ЭтотОбъект,ПроцедураПослеСохранения);
			ПоказатьВопрос(Оповещение,"Были внесены изменения. Сохранить изменения в фиче?",РежимДиалогаВопрос.ДаНет,0,КодВозвратаДиалога.Да,"Сохранение фичи");
		КонецЕсли;
	Иначе	
		Если ПроцедураПослеСохранения<>"" Тогда
			Выполнить(ПроцедураПослеСохранения);	
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры	

&НаКлиенте
Процедура ПослеЗакрытияВопроса(Результат, Параметры) Экспорт		
    Если Результат = КодВозвратаДиалога.Да Тогда
        ЗаписатьИзмененияВФиче();
	КонецЕсли;	
	Если Параметры<>Неопределено Тогда
		Выполнить(Параметры);	
	КонецЕсли;	

КонецПроцедуры	

&НаКлиенте
Процедура СохранитьФичу(Команда)
	ЗаписатьИзмененияВФиче();
	БылиИзменения=Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ПеречитатьФичу(Команда)
	ЗадатьВопросСохранения("ПолучитьТекстФичи()");
	//ПолучитьТекстФичи();
	БылиИзменения=Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФичу(Команда)
	ЗадатьВопросСохранения("ЭтаФорма.Закрыть()");
 	//этаформа.Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИзмененияВФиче() Экспорт
	ТекстФичи.Записать(ПутьКФиче,"UTF-8");	
КонецПроцедуры

&НаКлиенте
Процедура ПроизводитьПоискПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	ЭтаФОрма.Элементы.ГруппаМассиваПоиска.Видимость=ПроизводитьПоиск;	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоМетаданнымПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	ЭтаФОрма.Элементы.ГруппаДереваМетаданных.Видимость=ПоискПоМетаданным;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	//Вставить содержимое обработчика
	//КомпонентаKeyBoardHook.HookEnabled=0;
	ЗадатьВопросСохранения(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура АктуализироватьТекстНаСтраницах(ПредСтраница) Экспорт
	//Если НЕ БылиИзменения Тогда
	//	БылиИзменения=Истина;
	//КонецЕсли;	
	Если ПредыдущаяСтраницаРедактора="РедакторТекста" Тогда
		ТекстХТМЛ.Удалить();
		//ТекстХТМЛ.Добавить(ТекстФичи.ПолучитьТекст());
		УстановитьТекстХТМЛ();
		УстановитьТекстДерево();
	ИначеЕсли ПредыдущаяСтраницаРедактора="РедакторХТМЛ" Тогда
		МассивТекста=Новый Массив;
		МассивТекста.Добавить("УстановитьТекст()");
		МассивТекста.Добавить("УстановитьТекстДерево()");
		ВыполнитьПроцедуры(МассивТекста);
	ИначеЕсли ПредыдущаяСтраницаРедактора="РедакторДерево" Тогда
		РазобратьДеревоВТекст();
		ТекстХТМЛ.Удалить();
		УстановитьТекстХТМЛ();
	КонецЕсли;	
		
КонецПроцедуры	

&НаКлиенте
Процедура ГруппаРедактированияПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Если ПредыдущаяСтраницаРедактора<>ТекущаяСтраница.Имя Тогда
		АктуализироватьТекстНаСтраницах(ПредыдущаяСтраницаРедактора);
		ПредыдущаяСтраницаРедактора=ТекущаяСтраница.Имя;
		//Сообщить(ПредыдущаяСтраницаРедактора);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область Служебные

&НаСервере
Процедура ВосстановитьНастройки() Экспорт
	Если Объект.РежимСамотестирования Тогда
		Возврат;
	КонецЕсли;  
	
	Настройки = ХранилищеОбщихНастроек.Загрузить("VanessaBDDEditorRed");
	Если ТипЗнч(Настройки) = Тип("Структура") Тогда
		
		Настройки.Свойство("ПоискПоМетаданным", ПоискПоМетаданным);
		Настройки.Свойство("ПроизводитьПоиск",ПроизводитьПоиск);
		ТекущаяСтраница="";
		Если Настройки.Свойство("ТекущаяСтраница",ТекущаяСтраница) Тогда
			ЭтаФорма.Элементы.ГруппаРедактирования.ТекущаяСтраница=ЭтаФорма.Элементы[ТекущаяСтраница];
			ПредыдущаяСтраницаРедактора=ТекущаяСтраница;
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройки() Экспорт
	Если Объект.РежимСамотестирования Тогда
		Возврат;
	КонецЕсли;  
	
	Настройки = Новый Структура;
	Настройки.Вставить("ПоискПоМетаданным", ПоискПоМетаданным);
	Настройки.Вставить("ПроизводитьПоиск",ПроизводитьПоиск);
	Настройки.Вставить("ТекущаяСтраница",ЭтаФорма.Элементы.ГруппаРедактирования.ТекущаяСтраница.Имя);
	
	ХранилищеОбщихНастроек.Сохранить("VanessaBDDEditorRed",, Настройки);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ВосстановитьНастройки();
	ПрочитатьШаблоны();
	
	ЗаполнитьДеревоПодсистем();
	ЗаполнитьМетаданные();
	ЗаполнитьСпискиСлов();
	ПолучитьТекстФичи();
	БылиИзменения=Ложь;
	ПроизводитьПоиск=Ложь;
	ЭтаФОрма.Элементы.ГруппаМассиваПоиска.Видимость=ПроизводитьПоиск;
	ЭтаФОрма.Элементы.ГруппаДереваМетаданных.Видимость=ПоискПоМетаданным;
	
	ТекстПисьма.Добавить("Здравствуй, уважаемый заказчик. 
	|
	|Нам необходимо у тебя уточнить:");
	
	//	ПодключитьОбработчикОжидания("Подключить",1,Истина);
	Подключить();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	КомпонентаKeyBoardHook	= Неопределено;
	СохранитьНастройки();
КонецПроцедуры
#КонецОбласти

#Область Почта

&НаКлиенте
Процедура ОтправитьПисьмоЗаказчику(Команда)
	// Вставить содержимое обработчика.
	Если БылиИзменения Тогда
		ЗадатьВопросСохранения("ПодготовитьПисьмоЗаказчику");
	Иначе	
		ПодготовитьПисьмоЗаказчику();
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПодготовитьПисьмоЗаказчику()
	//Параметры подключения
	ПодготовитьИОтправитьПисьмо(Ложь,Ложь);
	//ТекстДляПисьма=ТекстФичи.ПолучитьТекст();
	//СтрокаФункционала=Найти(ТекстДляПисьма,"Функционал:");
	//КонецСтрокиФункционала=Найти(Сред(ТекстДляПисьма,СтрокаФункционала),Символы.ПС);
	//Тема=СокрЛП(Сред(ТекстДляПисьма,СтрокаФункционала,КонецСтрокиФункционала));
	//ТекстСообщения=ТекстПисьма.ПолучитьФорматированнуюСтроку();//.ПолучитьТекст();
	//
	//Команда ="mailto:" + СокрЛП(ЭлАдресЗаказчика) + "?subject=" + Тема + "&body=" + ТекстСообщения;
	//WshShell = Новый COMObject("WScript.Shell");
	//WshShell.Run("""" + Команда + """");
КонецПроцедуры	

&НаКлиенте
Процедура ОтправитьСВложением(Команда)
	// Вставить содержимое обработчика.
	ПодготовитьИОтправитьПисьмо(Истина,Истина);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПисьмоСВложением(Команда)
	// Вставить содержимое обработчика.
	ПодготовитьИОтправитьПисьмо(Ложь,Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПодготовитьИОтправитьПисьмо(Отправлять,Вкладывать)
	
 	ТекстДляПисьма=ТекстФичи.ПолучитьТекст();
	СтрокаФункционала=Найти(ТекстДляПисьма,"Функционал:");
	КонецСтрокиФункционала=Найти(Сред(ТекстДляПисьма,СтрокаФункционала),Символы.ПС);
	Тема=СокрЛП(Сред(ТекстДляПисьма,СтрокаФункционала,КонецСтрокиФункционала));
	ТекстСообщения=ТекстПисьма.ПолучитьФорматированнуюСтроку();//.ПолучитьТекст();
    ПисьмоХТМЛ = "";
    СтруктураКартинок = Новый Структура;
    ТекстПисьма.ПолучитьHTML(ПисьмоХТМЛ, СтруктураКартинок);
	
	Попытка
		Outlook = Новый COMОбъект("Outlook.Application");
		Письмо = Outlook.CreateItem(0); 
		Письмо.Subject = Тема;
		Письмо.BodyFormat=2;
		Письмо.Body = СокрЛП(ТекстСообщения);
		Письмо.HTMLBody = ПисьмоХТМЛ;
		Если ЗначениеЗаполнено(ЭлАдресЗаказчика) Тогда
			Письмо.Recipients.Add(ЭлАдресЗаказчика);
		КонецЕсли;	
		Если Вкладывать Тогда
			Письмо.Attachments.Add(ПутьКФиче);
		КонецЕсли;
		Если Отправлять и ЗначениеЗаполнено(ЭлАдресЗаказчика) Тогда
			Письмо.Send();
		Иначе
			Письмо.Display();
		КонецЕсли;
	Исключение
		Сообщить("Не удалось создать объект Outlook.Application");
		Команда ="mailto:" + СокрЛП(ЭлАдресЗаказчика) + "?subject=" + Тема + "&body=" + ТекстСообщения;
		WshShell = Новый COMObject("WScript.Shell");
		WshShell.Run("""" + Команда + """");
		
	КонецПопытки;
КонецПроцедуры	

#КонецОбласти

#Область Шаблоны

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные) Экспорт
	Если ВводДоступен() и СтрДлина(Данные) > 5 Тогда // отсечем управляющие клавиши
		Если Сред(Данные,6) = "+" или Лев(данные,5) = "16571" или Лев(данные,5) = "08379" или Лев(данные,5) = "00107" Тогда
			ОбработатьНажатиеПодстановкиМетаданных();
		ИначеЕсли Лев(данные,5) = "04177" или Лев(данные,5) = "02129" Тогда // ctrl + q два варианта потому что ctrl бывает правый и левый
			ОбработатьНажатиеПодстановкиИзШаблона();
		ИначеЕсли Лев(данные,5) = "04128" или Лев(данные,5) = "02080" Тогда // ctrl + " " так же два варианта будем дополнять слово
			ОбработатьНажатиеПодстановкиСлова();
		ИначеЕсли Лев(данные,5) = "04183" или Лев(данные,5) = "02135" Тогда // ctrl + W так же два варианта будем подставлять строку целиком
			ОбработатьНажатиеПодстановкиСтроки();
		КонецЕсли;
		Если Этаформа.ТекущийЭлемент.Имя = "ТекстХТМЛ" Тогда
			Символстр = Сред(Данные,6);
			Если Лев(данные,5) = "00013" или Лев(данные,5) = "00269" или Лев(данные,5) = "00032" или НайтиСимволКонцаСлова(Символстр) Тогда
				ЭтаФорма.ТекущийЭлемент = Этаформа.Элементы.ТекстФичи; // иначе изменения не попадают в ТекстХТМЛ
				ЭтаФорма.ТекущийЭлемент = Этаформа.Элементы.ТекстХТМЛ;
				Нач = "";
				Кон = "";
				Элементы.ТекстХТМЛ.ПолучитьГраницыВыделения(Нач,Кон);
				Элементы.ТекстХТМЛ.УстановитьГраницыВыделения(ТекстХТМЛ.ПолучитьЗакладкуПоПозиции(ТекстХТМЛ.ПолучитьПозициюПоЗакладке(Нач)+1),ТекстХТМЛ.ПолучитьЗакладкуПоПозиции(ТекстХТМЛ.ПолучитьПозициюПоЗакладке(Нач)+1));
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьНажатиеПодстановкиМетаданных()
	Если Этаформа.ТекущийЭлемент.Имя = "ТекстФичи" Тогда
		Нстр = 0;
		Нкол = 0;
		Кстр = 0;
		Ккол = 0;
		Элементы.ТекстФичи.ПолучитьГраницыВыделения(Нстр,Нкол,Кстр,Ккол);
		БНстр = Нстр;
		БНкол = Нкол;
		БКстр = Кстр;
		БКкол = Ккол;
		нашли = ложь;
		стр = "";
		Пока Нкол <> 1 или нашли Цикл
			НКол = Нкол - 1;
			Элементы.ТекстФичи.УстановитьГраницыВыделения(Нстр,Нкол,Кстр,Ккол);
			Текст1 = Элементы.ТекстФичи.ВыделенныйТекст;
			Если Текст1 = " " Тогда
				нашли = Истина;
				Прервать;
			КонецЕсли;
			Стр = текст1 + стр;
			Ккол = Ккол - 1;
		КонецЦикла;
		Если нашли или НКол = 1 Тогда
			Стр = СокрЛП(Стр);
			Стр = Лев(Стр,СтрДлина(Стр)-1);
			Список = ПолучитьСписокИзДерева(стр);
			
			
			Если Список.Количество() <> 0 Тогда
				Если ЭтаФорма.ЕстьПоддержкаНемодальныхФорм Тогда
					выбрали = ВыбратьИзСписка(Список,ЭтаФорма.ТекущийЭлемент);
					Если Выбрали <> Неопределено Тогда
						Элементы.ТекстФичи.УстановитьГраницыВыделения(БНстр,?(НКол = 1,НКол,НКол+1),БКстр,БКкол);
						Элементы.ТекстФичи.ВыделенныйТекст = "```" + выбрали.Значение + "```";
					Иначе
						Элементы.ТекстФичи.УстановитьГраницыВыделения(БНстр,БНкол-1,БКстр,БКкол);
						Элементы.ТекстФичи.ВыделенныйТекст = "";
						Элементы.ТекстФичи.УстановитьГраницыВыделения(БНстр,БНкол,БКстр,БКкол);
					КонецЕсли;
				Иначе
					ДопПараметры = Новый Структура;
					ДопПараметры.Вставить("БНстр",БНстр);
					ДопПараметры.Вставить("БНкол",БНкол);
					ДопПараметры.Вставить("БКстр",БКстр);
					ДопПараметры.Вставить("БКкол",БКкол);
					ДопПараметры.Вставить("НКол",НКол);
					ДопПараметры.Вставить("ТекЭлемент",Этаформа.ТекущийЭлемент.Имя);
					Оповещение = новый ОписаниеОповещения("ПослеВыбораИзСписка",ЭтаФорма,ДопПараметры);
					ПоказатьВыборИзСписка(Оповещение,Список,ЭтаФорма.ТекущийЭлемент);
				КонецЕсли;
			Иначе
				Элементы.ТекстФичи.УстановитьГраницыВыделения(БНстр,БНкол-1,БКстр,БКкол);
				Элементы.ТекстФичи.ВыделенныйТекст = "";
				Элементы.ТекстФичи.УстановитьГраницыВыделения(БНстр,БНкол,БКстр,БКкол);
			КонецЕсли;
		Иначе
			Элементы.ТекстФичи.УстановитьГраницыВыделения(БНстр,БНкол-1,БКстр,БКкол);
			Элементы.ТекстФичи.ВыделенныйТекст = "";				
			Элементы.ТекстФичи.УстановитьГраницыВыделения(БНстр,БНкол,БКстр,БКкол);
		КонецЕсли;
	ИначеЕсли Этаформа.ТекущийЭлемент.Имя = "ТекстХТМЛ" Тогда
		Нач = "";
		Кон = "";
		ЭтаФорма.ТекущийЭлемент = Этаформа.Элементы.ТекстФичи; // иначе изменения не попадают в ТекстХТМЛ
		ЭтаФорма.ТекущийЭлемент = Этаформа.Элементы.ТекстХТМЛ;
		Элементы.ТекстХТМЛ.ПолучитьГраницыВыделения(Нач,Кон);
		ПозНач = ТекстХТМЛ.ПолучитьПозициюПоЗакладке(Нач);
		ПозНачБ = ПозНач;
		Нашли = ложь;
		пока ПозНач <> 0 Цикл
			ПозНач = ПозНач - 1;
			Элементы.ТекстХТМЛ.УстановитьГраницыВыделения(ТекстХТМЛ.ПолучитьЗакладкуПоПозиции(ПозНач),Кон);
			ТекстВыд = Элементы.ТекстХТМЛ.ВыделенныйТекст; // начало работать только после добавления ИМЕННО двух чтений из объекта
			ТекстВыд = Элементы.ТекстХТМЛ.ВыделенныйТекст;
			Если Лев(ТекстВыд,1) = " " или КодСимвола(Лев(ТекстВыд,1)) = 160 или Лев(ТекстВыд,1) = символы.пс Тогда
				нашли = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если нашли или ПозНач = 0 Тогда
			ПозКон = ТекстХТМЛ.ПолучитьПозициюПоЗакладке(Кон);
			Элементы.ТекстХТМЛ.УстановитьГраницыВыделения(ТекстХТМЛ.ПолучитьЗакладкуПоПозиции(ПозНач+1),ТекстХТМЛ.ПолучитьЗакладкуПоПозиции(ПозКон));
			стр = Элементы.ТекстХТМЛ.ВыделенныйТекст;
			стр = Элементы.ТекстХТМЛ.ВыделенныйТекст;
			Список = ПолучитьСписокИзДерева(стр);
			Если Список.Количество() <> 0 Тогда
				Если ЭтаФорма.ЕстьПоддержкаНемодальныхФорм Тогда
					выбрали = ВыбратьИзСписка(Список,ЭтаФорма.ТекущийЭлемент);
					Если Выбрали <> Неопределено Тогда
						Элементы.ТекстХТМЛ.УстановитьГраницыВыделения(ТекстХТМЛ.ПолучитьЗакладкуПоПозиции(ПозНач+1),ТекстХТМЛ.ПолучитьЗакладкуПоПозиции(ПозКон+1));
						Элементы.ТекстХТМЛ.ВыделенныйТекст = "```" + выбрали.Значение + "```";
					Иначе
						Элементы.ТекстХТМЛ.УстановитьГраницыВыделения(ТекстХТМЛ.ПолучитьЗакладкуПоПозиции(ПозНач+1),ТекстХТМЛ.ПолучитьЗакладкуПоПозиции(ПозКон+1));
						Элементы.ТекстХТМЛ.ВыделенныйТекст = " ";
						Элементы.ТекстХТМЛ.УстановитьГраницыВыделения(ТекстХТМЛ.ПолучитьЗакладкуПоПозиции(ПозНач+1),ТекстХТМЛ.ПолучитьЗакладкуПоПозиции(ПозНач+1));
					КонецЕсли;
				Иначе
					ДопПараметры = Новый Структура;
					ДопПараметры.Вставить("ПозНач",ПозНач);
					ДопПараметры.Вставить("ПозКон",ПозКон);
					Оповещение = новый ОписаниеОповещения("ПослеВыбораИзСпискаХТМЛ",ЭтаФорма,ДопПараметры);
					ПоказатьВыборИзСписка(Оповещение,Список,ЭтаФорма.ТекущийЭлемент);
				КонецЕсли;
			Иначе
				Элементы.ТекстХТМЛ.УстановитьГраницыВыделения(ТекстХТМЛ.ПолучитьЗакладкуПоПозиции(ПозНач+1),ТекстХТМЛ.ПолучитьЗакладкуПоПозиции(ПозКон+1));
				Элементы.ТекстХТМЛ.ВыделенныйТекст = " ";
				Элементы.ТекстХТМЛ.УстановитьГраницыВыделения(ТекстХТМЛ.ПолучитьЗакладкуПоПозиции(ПозНач+1),ТекстХТМЛ.ПолучитьЗакладкуПоПозиции(ПозНач+1));
			КонецЕсли;
		Иначе 
			Элементы.ТекстХТМЛ.УстановитьГраницыВыделения(ТекстХТМЛ.ПолучитьЗакладкуПоПозиции(ПозНач+1),ТекстХТМЛ.ПолучитьЗакладкуПоПозиции(ПозКон+1));
			Элементы.ТекстХТМЛ.ВыделенныйТекст = " ";
			Элементы.ТекстХТМЛ.УстановитьГраницыВыделения(ТекстХТМЛ.ПолучитьЗакладкуПоПозиции(ПозНач+1),ТекстХТМЛ.ПолучитьЗакладкуПоПозиции(ПозНач+1));
		КонецЕсли;
	ИначеЕсли Этаформа.ТекущийЭлемент.Имя = "ТекстДерево" Тогда
		ИмяКолонки = СтрЗаменить(Элементы.ТекстДерево.ТекущийЭлемент.Имя,Элементы.ТекстДерево.Имя,"");
		Если ИмяКолонки="ТекстПараметраФичи" Тогда
			ТекстРед = Элементы.ТекстДерево.ТекущийЭлемент.ТекстРедактирования;
			Кон = СтрДлина(ТекстРед);
			Стр = "";
			нашли = ложь;
			Пока Кон <> 0 цикл
				кон = кон - 1;
				Сим = Сред(ТекстРед,кон+1,1);
				Если сим = " " Тогда
					Нашли = Истина;
					прервать;
				КонецЕсли;
				Стр = сим + Стр;
			КонецЦикла;
			Если нашли или Кон = 0 Тогда
				Стр = СокрЛП(Стр);
				Стр1 = Лев(Стр,СтрДлина(Стр)-1);
				Список = ПолучитьСписокИзДерева(стр1);
				Если Список.Количество() <> 0 Тогда
					Если ЭтаФорма.ЕстьПоддержкаНемодальныхФорм Тогда
						выбрали = ВыбратьИзСписка(Список,ЭтаФорма.ТекущийЭлемент);
						Если Выбрали <> Неопределено Тогда
							ТекстРед = СтрЗаменить(ТекстРед,стр,"```" + выбрали.Значение + "```");
							Элементы.ТекстДерево.ТекущиеДанные[ИмяКолонки] = ТекстРед;
						Иначе
							ТекстРед = СтрЗаменить(ТекстРед,стр,"");
							Элементы.ТекстДерево.ТекущиеДанные[ИмяКолонки] = ТекстРед;
						КонецЕсли;
					Иначе
						ДопПараметры = Новый Структура;
						ДопПараметры.Вставить("ТекстРед",ТекстРед);
						ДопПараметры.Вставить("стр",стр);
						ДопПараметры.Вставить("ИмяКолонки",ИмяКолонки);
						Оповещение = новый ОписаниеОповещения("ПослеВыбораИзСпискаДерево",ЭтаФорма,ДопПараметры);
						ПоказатьВыборИзСписка(Оповещение,Список,ЭтаФорма.ТекущийЭлемент);
					КонецЕсли;
				Иначе
					ТекстРед = СтрЗаменить(ТекстРед,стр,"");
					Элементы.ТекстДерево.ТекущиеДанные[ИмяКолонки] = ТекстРед;
				КонецЕсли;
			Иначе
				ТекстРед = СтрЗаменить(ТекстРед,стр,"");
				Элементы.ТекстДерево.ТекущиеДанные[ИмяКолонки] = ТекстРед;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораИзСпискаДерево(ВыбранныйЭлемент,ДополнительныеПараметры) Экспорт
	Если ВыбранныйЭлемент <> Неопределено Тогда
		ТекстРед = СтрЗаменить(ДополнительныеПараметры.ТекстРед,ДополнительныеПараметры.стр,ВыбранныйЭлемент.значение);
		Элементы.ТекстДерево.ТекущиеДанные[ДополнительныеПараметры.ИмяКолонки] = ТекстРед;
	Иначе
		ТекстРед = СтрЗаменить(ДополнительныеПараметры.ТекстРед,ДополнительныеПараметры.стр,"");
		Элементы.ТекстДерево.ТекущиеДанные[ДополнительныеПараметры.ИмяКолонки] = ТекстРед;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораИзСписка(ВыбранныйЭлемент,ДополнительныеПараметры) Экспорт
	Если ВыбранныйЭлемент <> Неопределено Тогда
		Элементы[ДополнительныеПараметры.ТекЭлемент].УстановитьГраницыВыделения(ДополнительныеПараметры.БНстр,
																				ДополнительныеПараметры.НКол+1,
																				ДополнительныеПараметры.БКстр,
																				ДополнительныеПараметры.БКкол);
		Элементы[ДополнительныеПараметры.ТекЭлемент].ВыделенныйТекст = "```" + ВыбранныйЭлемент.Значение + "```";
	Иначе
		Элементы[ДополнительныеПараметры.ТекЭлемент].УстановитьГраницыВыделения(ДополнительныеПараметры.БНстр,
																				ДополнительныеПараметры.БНкол-1,
																				ДополнительныеПараметры.БКстр,
																				ДополнительныеПараметры.БКкол);
		Элементы[ДополнительныеПараметры.ТекЭлемент].ВыделенныйТекст = "";
		Элементы[ДополнительныеПараметры.ТекЭлемент].УстановитьГраницыВыделения(ДополнительныеПараметры.БНстр,
																				ДополнительныеПараметры.БНкол,
																				ДополнительныеПараметры.БКстр,
																				ДополнительныеПараметры.БКкол);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте 
Процедура ПослеВыбораИзСпискаХТМЛ(ВыбранныйЭлемент,ДополнительныеПараметры) Экспорт
	Если ВыбранныйЭлемент <> Неопределено Тогда
		Элементы.ТекстХТМЛ.УстановитьГраницыВыделения(ТекстХТМЛ.ПолучитьЗакладкуПоПозиции(ДополнительныеПараметры.ПозНач+1),ТекстХТМЛ.ПолучитьЗакладкуПоПозиции(ДополнительныеПараметры.ПозКон+1));
		Элементы.ТекстХТМЛ.ВыделенныйТекст = "```" + ВыбранныйЭлемент.Значение + "```";
	Иначе
		Элементы.ТекстХТМЛ.УстановитьГраницыВыделения(ТекстХТМЛ.ПолучитьЗакладкуПоПозиции(ДополнительныеПараметры.ПозНач+1),ТекстХТМЛ.ПолучитьЗакладкуПоПозиции(ДополнительныеПараметры.ПозКон+1));
		Элементы.ТекстХТМЛ.ВыделенныйТекст = " ";
		Элементы.ТекстХТМЛ.УстановитьГраницыВыделения(ТекстХТМЛ.ПолучитьЗакладкуПоПозиции(ДополнительныеПараметры.ПозНач+1),ТекстХТМЛ.ПолучитьЗакладкуПоПозиции(ДополнительныеПараметры.ПозНач+1));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьШаблоны()
	//КаталогБДД = этаформа.ВладелецФормы.Объект.КаталогBDDEditor;//этаформа.ВладелецФормы.Элементы.КаталогBDDEditor.ТекстРедактирования;
	КаталогБДД=ЭтаФорма.КаталогBDDEditor;
	ПутьШаблона= КаталогБДД + "\lib\templates\templates.yml";
	
	Если ЕстьПоддержкаАсинхронныхВызовов Тогда
		Темп = Новый Файл();
		НачатьПоискФайлов(Новый ОписаниеОповещения("ПоискФайлаШаблонаЗавершение", ЭтаФорма, Новый Структура("ПутьКШаблону", ПутьШаблона)), КаталогБДД,"templates.yml",Истина);
		//Темп.НачатьПроверкуСуществования(Новый ОписаниеОповещения("ПроверитьНаличиеФайлаШаблонов", ЭтаФорма, Новый Структура("ПутьКШаблону", ПутьШаблона)));
	Иначе
		ФайлШаблона = Новый Файл(ПутьШаблона);
		Если ФайлШаблона.Существует() Тогда
			ФайлСтруктуры=Новый ЧтениеJSON;
			ФайлСтруктуры.ОткрытьФайл(ПутьШаблона);
			Шаблоны=ПрочитатьJSON(ФайлСтруктуры);
			ФайлСтруктуры.Закрыть();
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ПоискФайлаШаблонаЗавершение(НайденныеФайлы, ДополнительныеПараметры) Экспорт
	ПутьКШаблону = ДополнительныеПараметры.ПутьКШаблону;
	
	Если НайденныеФайлы.Количество()>0 Тогда
		ПрочитатьФайлСтруктурыШаблона(НайденныеФайлы[0]);
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура ПрочитатьФайлСтруктурыШаблона(Файл) Экспорт
	
	ФайлСтруктуры=Новый ЧтениеJSON;
	ФайлСтруктуры.ОткрытьФайл(Файл.ПолноеИмя);
	Шаблоны=ПрочитатьJSON(ФайлСтруктуры);
	ФайлСтруктуры.Закрыть();
	
КонецПроцедуры	

&НаКлиенте
Функция НайтиВШаблоне(ЧтоИщем)
	Если Шаблоны <> Неопределено ТОгда
	Для Каждого эл из Шаблоны Цикл
		Если Эл.Ключ = "Шаблоны" Тогда
			Для каждого элМасс из Эл.Значение Цикл
				ТекстГдеИщем = "";
				Если элМасс.Свойство("СтрокаДобавления",ТекстГдеИщем) Тогда
					Если СтрНайти(ТекстГдеИщем,ЧтоИщем) <> 0 или СтрНайти(ЧтоИщем, ТекстГдеИщем) <> 0 ТОгда
					//Если СтрНачинаетсяС(ТекстГдеИщем,ЧтоИщем) Тогда
						ТекстВозврата = "";
						элМасс.Свойство("ТекстШаблона",ТекстВозврата);
						ТекстВозврата = ТекстГдеИщем + " \n " + ТекстВозврата;
						Возврат ТекстВозврата;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	КонецЕсли;
	Возврат "";
КонецФункции

&НаКлиенте
Процедура ОбработатьНажатиеПодстановкиИзШаблона()
	Если Этаформа.ТекущийЭлемент.Имя = "ТекстФичи" Тогда
		Нстр = 0;
		Нкол = 0;
		Кстр = 0;
		Ккол = 0;
		Элементы.ТекстФичи.ПолучитьГраницыВыделения(Нстр,Нкол,Кстр,Ккол);
		БНстр = Нстр;
		БНкол = Нкол;
		БКстр = Кстр;
		БКкол = Ккол;
		нашли = ложь;
		стр = "";
		Пока Нкол <> 1 или нашли Цикл
			НКол = Нкол - 1;
			Элементы.ТекстФичи.УстановитьГраницыВыделения(Нстр,Нкол,Кстр,Ккол);
			Текст1 = Элементы.ТекстФичи.ВыделенныйТекст;
			Если Текст1 = " " Тогда
				нашли = Истина;
				Прервать;
			КонецЕсли;
			Стр = текст1 + стр;
			Ккол = Ккол - 1;
		КонецЦикла;
		Если нашли или НКол = 1 Тогда
			Стр = СокрЛП(Стр);
			ТекстПодстановки = НайтиВШаблоне(Стр);
			Если ТекстПодстановки <> "" Тогда
				Элементы.ТекстФичи.УстановитьГраницыВыделения(БНстр,НКол,БКстр,БКкол);
				Элементы.ТекстФичи.ВыделенныйТекст = СтрЗаменить(ТекстПодстановки,"\n",Символы.ПС);
			Иначе
				Элементы.ТекстФичи.УстановитьГраницыВыделения(БНстр,БНкол,БКстр,БКкол);
			КонецЕсли;
		Иначе
			Элементы.ТекстФичи.УстановитьГраницыВыделения(БНстр,БНкол,БКстр,БКкол);
		КонецЕсли;
	ИначеЕсли Этаформа.ТекущийЭлемент.Имя = "ТекстХТМЛ" Тогда
		Нач = "";
		Кон = "";
		ЭтаФорма.ТекущийЭлемент = Этаформа.Элементы.ТекстФичи; // иначе изменения не попадают в ТекстХТМЛ
		ЭтаФорма.ТекущийЭлемент = Этаформа.Элементы.ТекстХТМЛ;
		Элементы.ТекстХТМЛ.ПолучитьГраницыВыделения(Нач,Кон);
		ПозНач = ТекстХТМЛ.ПолучитьПозициюПоЗакладке(Нач);
		ПозНачБ = ПозНач;
		Нашли = ложь;
		пока ПозНач <> 0 Цикл
			ПозНач = ПозНач - 1;
			Элементы.ТекстХТМЛ.УстановитьГраницыВыделения(ТекстХТМЛ.ПолучитьЗакладкуПоПозиции(ПозНач),Кон);
			ТекстВыд = Элементы.ТекстХТМЛ.ВыделенныйТекст; // начало работать только после добавления ИМЕННО двух чтений из объекта
			ТекстВыд = Элементы.ТекстХТМЛ.ВыделенныйТекст;
			Если Лев(ТекстВыд,1) = " " или КодСимвола(Лев(ТекстВыд,1)) = 160 или Лев(ТекстВыд,1) = символы.пс Тогда
				нашли = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если нашли или ПозНач = 0 Тогда
			ПозКон = ТекстХТМЛ.ПолучитьПозициюПоЗакладке(Кон);
			Элементы.ТекстХТМЛ.УстановитьГраницыВыделения(ТекстХТМЛ.ПолучитьЗакладкуПоПозиции(ПозНач+1),ТекстХТМЛ.ПолучитьЗакладкуПоПозиции(ПозКон));
			стр = Элементы.ТекстХТМЛ.ВыделенныйТекст;
			стр = Элементы.ТекстХТМЛ.ВыделенныйТекст;
			ТекстПодстановки = НайтиВШаблоне(Стр);
			Если ТекстПодстановки <> "" Тогда
				Элементы.ТекстХТМЛ.УстановитьГраницыВыделения(ТекстХТМЛ.ПолучитьЗакладкуПоПозиции(ПозНач+1),ТекстХТМЛ.ПолучитьЗакладкуПоПозиции(ПозКон));
				ТекстПодстановки = СтрЗаменить(ТекстПодстановки,"\n","<br>");
				ТекстПодстановки = СтрЗаменить(ТекстПодстановки,Символы.ПС,"<br>");
				ТекстПодстановки = СтрЗаменить(ТекстПодстановки,Символы.Таб,"&nbsp;&nbsp;&nbsp;&nbsp;");
				Элементы.ТекстХТМЛ.ВыделенныйТекст=ТекстПодстановки;
			Иначе
				Элементы.ТекстХТМЛ.УстановитьГраницыВыделения(Нач,Кон);
			КонецЕсли;
		Иначе
			Элементы.ТекстХТМЛ.УстановитьГраницыВыделения(Нач,Кон);
		КонецЕсли;
	ИначеЕсли Этаформа.ТекущийЭлемент.Имя = "ТекстДерево" Тогда
		ИмяКолонки = СтрЗаменить(Элементы.ТекстДерево.ТекущийЭлемент.Имя,Элементы.ТекстДерево.Имя,"");
		Если ИмяКолонки="ТекстПараметраФичи" Тогда
			ТекстРед = Элементы.ТекстДерево.ТекущийЭлемент.ТекстРедактирования;
			Кон = СтрДлина(ТекстРед);
			Стр = "";
			нашли = ложь;
			Пока Кон <> 0 цикл
				кон = кон - 1;
				Сим = Сред(ТекстРед,кон+1,1);
				Если сим = " " Тогда
					Нашли = Истина;
					прервать;
				КонецЕсли;
				Стр = сим + Стр;
			КонецЦикла;
			Если нашли или Кон = 0 Тогда
				Стр = СокрЛП(Стр);
				Стр1 = Стр;
				ТекстПодстановки = НайтиВШаблоне(Стр);
				Если ТекстПодстановки <> "" Тогда
					СтрТекста = СтрЗаменить(ТекстПодстановки,"\n",Символы.ПС);
					
				КонецЕсли;

				
				
//-------------------------------------				
				//Список = ПолучитьСписокИзДерева(стр1);
				//Если Список.Количество() <> 0 Тогда
				//	Если этаформа.ВладелецФормы.ЕстьПоддержкаНемодальныхФорм Тогда
				//		выбрали = ВыбратьИзСписка(Список,ЭтаФорма.ТекущийЭлемент);
				//		Если Выбрали <> Неопределено Тогда
				//			ТекстРед = СтрЗаменить(ТекстРед,стр,выбрали.значение);
				//			Элементы.ТекстДерево.ТекущиеДанные[ИмяКолонки] = ТекстРед;
				//		Иначе
				//			ТекстРед = СтрЗаменить(ТекстРед,стр,"");
				//			Элементы.ТекстДерево.ТекущиеДанные[ИмяКолонки] = ТекстРед;
				//		КонецЕсли;
				//	Иначе
				//		ДопПараметры = Новый Структура;
				//		ДопПараметры.Вставить("ТекстРед",ТекстРед);
				//		ДопПараметры.Вставить("стр",стр);
				//		ДопПараметры.Вставить("ИмяКолонки",ИмяКолонки);
				//		Оповещение = новый ОписаниеОповещения("ПослеВыбораИзСпискаДерево",ЭтаФорма,ДопПараметры);
				//		ПоказатьВыборИзСписка(Оповещение,Список,ЭтаФорма.ТекущийЭлемент);
				//	КонецЕсли;
				//Иначе
				//	ТекстРед = СтрЗаменить(ТекстРед,стр,"");
				//	Элементы.ТекстДерево.ТекущиеДанные[ИмяКолонки] = ТекстРед;
				//КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция УбратьСпецСимволыВТекстеФичи(ИмяФайла,ВсеСимволы=Ложь, Файл=Ложь,ЗаменятьПереводы=Истина) Экспорт
	Если ЗаменятьПереводы Тогда
		ИмяФайла = СтрЗаменить(ИмяФайла,Символы.ПС," ");
	КонецЕсли;
	ИмяФайла = СтрЗаменить(ИмяФайла,Символы.ВТаб," ");
	ИмяФайла = СтрЗаменить(ИмяФайла,Символы.НПП," ");
	Если Файл Тогда
		ИмяФайла = СтрЗаменить(ИмяФайла,"      "," ");
		ИмяФайла = СтрЗаменить(ИмяФайла,"     "," ");
		ИмяФайла = СтрЗаменить(ИмяФайла,"    "," ");
		ИмяФайла = СтрЗаменить(ИмяФайла,"   "," ");
		ИмяФайла = СтрЗаменить(ИмяФайла,"  "," ");
		Если ЗаменятьПереводы Тогда
			ИмяФайла = СтрЗаменить(ИмяФайла," ",Символы.ПС);
		КонецЕсли;
	КонецЕсли;
	ИмяФайла = СтрЗаменить(ИмяФайла,Символы.Таб,"");
	//ИмяФайла = СтрЗаменить(ИмяФайла,""+Символы.ПС+""+Символы.ПС,Символы.ПС);
	//ИмяФайла = СтрЗаменить(ИмяФайла,""+Символы.ПС+""+Символы.ПС,"");
	ИмяФайла = СтрЗаменить(ИмяФайла,"""","");
	ИмяФайла = СтрЗаменить(ИмяФайла,"`","");
	ИмяФайла = СтрЗаменить(ИмяФайла,"@","");
	ИмяФайла = СтрЗаменить(ИмяФайла,"#","");
	ИмяФайла = СтрЗаменить(ИмяФайла,"<","");
	ИмяФайла = СтрЗаменить(ИмяФайла,">","");
	Если ВсеСимволы Тогда
		ИмяФайла = СтрЗаменить(ИмяФайла,".","");
		ИмяФайла = СтрЗаменить(ИмяФайла,",","");
		ИмяФайла = СтрЗаменить(ИмяФайла,":","");
		ИмяФайла = СтрЗаменить(ИмяФайла,";","");
		ИмяФайла = СтрЗаменить(ИмяФайла,"-","_");
		ИмяФайла = СтрЗаменить(ИмяФайла,"+","");
		ИмяФайла = СтрЗаменить(ИмяФайла,"/","");
		ИмяФайла = СтрЗаменить(ИмяФайла,"\","");
		ИмяФайла = СтрЗаменить(ИмяФайла,"=","");
		ИмяФайла = СтрЗаменить(ИмяФайла,"!","");
		ИмяФайла = СтрЗаменить(ИмяФайла,"$","");
		ИмяФайла = СтрЗаменить(ИмяФайла,"%","");
		ИмяФайла = СтрЗаменить(ИмяФайла,"^","");
		ИмяФайла = СтрЗаменить(ИмяФайла,"&","");
		ИмяФайла = СтрЗаменить(ИмяФайла,"*","");
		ИмяФайла = СтрЗаменить(ИмяФайла,"(","");
		ИмяФайла = СтрЗаменить(ИмяФайла,")","");
		ИмяФайла = СтрЗаменить(ИмяФайла,"№","");
		ИмяФайла = СтрЗаменить(ИмяФайла,"?","");
		ИмяФайла = СтрЗаменить(ИмяФайла,"`","");
		ИмяФайла = СтрЗаменить(ИмяФайла,"'","");
		ИмяФайла = СтрЗаменить(ИмяФайла,"~","");
	КонецЕсли;
	Возврат ИмяФайла;
КонецФункции	

&НаКлиенте
Функция ПолучитьСписокСлов(СтрокаПоиск,Где)
	Список = Новый СписокЗначений;
	стрслов=УбратьСпецСимволыВТекстеФичи(Где,,Истина);
	Для к = 1 по СтрЧислоСтрок(стрслов) Цикл
		Если СтрНачинаетсяС(СтрПолучитьСтроку(стрслов,к),СтрокаПоиск) Тогда
			ЗначениеПодстановки=СокрЛП(СтрПолучитьСтроку(стрслов,к));
			Если Список.НайтиПоЗначению(ЗначениеПодстановки) = Неопределено И ЗначениеПодстановки <> СтрокаПоиск Тогда
				Список.Добавить(ЗначениеПодстановки);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат Список;
КонецФункции

&НаКлиенте
Процедура ПослеВыбораИзСпискаСлова(ВыбранныйЭлемент,ДополнительныеПараметры) Экспорт
	Если ВыбранныйЭлемент <> Неопределено Тогда
		Элементы[ДополнительныеПараметры.ТекЭлемент].УстановитьГраницыВыделения(ДополнительныеПараметры.БНстр,
																				ДополнительныеПараметры.НКол,
																				ДополнительныеПараметры.БКстр,
																				ДополнительныеПараметры.БКкол);
		Элементы[ДополнительныеПараметры.ТекЭлемент].ВыделенныйТекст = ВыбранныйЭлемент.Значение;
	Иначе
		Элементы[ДополнительныеПараметры.ТекЭлемент].УстановитьГраницыВыделения(ДополнительныеПараметры.БНстр,
																				ДополнительныеПараметры.БНкол,
																				ДополнительныеПараметры.БКстр,
																				ДополнительныеПараметры.БКкол);
		//Элементы[ДополнительныеПараметры.ТекЭлемент].ВыделенныйТекст = "";
		//Элементы[ДополнительныеПараметры.ТекЭлемент].УстановитьГраницыВыделения(ДополнительныеПараметры.БНстр,
		//																		ДополнительныеПараметры.БНкол,
		//																		ДополнительныеПараметры.БКстр,
		//																		ДополнительныеПараметры.БКкол);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ПроверитьЗнакНаСпецСимвол(Текст) 
	СимвольнаяСтрока="!@#$%^&*()_+-=№;%:?*\/[]{}<>.,`~|'""""";
	Возврат СтрНайти(СимвольнаяСтрока,Текст)>0;
КонецФункции	

&НаКлиенте
Процедура ОбработатьНажатиеПодстановкиСлова()
	Если Этаформа.ТекущийЭлемент.Имя = "ТекстФичи" Тогда
		Нстр = 0;
		Нкол = 0;
		Кстр = 0;
		Ккол = 0;
		Элементы.ТекстФичи.ПолучитьГраницыВыделения(Нстр,Нкол,Кстр,Ккол);
		БНстр = Нстр;
		БНкол = Нкол;
		БКстр = Кстр;
		БКкол = Ккол;
		нашли = ложь;
		стр = "";
		Пока Нкол <> 0 или нашли Цикл
			Текст1 = Элементы.ТекстФичи.ВыделенныйТекст;
			Если Текст1 = " " или (Текст1<>"" и ПроверитьЗнакНаСпецСимвол(Текст1)) Тогда
				нашли = Истина;
				Прервать;
			КонецЕсли;
			НКол = Нкол - 1;
			Если НКол<>0 Тогда
				Элементы.ТекстФичи.УстановитьГраницыВыделения(Нстр,Нкол,Кстр,Ккол);
			КонецЕсли;
			Стр = текст1 + стр;
			Ккол = Ккол - 1;
		КонецЦикла;
		Если нашли или НКол = 1 или НКол=0 Тогда
			Если НКол=0 Тогда
				НКол=НКол+1;
			КонецЕсли;	
			Стр = СокрЛП(Стр);
//			Стр = УбратьСпецСимволыВТекстеФичи(Стр,Истина);
			Стр = Лев(Стр,СтрДлина(Стр));
			Список = ПолучитьСписокСлов(стр,ТекстФичи.получитьТекст());//ПолучитьСписокИзДерева(стр);
			
			Если Список.Количество() = 1 Тогда
				выбрали = Список[0];
				Элементы.ТекстФичи.УстановитьГраницыВыделения(БНстр,?(НКол = 1,НКол,НКол+1),БКстр,БКкол);
				Элементы.ТекстФичи.ВыделенныйТекст = выбрали.Значение;
			ИначеЕсли Список.Количество() <> 0 Тогда
				Если ЭтаФорма.ЕстьПоддержкаНемодальныхФорм Тогда
					выбрали = ВыбратьИзСписка(Список,ЭтаФорма.ТекущийЭлемент);
					Если Выбрали <> Неопределено Тогда
						Элементы.ТекстФичи.УстановитьГраницыВыделения(БНстр,?(НКол = 1,НКол,НКол+1),БКстр,БКкол);
						Элементы.ТекстФичи.ВыделенныйТекст = выбрали.Значение;
					Иначе
						Элементы.ТекстФичи.УстановитьГраницыВыделения(БНстр,БНкол,БКстр,БКкол);
						Элементы.ТекстФичи.ВыделенныйТекст = "";
						Элементы.ТекстФичи.УстановитьГраницыВыделения(БНстр,БНкол,БКстр,БКкол);
					КонецЕсли;
				Иначе
					ДопПараметры = Новый Структура;
					ДопПараметры.Вставить("БНстр",БНстр);
					ДопПараметры.Вставить("БНкол",БНкол);
					ДопПараметры.Вставить("БКстр",БКстр);
					ДопПараметры.Вставить("БКкол",БКкол);
					ДопПараметры.Вставить("НКол",НКол);
					ДопПараметры.Вставить("ТекЭлемент",Этаформа.ТекущийЭлемент.Имя);
					Оповещение = новый ОписаниеОповещения("ПослеВыбораИзСпискаСлова",ЭтаФорма,ДопПараметры);
					ПоказатьВыборИзСписка(Оповещение,Список,Элементы.ТекстФичи);
				КонецЕсли;
			Иначе
				Элементы.ТекстФичи.УстановитьГраницыВыделения(БНстр,БНкол,БКстр,БКкол);
				Элементы.ТекстФичи.ВыделенныйТекст = "";
				Элементы.ТекстФичи.УстановитьГраницыВыделения(БНстр,БНкол,БКстр,БКкол);
			КонецЕсли;
		Иначе
			Элементы.ТекстФичи.УстановитьГраницыВыделения(БНстр,БНкол,БКстр,БКкол);
			Элементы.ТекстФичи.ВыделенныйТекст = "";				
			Элементы.ТекстФичи.УстановитьГраницыВыделения(БНстр,БНкол,БКстр,БКкол);
		КонецЕсли;
	ИначеЕсли Этаформа.ТекущийЭлемент.Имя = "ТекстХТМЛ" Тогда
		Нач = "";
		Кон = "";
		ЭтаФорма.ТекущийЭлемент = Этаформа.Элементы.ТекстФичи; // иначе изменения не попадают в ТекстХТМЛ
		ЭтаФорма.ТекущийЭлемент = Этаформа.Элементы.ТекстХТМЛ;
		Элементы.ТекстХТМЛ.ПолучитьГраницыВыделения(Нач,Кон);
		ПозНач = ТекстХТМЛ.ПолучитьПозициюПоЗакладке(Нач);
		ПозНачБ = ПозНач;
		Нашли = ложь;
		пока ПозНач <> 0 Цикл
			ПозНач = ПозНач - 1;
			ТекстВыд = Элементы.ТекстХТМЛ.ВыделенныйТекст; // начало работать только после добавления ИМЕННО двух чтений из объекта
			ТекстВыд = Элементы.ТекстХТМЛ.ВыделенныйТекст;
			Если Лев(ТекстВыд,1) = " " или КодСимвола(Лев(ТекстВыд,1)) = 160 или Лев(ТекстВыд,1) = символы.пс или (ТекстВыд<>"" и ПроверитьЗнакНаСпецСимвол(Лев(ТекстВыд,1))) Тогда
				нашли = Истина;
				Прервать;
			КонецЕсли;
			Элементы.ТекстХТМЛ.УстановитьГраницыВыделения(ТекстХТМЛ.ПолучитьЗакладкуПоПозиции(ПозНач),Кон);
		КонецЦикла;
		Если нашли или ПозНач = 0 Тогда
			ПозНач=ПозНач+1;
			ПозКон = ТекстХТМЛ.ПолучитьПозициюПоЗакладке(Кон);
			Элементы.ТекстХТМЛ.УстановитьГраницыВыделения(ТекстХТМЛ.ПолучитьЗакладкуПоПозиции(ПозНач+1),ТекстХТМЛ.ПолучитьЗакладкуПоПозиции(ПозКон));
			стр = Элементы.ТекстХТМЛ.ВыделенныйТекст;
			стр = Элементы.ТекстХТМЛ.ВыделенныйТекст;
//			Стр = УбратьСпецСимволыВТекстеФичи(Стр,Истина);
			Список = ПолучитьСписокСлов(стр,ТекстХТМЛ.ПолучитьТекст());//ПолучитьСписокИзДерева(стр);
			Если Список.Количество() = 1 Тогда
				выбрали = Список[0];
				Элементы.ТекстХТМЛ.УстановитьГраницыВыделения(ТекстХТМЛ.ПолучитьЗакладкуПоПозиции(ПозНач+1),ТекстХТМЛ.ПолучитьЗакладкуПоПозиции(ПозКон+1));
				Элементы.ТекстХТМЛ.ВыделенныйТекст = выбрали.Значение;
			ИначеЕсли Список.Количество() <> 0 Тогда
				Если ЭтаФорма.ЕстьПоддержкаНемодальныхФорм Тогда
					выбрали = ВыбратьИзСписка(Список,ЭтаФорма.ТекущийЭлемент);
					Если Выбрали <> Неопределено Тогда
						Элементы.ТекстХТМЛ.УстановитьГраницыВыделения(ТекстХТМЛ.ПолучитьЗакладкуПоПозиции(ПозНач+1),ТекстХТМЛ.ПолучитьЗакладкуПоПозиции(ПозКон+1));
						Элементы.ТекстХТМЛ.ВыделенныйТекст = выбрали.Значение;
					Иначе
						Элементы.ТекстХТМЛ.УстановитьГраницыВыделения(ТекстХТМЛ.ПолучитьЗакладкуПоПозиции(ПозНач+1),ТекстХТМЛ.ПолучитьЗакладкуПоПозиции(ПозКон+1));
						Элементы.ТекстХТМЛ.ВыделенныйТекст = "";
						Элементы.ТекстХТМЛ.УстановитьГраницыВыделения(ТекстХТМЛ.ПолучитьЗакладкуПоПозиции(ПозНач+1),ТекстХТМЛ.ПолучитьЗакладкуПоПозиции(ПозНач+1));
					КонецЕсли;
				Иначе
					ДопПараметры = Новый Структура;
					ДопПараметры.Вставить("ПозНач",ПозНач);
					ДопПараметры.Вставить("ПозКон",ПозКон);
					Оповещение = новый ОписаниеОповещения("ПослеВыбораИзСпискаХТМЛСлова",ЭтаФорма,ДопПараметры);
					ПоказатьВыборИзСписка(Оповещение,Список,ЭтаФорма.ТекущийЭлемент);
				КонецЕсли;
			Иначе
				Элементы.ТекстХТМЛ.УстановитьГраницыВыделения(ТекстХТМЛ.ПолучитьЗакладкуПоПозиции(ПозНач+1),ТекстХТМЛ.ПолучитьЗакладкуПоПозиции(ПозКон+1));
				Элементы.ТекстХТМЛ.ВыделенныйТекст = "";
				Элементы.ТекстХТМЛ.УстановитьГраницыВыделения(ТекстХТМЛ.ПолучитьЗакладкуПоПозиции(ПозНач+1),ТекстХТМЛ.ПолучитьЗакладкуПоПозиции(ПозНач+1));
			КонецЕсли;
		Иначе 
			Элементы.ТекстХТМЛ.УстановитьГраницыВыделения(ТекстХТМЛ.ПолучитьЗакладкуПоПозиции(ПозНач+1),ТекстХТМЛ.ПолучитьЗакладкуПоПозиции(ПозКон+1));
			Элементы.ТекстХТМЛ.ВыделенныйТекст = "";
			Элементы.ТекстХТМЛ.УстановитьГраницыВыделения(ТекстХТМЛ.ПолучитьЗакладкуПоПозиции(ПозНач+1),ТекстХТМЛ.ПолучитьЗакладкуПоПозиции(ПозНач+1));
		КонецЕсли;
	ИначеЕсли Этаформа.ТекущийЭлемент.Имя = "ТекстДерево" Тогда
		//Пока подумать как лучше и красивее это сделать	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте 
Процедура ПослеВыбораИзСпискаХТМЛСлова(ВыбранныйЭлемент,ДополнительныеПараметры) Экспорт
	Если ВыбранныйЭлемент <> Неопределено Тогда
		Элементы.ТекстХТМЛ.УстановитьГраницыВыделения(ТекстХТМЛ.ПолучитьЗакладкуПоПозиции(ДополнительныеПараметры.ПозНач+1),ТекстХТМЛ.ПолучитьЗакладкуПоПозиции(ДополнительныеПараметры.ПозКон+1));//ДополнительныеПараметры.ПозКон);
		Элементы.ТекстХТМЛ.ВыделенныйТекст = ВыбранныйЭлемент.Значение;
	Иначе
		Элементы.ТекстХТМЛ.УстановитьГраницыВыделения(ТекстХТМЛ.ПолучитьЗакладкуПоПозиции(ДополнительныеПараметры.ПозНач+1),ТекстХТМЛ.ПолучитьЗакладкуПоПозиции(ДополнительныеПараметры.ПозКон+1));
		//Элементы.ТекстХТМЛ.ВыделенныйТекст = "";
		//Элементы.ТекстХТМЛ.УстановитьГраницыВыделения(ТекстХТМЛ.ПолучитьЗакладкуПоПозиции(ДополнительныеПараметры.ПозНач+1),ТекстХТМЛ.ПолучитьЗакладкуПоПозиции(ДополнительныеПараметры.ПозНач+1));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция НайтиСимволКонцаСлова(СимволСтр)
	СтрПоиска = "<>-_()\/`'?.,|~:;#@$%^&*!№%?*={}[]";
	Возврат СтрЧислоВхождений(СтрПоиска,СимволСтр) <> 0;
КонецФункции

&НаКлиенте
Функция НайтиФункциональныеСлова(ГдеИщем)
	Для каждого эл из МассивФункциональныхСлов Цикл
		Поз = СтрНайти(ГдеИщем,ТРег(Эл.Значение));
		Если Поз <> 0 Тогда
			Возврат Новый Структура("Поз,Слово",Поз,ТРег(Эл.Значение));
		Иначе
			Поз = СтрНайти(ГдеИщем,Эл.Значение);
			Если Поз <> 0 Тогда
				Возврат Новый Структура("Поз,Слово",Поз,Эл.Значение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Для каждого эл из МассивКлючевыхСлов Цикл
		Поз = СтрНайти(ГдеИщем,ТРег(Эл.Значение));
		Если Поз <> 0 Тогда
			Возврат Новый Структура("Поз,Слово",Поз,ТРег(Эл.Значение));
		Иначе
			Поз = СтрНайти(ГдеИщем,Эл.Значение);
			Если Поз <> 0 Тогда
				Возврат Новый Структура("Поз,Слово",Поз,Эл.Значение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат Новый Структура("Поз,Слово",0,"");
КонецФункции

&НаКлиенте
Процедура ОбработатьНажатиеПодстановкиСтроки()
	Если Этаформа.ТекущийЭлемент.Имя = "ТекстФичи" Тогда
		Нстр = 0;
		Нкол = 0;
		Кстр = 0;
		Ккол = 0;
		Элементы.ТекстФичи.ПолучитьГраницыВыделения(Нстр,Нкол,Кстр,Ккол);
		Элементы.ТекстФичи.УстановитьГраницыВыделения(Нстр,1,Кстр,Ккол);
		Стр = СокрЛП(Элементы.ТекстФичи.ВыделенныйТекст);
		Список = ПолучитьСписокСтрок(стр,ТекстФичи.получитьТекст());//ПолучитьСписокСлов(стр,ТекстФичи.получитьТекст());//ПолучитьСписокИзДерева(стр);
		Если Список.Количество() = 1 Тогда
			выбрали = Список[0];
			Элементы.ТекстФичи.УстановитьГраницыВыделения(Нстр,1,Кстр,Ккол);
			Элементы.ТекстФичи.ВыделенныйТекст = выбрали.Значение;
		ИначеЕсли Список.Количество() <> 0 Тогда
			Если ЭтаФорма.ЕстьПоддержкаНемодальныхФорм Тогда
				выбрали = ВыбратьИзСписка(Список,ЭтаФорма.ТекущийЭлемент);
				Если Выбрали <> Неопределено Тогда
					Элементы.ТекстФичи.УстановитьГраницыВыделения(Нстр,1,Кстр,Ккол);
					Элементы.ТекстФичи.ВыделенныйТекст = выбрали.Значение;
				Иначе
					Элементы.ТекстФичи.УстановитьГраницыВыделения(Нстр,Нкол,Кстр,Ккол);
				КонецЕсли;
			Иначе
				ДопПараметры = Новый Структура;
				ДопПараметры.Вставить("БНстр",Нстр);
				ДопПараметры.Вставить("БНкол",НКол);
				ДопПараметры.Вставить("БКстр",Кстр);
				ДопПараметры.Вставить("БКкол",Ккол);
				ДопПараметры.Вставить("НКол",1);
				ДопПараметры.Вставить("ТекЭлемент",Этаформа.ТекущийЭлемент.Имя);
				Оповещение = новый ОписаниеОповещения("ПослеВыбораИзСпискаСлова",ЭтаФорма,ДопПараметры);
				ПоказатьВыборИзСписка(Оповещение,Список,Элементы.ТекстФичи);
			КонецЕсли;
		Иначе
			Элементы.ТекстФичи.УстановитьГраницыВыделения(Нстр,Нкол,Кстр,Ккол);
		КонецЕсли;
	ИначеЕсли Этаформа.ТекущийЭлемент.Имя = "ТекстХТМЛ" Тогда
		Нач = "";
		Кон = "";
		ЭтаФорма.ТекущийЭлемент = Этаформа.Элементы.ТекстФичи; // иначе изменения не попадают в ТекстХТМЛ
		ЭтаФорма.ТекущийЭлемент = Этаформа.Элементы.ТекстХТМЛ;
		Элементы.ТекстХТМЛ.ПолучитьГраницыВыделения(Нач,Кон);
		ПозНач = ТекстХТМЛ.ПолучитьПозициюПоЗакладке(Нач);
		ПозНачБ = ПозНач;
		Нашли = ложь;
		пока ПозНач <> 0 Цикл
			ПозНач = ПозНач - 1;
			ТекстВыд = Элементы.ТекстХТМЛ.ВыделенныйТекст; // начало работать только после добавления ИМЕННО двух чтений из объекта
			ТекстВыд = Элементы.ТекстХТМЛ.ВыделенныйТекст;
			Если Лев(ТекстВыд,1) = символы.пс Тогда
				нашли = Истина;
				Прервать;
			КонецЕсли;
			Элементы.ТекстХТМЛ.УстановитьГраницыВыделения(ТекстХТМЛ.ПолучитьЗакладкуПоПозиции(ПозНач),Кон);
		КонецЦикла;
		Если нашли или ПозНач = 0 Тогда
			ПозНач=ПозНач+1;
			ПозКон = ТекстХТМЛ.ПолучитьПозициюПоЗакладке(Кон);
			Элементы.ТекстХТМЛ.УстановитьГраницыВыделения(ТекстХТМЛ.ПолучитьЗакладкуПоПозиции(ПозНач+1),ТекстХТМЛ.ПолучитьЗакладкуПоПозиции(ПозКон));
			стр = Элементы.ТекстХТМЛ.ВыделенныйТекст;
			стр = Элементы.ТекстХТМЛ.ВыделенныйТекст;
//			Стр = УбратьСпецСимволыВТекстеФичи(Стр,Истина);
			Список = ПолучитьСписокСтрок(стр,ТекстФичи.получитьТекст());//ПолучитьСписокСлов(стр,ТекстХТМЛ.ПолучитьТекст());//ПолучитьСписокИзДерева(стр);
			Если Список.Количество() = 1 Тогда
				выбрали = Список[0];
				Элементы.ТекстХТМЛ.УстановитьГраницыВыделения(ТекстХТМЛ.ПолучитьЗакладкуПоПозиции(ПозНач+1),ТекстХТМЛ.ПолучитьЗакладкуПоПозиции(ПозКон+1));
				Элементы.ТекстХТМЛ.ВыделенныйТекст = выбрали.Значение;
			ИначеЕсли Список.Количество() <> 0 Тогда
				Если ЭтаФорма.ЕстьПоддержкаНемодальныхФорм Тогда
					выбрали = ВыбратьИзСписка(Список,ЭтаФорма.ТекущийЭлемент);
					Если Выбрали <> Неопределено Тогда
						Элементы.ТекстХТМЛ.УстановитьГраницыВыделения(ТекстХТМЛ.ПолучитьЗакладкуПоПозиции(ПозНач+1),ТекстХТМЛ.ПолучитьЗакладкуПоПозиции(ПозКон+1));
						Элементы.ТекстХТМЛ.ВыделенныйТекст = выбрали.Значение;
					Иначе
						Элементы.ТекстХТМЛ.УстановитьГраницыВыделения(ТекстХТМЛ.ПолучитьЗакладкуПоПозиции(ПозНач+1),ТекстХТМЛ.ПолучитьЗакладкуПоПозиции(ПозКон+1));
					КонецЕсли;
				Иначе
					ДопПараметры = Новый Структура;
					ДопПараметры.Вставить("ПозНач",ПозНач);
					ДопПараметры.Вставить("ПозКон",ПозКон);
					Оповещение = новый ОписаниеОповещения("ПослеВыбораИзСпискаХТМЛСлова",ЭтаФорма,ДопПараметры);
					ПоказатьВыборИзСписка(Оповещение,Список,ЭтаФорма.ТекущийЭлемент);
				КонецЕсли;
			Иначе
				Элементы.ТекстХТМЛ.УстановитьГраницыВыделения(ТекстХТМЛ.ПолучитьЗакладкуПоПозиции(ПозНач+1),ТекстХТМЛ.ПолучитьЗакладкуПоПозиции(ПозКон+1));
			КонецЕсли;
		Иначе 
			Элементы.ТекстХТМЛ.УстановитьГраницыВыделения(ТекстХТМЛ.ПолучитьЗакладкуПоПозиции(ПозНач+1),ТекстХТМЛ.ПолучитьЗакладкуПоПозиции(ПозКон+1));
		КонецЕсли;
	ИначеЕсли Этаформа.ТекущийЭлемент.Имя = "ТекстДерево" Тогда
		//Пока подумать как лучше и красивее это сделать	
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьМассивСтрок(ВхТекст)
	Массиврез = Новый Массив;
	Для к = 1 по СтрЧислоСтрок(ВхТекст) Цикл
		Массиврез.Добавить(СтрПолучитьСтроку(ВхТекст,к));
	КонецЦикла;
	Возврат Массиврез;
КонецФункции

&НаКлиенте
Функция ПолучитьСписокСтрок(СтрокаПоиск,Где)
	Список = Новый СписокЗначений;
	СтрСтрок = УбратьСпецСимволыВТекстеФичи(Где,,истина,ложь);
	СтрСтрок = СтрЗаменить(СтрСтрок,Символы.ПС,Символы.ПС); // делалаем многострочную строку
	Для к = 1 по СтрЧислоСтрок(СтрСтрок) Цикл
		ГдеИщемСтрока = СокрЛП(СтрПолучитьСтроку(СтрСтрок,к));
		Если СтрНачинаетсяС(ГдеИщемСтрока,СтрокаПоиск) Тогда
			Если Список.НайтиПоЗначению(ГдеИщемСтрока) = Неопределено и ГдеИщемСтрока <> СтрокаПоиск Тогда
				Список.Добавить(ГдеИщемСтрока);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат Список;
КонецФункции




#КонецОбласти

#Область Метаданные

&НаКлиенте
Процедура ВыполнитьПроцедуры(МассивТекста) Экспорт
	Для Каждого Стр Из МассивТекста Цикл
		Выполнить(Стр);
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоМетаданныхВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = ложь;
	Если Элементы.ГруппаРедактирования.ТекущаяСтраница.Имя = "РедакторТекста" ТОгда
		Элементы.ТекстФичи.ВыделенныйТекст = "```" + Элемент.ТекущиеДанные.ПолноеИмяОбъекта + "```";
	ИначеЕсли Элементы.ГруппаРедактирования.ТекущаяСтраница.Имя = "РедакторХТМЛ" Тогда
		Элементы.ТекстХТМЛ.ВыделенныйТекст = "```" + Элемент.ТекущиеДанные.ПолноеИмяОбъекта + "```";
	ИначеЕсли Элементы.ГруппаРедактирования.ТекущаяСтраница.Имя = "РедакторДерево" Тогда
		ИмяКолонки = СтрЗаменить(Элементы.ТекстДерево.ТекущийЭлемент.Имя,Элементы.ТекстДерево.Имя,"");
		Если ИмяКолонки="ТекстПараметраФичи" Тогда
			Элементы.ТекстДерево.ТекущиеДанные[ИмяКолонки] = Элементы.ТекстДерево.ТекущиеДанные[ИмяКолонки] + " ```" + Элемент.ТекущиеДанные.ПолноеИмяОбъекта + "```";
			ТекстДеревоПриИзменении("");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМетаданные()
	ВеткиМетаданных.Добавить("Общие формы","ОбщиеФормы");
	ВеткиМетаданных.Добавить("Интерфейсы","Интерфейсы");
	ВеткиМетаданных.Добавить("Константы","Константы");
	ВеткиМетаданных.Добавить("Справочники","Справочники");
	ВеткиМетаданных.Добавить("Документы","Документы");
	ВеткиМетаданных.Добавить("Журналы документов","ЖурналыДокументов");
	ВеткиМетаданных.Добавить("Отчеты","Отчеты");
	ВеткиМетаданных.Добавить("Обработки","Обработки");
	ВеткиМетаданных.Добавить("Планы видов характеристик","ПланыВидовХарактеристик");
	ВеткиМетаданных.Добавить("Регистры сведений","РегистрыСведений");
	ВеткиМетаданных.Добавить("Регистры накопления","РегистрыНакопления");
	ВеткиМетаданных.Добавить("Планы счетов","ПланыСчетов");
	ВеткиМетаданных.Добавить("Планы видов расчета","ПланыВидовРасчета");
	ВеткиМетаданных.Добавить("Регистры бухгалтерии","РегистрыБухгалтерии");
	ВеткиМетаданных.Добавить("Регистры расчета","РегистрыРасчета");
	ВеткиМетаданных.Добавить("Бизнес-процессы","БизнесПроцессы");
	ВеткиМетаданных.Добавить("Задачи","Задачи");
	ВеткиМетаданных.Добавить("Планы обмена","ПланыОбмена");
	
	ДеревоМета = РеквизитФормыВЗначение("ДеревоМетаданных",Тип("ДеревоЗначений"));
	//ДеревоМета = Новый ДеревоЗначений;
	ДеревоМета.Строки.Очистить();
	ДобавитьВетвьМетаданных(Метаданные.ОбщиеФормы, "Общие формы",ДеревоМета);//, 6, 7);
	ДобавитьВетвьМетаданных(Метаданные.Интерфейсы, "Интерфейсы",ДеревоМета);//, 54, 55);
	ДобавитьВетвьМетаданных(Метаданные.Константы, "Константы",ДеревоМета);//, 20, 0);
	ДобавитьВетвьМетаданных(Метаданные.Справочники, "Справочники",ДеревоМета);//, 2, 3);

	стрКорень = ДеревоМета.Строки.Добавить();
	стрКорень.Представление = "Документы";
	стрКорень.Имя = стрКорень.Представление;
	стрКорень.ИндексКартинки		= 12;
	СтрокиКорня 			= стрКорень.Строки;
	Для каждого МетаД из Метаданные.ЖурналыДокументов цикл
		Если ПравоДоступа("Просмотр", МетаД) тогда
			ДобавитьОбъект(СтрокиКорня, МетаД, "Журналы документов");//, 15);
		КонецЕсли;
	КонецЦикла;
	Для каждого МетаД из Метаданные.Документы цикл
		Если ПравоДоступа("Просмотр", МетаД) тогда
			ДобавитьОбъект(СтрокиКорня, МетаД, "Документы");//, 13);
		КонецЕсли;
	КонецЦикла;	

	ДобавитьВетвьМетаданных(Метаданные.ПланыВидовХарактеристик, "Планы видов характеристик",ДеревоМета);//, 37, 38);
	ДобавитьВетвьМетаданных(Метаданные.ПланыСчетов, "Планы счетов",ДеревоМета);//, 39, 40);
	ДобавитьВетвьМетаданных(Метаданные.ПланыВидовРасчета, "Планы видов расчета",ДеревоМета);//, 47, 48);
	ДобавитьВетвьМетаданных(Метаданные.Отчеты, "Отчеты",ДеревоМета);//, 23, 24);
	ДобавитьВетвьМетаданных(Метаданные.Обработки, "Обработки",ДеревоМета);//, 18, 19);
	ДобавитьВетвьМетаданных(Метаданные.РегистрыСведений, "Регистры сведений",ДеревоМета);//, 33, 34);
	ДобавитьВетвьМетаданных(Метаданные.РегистрыНакопления, "Регистры накопления",ДеревоМета);//, 31, 32);
	ДобавитьВетвьМетаданных(Метаданные.РегистрыБухгалтерии, "Регистры бухгалтерии",ДеревоМета);//, 41, 42);
	ДобавитьВетвьМетаданных(Метаданные.РегистрыРасчета, "Регистры расчета",ДеревоМета);//, 49, 50);
	ДобавитьВетвьМетаданных(Метаданные.БизнесПроцессы, "Бизнес-процессы",ДеревоМета);//, 43, 44);
	ДобавитьВетвьМетаданных(Метаданные.Задачи, "Задачи",ДеревоМета);//, 45, 46);
	ДобавитьВетвьМетаданных(Метаданные.ПланыОбмена, "Планы обмена",ДеревоМета);//, 51, 52);
	ЗначениеВРеквизитФормы(ДеревоМета,"ДеревоМетаданных");	
КонецПроцедуры

&наСервере
Процедура ДобавитьВетвьМетаданных(Ветвь, Знач ИмяВетви,ДеревоМета)//, Знач КартинкаВетви=0, Знач КартинкаОбъекта=0)

	стрВетвь = ДеревоМета.Строки.Добавить();
	стрВетвь.Представление = ИмяВетви;
	стрВетвь.Имя = стрВетвь.Представление;
	СтрВетвь.ПолноеИмяОбъекта = ИмяВетви;
	//стрВетвь.ИндексКартинки	   = КартинкаВетви;
	
	СтрокиВетви = стрВетвь.Строки;
	Для каждого МетаД из Ветвь цикл
		Если ПравоДоступа("Просмотр", МетаД) тогда
			ДобавитьОбъект(СтрокиВетви, МетаД, ИмяВетви);//, КартинкаОбъекта);
		КонецЕсли;
	КонецЦикла;	

КонецПроцедуры // ДобавитьВетвьМетаданных

&НаСервере
Процедура ДобавитьОбъект(СтрокиВетви, Знач МетаД, Знач ВидОбъекта)//, Знач ИндексКартинки)

	стрСтрока = СтрокиВетви.Добавить();
	стрСтрока.Вид 			 = ВеткиМетаданных.НайтиПоЗначению(ВидОбъекта).Представление;
	стрСтрока.Имя			 = МетаД.Имя;
	стрСтрока.Представление  = ?(ПустаяСтрока(МетаД.Синоним), МетаД.Имя, МетаД.Синоним);
	//стрСтрока.ИндексКартинки		 = ИндексКартинки;
	стрСтрока.ПолноеИмяОбъекта = Строка(стрСтрока.Вид) + "." + Строка(МетаД.Имя);
	
	спПодсистемы = Новый СписокЗначений;
	//Для каждого Подсистема из МетаД.Подсистемы цикл
	//	ИмяПодсистемы = Подсистема.Имя;
	//	спПодсистемы.Добавить(ИмяПодсистемы);
	//	
	//	стрПодсистема = дзВсеПодсистемы.Строки.Найти(ИмяПодсистемы, "Имя", Истина);
	//	Пока стрПодсистема.Родитель <> Неопределено цикл
	//		стрПодсистема = стрПодсистема.Родитель;
	//		
	//		Если спПодсистемы.НайтиПоЗначению(стрПодсистема.Имя) = Неопределено тогда
	//			спПодсистемы.Добавить(стрПодсистема.Имя);
	//		КонецЕсли;
	//	КонецЦикла;
	//КонецЦикла;
	стрСтрока.Подсистемы = спПодсистемы;

КонецПроцедуры // ДобавитьОбъект

&НаСервере
Процедура ЗаполнитьДеревоПодсистем()
	ДеревоПодсистем = РеквизитФормыВЗначение("дзВсеПодсистемы",Тип("ДеревоЗначений"));
	ДеревоПодсистем.строки.Очистить();
	ДобавитьПодсистему(ДеревоПодсистем.строки,Метаданные,спПодсистемы);
	ЗначениеВРеквизитФормы(ДеревоПодсистем,"дзВсеПодсистемы");
КонецПроцедуры

&НаСервере
Процедура ДобавитьПодсистему(СтрокиДереваПодсистем, Подсистема, спПодсистемы)

	стрПодсистема = СтрокиДереваПодсистем.Добавить();
	ПолноеИмяПодсистемы = СтрЗаменить(Подсистема.ПолноеИмя(), "Подсистема.", "");
	стрПодсистема.ПолноеИмя = ПолноеИмяПодсистемы;
	стрПодсистема.Имя 			= Подсистема.Имя;
	стрПодсистема.Представление = ?(ПустаяСтрока(Подсистема.Синоним), Подсистема.Имя, Подсистема.Синоним);
	стрПодсистема.МД			= Подсистема;
	
	спПодсистемы.Добавить(стрПодсистема.ПолноеИмя, стрПодсистема.Представление);
	
	Для каждого п из Подсистема.Подсистемы цикл
		ДобавитьПодсистему(стрПодсистема.Строки, п, спПодсистемы);
	КонецЦикла;
	
КонецПроцедуры // ДобавитьПодсистему

&НаКлиенте
Процедура ФильтрПодсистемПриИзменении(Элемент)
	Если спПодсистемы.НайтиПоЗначению(ФильтрПодсистем) = Неопределено Тогда
		ФильтрПодсистем = "";
	КонецЕсли; 
	//ПриИзмененииФильтраПодсистем();
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокИзДерева(стр)
	Дерево = РеквизитФормыВЗначение("ДеревоМетаданных",Тип("ДеревоЗначений"));
	Спис = Новый СписокЗначений;
	НайтиВДереве(Дерево,Спис,Стр);
	Возврат Спис;	
КонецФункции

&НаСервере
Процедура НайтиВДереве(Дерево,Спис,Стр)
	Для каждого ветка из Дерево.строки Цикл
		Если СтрНайти(НРег(ветка.ПолноеИмяОбъекта),нрег(Стр)) <> 0 Тогда
			Спис.Добавить(ветка.ПолноеИмяОбъекта);
		КонецЕсли;
		Если ветка.Строки.Количество() <> 0 Тогда
			НайтиВДереве(ветка,спис,стр);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ФильтрИменИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	//сообщить(1);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеречитатьШаблоны(Команда)
	// Вставить содержимое обработчика.
	ПрочитатьШаблоны();	
КонецПроцедуры

#КонецОбласти

#Область Пригодиццо
&НаКлиенте
Процедура ПодключитьЗавершениеАДД(ИмяКаталогаВременныхФайлов, ДополнительныеПараметры) Экспорт
	ИмяФайла=ИмяКаталогаВременныхФайлов+"AddHook.dll";
	Макет1	= ПолучитьМакетНаСервере("ПерехватКлавиатурыАДД");
	Макет1.Записать(ИмяФайла);
	
	Если ЕстьПоддержкаАсинхронныхВызовов Тогда
		НачатьПодключениеВнешнейКомпоненты(Новый ОписаниеОповещения("ПодключениеВнешнейКомпонентыЗавершение", ЭтаФорма),ИмяФайла,"Hook",ТипВнешнейКомпоненты.COM);
	Иначе
		Попытка 
			рез = ПодключитьВнешнююКомпоненту(ИмяФайла, "Hook1",ТипВнешнейКомпоненты.COM);
			ПодключениеВнешнейКомпонентыЗавершение(рез, Новый Структура());
//			УстановитьВнешнююКомпоненту(ИмяФайладлл);
		Исключение
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = "Перехват клавиатуры не подключен!";
			Сообщение.УстановитьДанные(ЭтотОбъект);
			Сообщение.Сообщить();			
		КонецПопытки;
	КонецЕсли;	
КонецПроцедуры	

&НаКлиенте
Процедура ПодключениеВнешнейКомпонентыЗавершениеАДД(Подключено,ДополнительныеПараметры) Экспорт
	Если Подключено Тогда
		Попытка
			КомпонентаKeyBoardHook = Новый("AddIn.Hook1.AddHookExtension");
			КомпонентаKeyBoardHook.HookEnabled=1;
		Исключение
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = "Перехват клавиатуры не подключен!";
			Сообщение.УстановитьДанные(ЭтотОбъект);
			Сообщение.Сообщить();
		КонецПопытки;
	Иначе		
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = "Перехват клавиатуры не подключен!";
		Сообщение.УстановитьДанные(ЭтотОбъект);
		Сообщение.Сообщить();
	КонецЕсли;
КонецПроцедуры	 

#КонецОбласти